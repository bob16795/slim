format ELF64
section '.text' executable
public _start

print:
    mov r10, rsp
    sub rsp, 8
    mov [rsp], al
    mov edi, 1
    mov rsi, rsp
    mov edx, 1
    mov eax, 1
    syscall
    mov rsp, r10
    ret
addr_0:
addr_1:
addr_2:
addr_3:
addr_4:
addr_5:
addr_6:
addr_7:
addr_8:
addr_9:
addr_10:
addr_11:
addr_12:
    ; - proc len 1 1
addr_13:
    pop rax
    push rax
    push rax
addr_14:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_15:
    mov qword rax, 0
    push rax
addr_16:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_17:
    pop rbx
    test rbx, rbx
    jz addr_19
addr_18:
addr_18_0:
    pop rax
addr_18_1:
    mov qword rax, 0
    push rax
addr_18_2:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_18_3:
addr_19:
    pop rax
    push rax
    push rax
addr_20:
addr_21:
    mov qword rax, 1
    push rax
addr_22:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_23:
    pop rax
    push rax
    push rax
addr_24:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_25:
    pop rbx
    test rbx, rbx
    jz addr_26
    jmp addr_20
addr_26:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_27:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_28:
    pop rax
    pop rbx
    push rax
    push rbx
addr_29:
    pop rax
addr_30:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_31:
addr_32:
    ; - proc print 1 0
addr_33:
    pop rax
    push rax
    push rax
addr_34:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_35
    jmp addr_13
addr_35:
    pop rax
    pop rbx
    push rax
    push rbx
addr_36:
    mov qword rax, 1
    push rax
addr_37:
    mov qword rax, 1
    push rax
addr_38:
    pop rax
    pop rdi
    pop rsi
    pop rdx
    syscall
    push rax
addr_39:
    pop rax
addr_40:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_41:
addr_42:
    ; - proc cr 0 0
addr_43:
    push 1
    push str_0
addr_44:
    mov qword rax, 1
    push rax
addr_45:
    mov qword rax, 1
    push rax
addr_46:
    pop rax
    pop rdi
    pop rsi
    pop rdx
    syscall
    push rax
addr_47:
    pop rax
addr_48:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_49:
addr_50:
    ; - proc println 1 0
addr_51:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_52
    jmp addr_33
addr_52:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_53
    jmp addr_43
addr_53:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_54:
addr_55:
    ; - proc eq 2 1
addr_56:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_57:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_58:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_59:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_60:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_61:
    pop rbx
    test rbx, rbx
    jz addr_63
addr_62:
addr_62_0:
    pop rax
addr_62_1:
    pop rax
addr_62_2:
    mov qword rax, 0
    push rax
addr_62_3:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_62_4:
addr_63:
    mov qword rax, 1
    push rax
addr_64:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_65:
    pop rax
    pop rbx
    push rax
    push rbx
addr_66:
    mov qword rax, 1
    push rax
addr_67:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_68:
addr_69:
    mov qword rax, 1
    push rax
addr_70:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_71:
    pop rax
    pop rbx
    push rax
    push rbx
addr_72:
    mov qword rax, 1
    push rax
addr_73:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_74:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_75:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_76:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_77:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_78:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_79:
    mov qword rax, 0
    push rax
addr_80:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_81:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_82:
    mov qword rax, 0
    push rax
addr_83:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_84:
    pop rbx
    pop rax
    and rax, rbx
    push rax
addr_85:
    pop rbx
    test rbx, rbx
    jz addr_87
addr_86:
addr_86_0:
    pop rax
addr_86_1:
    pop rax
addr_86_2:
    pop rax
addr_86_3:
    pop rax
addr_86_4:
    mov qword rax, 1
    push rax
addr_86_5:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_86_6:
addr_87:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_88:
    mov qword rax, 0
    push rax
addr_89:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_90:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_91:
    mov qword rax, 0
    push rax
addr_92:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_93:
    pop rbx
    pop rax
    or rax, rbx
    push rax
addr_94:
    pop rbx
    test rbx, rbx
    jz addr_96
addr_95:
addr_95_0:
    pop rax
addr_95_1:
    pop rax
addr_95_2:
    pop rax
addr_95_3:
    pop rax
addr_95_4:
    mov qword rax, 0
    push rax
addr_95_5:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_95_6:
addr_96:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_97:
    pop rbx
    test rbx, rbx
    jz addr_98
    jmp addr_68
addr_98:
    pop rax
addr_99:
    pop rax
addr_100:
    mov qword rax, 0
    push rax
addr_101:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_102:
addr_103:
    ; - proc copy 2 2
addr_104:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_105:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_106:
addr_107:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_108:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_109:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_110:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_111:
    pop rax
addr_112:
    pop rax
    pop rbx
    push rax
    push rbx
addr_113:
    mov qword rax, 1
    push rax
addr_114:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_115:
    pop rax
    pop rbx
    push rax
    push rbx
addr_116:
    mov qword rax, 1
    push rax
addr_117:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_118:
    pop rax
    push rax
    push rax
addr_119:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_120:
    mov qword rax, 0
    push rax
addr_121:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_122:
    pop rbx
    test rbx, rbx
    jz addr_123
    jmp addr_106
addr_123:
    pop rax
    pop rbx
    push rax
    push rbx
addr_124:
    mov qword rax, 1
    push rax
addr_125:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_126:
    mov qword rax, 0
    push rax
addr_127:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_128:
    pop rax
addr_129:
    pop rax
addr_130:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_131:
addr_132:
    ; - proc last 1 1
addr_133:
    mov qword rax, 1
    push rax
addr_134:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_135:
addr_136:
    mov qword rax, 1
    push rax
addr_137:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_138:
    pop rax
    push rax
    push rax
addr_139:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_140:
    mov qword rax, 0
    push rax
addr_141:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_142:
    pop rbx
    test rbx, rbx
    jz addr_143
    jmp addr_135
addr_143:
    mov qword rax, 1
    push rax
addr_144:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_145:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_146:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_147:
addr_148:
    ; - proc clear 1 1
addr_149:
    pop rax
    push rax
    push rax
addr_150:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_151:
    mov qword rax, 0
    push rax
addr_152:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_153:
    pop rbx
    test rbx, rbx
    jz addr_155
addr_154:
addr_154_0:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_154_1:
addr_155:
    pop rax
    push rax
    push rax
addr_156:
addr_157:
    pop rax
    push rax
    push rax
addr_158:
    mov qword rax, 0
    push rax
addr_159:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_160:
    pop rax
addr_161:
    mov qword rax, 1
    push rax
addr_162:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_163:
    pop rax
    push rax
    push rax
addr_164:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_165:
    pop rbx
    test rbx, rbx
    jz addr_166
    jmp addr_156
addr_166:
    pop rax
addr_167:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_168:
addr_169:
    ; - proc cat 2 1
addr_170:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_171:
    pop rax
    push rax
    push rax
addr_172:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_173
    jmp addr_13
addr_173:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_174:
    pop rax
    pop rbx
    push rax
    push rbx
addr_175:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_176
    jmp addr_104
addr_176:
    pop rax
addr_177:
    pop rax
addr_178:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_179:
addr_180:
    ; - proc isnum 1 1
addr_181:
    push mem+0
addr_182:
    mov qword rax, 48
    push rax
addr_183:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_184:
    pop rax
addr_185:
    push mem+1
addr_186:
    mov qword rax, 57
    push rax
addr_187:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_188:
    pop rax
addr_189:
    pop rax
    push rax
    push rax
addr_190:
    pop rax
    push rax
    push rax
addr_191:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_192
    jmp addr_13
addr_192:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_193:
    mov qword rax, 1
    push rax
addr_194:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_195:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_196:
    pop rax
    push rax
    push rax
addr_197:
    mov qword rax, 98
    push rax
addr_198:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_199:
    pop rbx
    test rbx, rbx
    jz addr_201
addr_200:
addr_200_0:
    push mem+1
addr_200_1:
    mov qword rax, 49
    push rax
addr_200_2:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_200_3:
    pop rax
addr_200_4:
addr_201:
    pop rax
    push rax
    push rax
addr_202:
    mov qword rax, 104
    push rax
addr_203:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_204:
    pop rbx
    test rbx, rbx
    jz addr_206
addr_205:
addr_205_0:
    push mem+1
addr_205_1:
    mov qword rax, 102
    push rax
addr_205_2:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_205_3:
    pop rax
addr_205_4:
addr_206:
    pop rax
addr_207:
    pop rax
    push rax
    push rax
addr_208:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_209:
    mov qword rax, 45
    push rax
addr_210:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_211:
    pop rbx
    test rbx, rbx
    jz addr_213
addr_212:
addr_212_0:
    mov qword rax, 1
    push rax
addr_212_1:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_212_2:
addr_213:
addr_214:
    pop rax
    push rax
    push rax
addr_215:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_216:
    pop rax
    push rax
    push rax
addr_217:
    push mem+0
addr_218:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_219:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_220:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_221:
    push mem+1
addr_222:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_223:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_224:
    pop rbx
    pop rax
    or rax, rbx
    push rax
addr_225:
    pop rbx
    test rbx, rbx
    jz addr_227
addr_226:
addr_226_0:
    pop rax
addr_226_1:
    pop rax
    push rax
    push rax
addr_226_2:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_226_3:
    mov qword rax, 98
    push rax
addr_226_4:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_226_5:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_226_6:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_226_7:
    mov qword rax, 104
    push rax
addr_226_8:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_226_9:
    pop rbx
    pop rax
    or rax, rbx
    push rax
addr_226_10:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_226_11:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_226_12
    jmp addr_13
addr_226_12:
    mov qword rax, 1
    push rax
addr_226_13:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_226_14:
    pop rbx
    pop rax
    and rax, rbx
    push rax
addr_226_15:
    pop rax
    pop rbx
    push rax
    push rbx
addr_226_16:
    pop rax
addr_226_17:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_226_18:
addr_227:
    pop rax
addr_228:
    mov qword rax, 1
    push rax
addr_229:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_230:
    pop rax
    push rax
    push rax
addr_231:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_232:
    mov qword rax, 0
    push rax
addr_233:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_234:
    pop rbx
    test rbx, rbx
    jz addr_235
    jmp addr_213
addr_235:
    pop rax
addr_236:
    mov qword rax, 1
    push rax
addr_237:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_238:
addr_239:
    ; - proc tonum 1 1
addr_240:
    pop rax
    push rax
    push rax
addr_241:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_242
    jmp addr_181
addr_242:
    pop rax
    xor rax, 1
    push rax
addr_243:
    pop rbx
    test rbx, rbx
    jz addr_245
addr_244:
addr_244_0:
    pop rax
    push rax
    push rax
addr_244_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_244_2
    jmp addr_51
addr_244_2:
    push str_1
addr_244_3:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_244_4
    jmp addr_51
addr_244_4:
    pop rax
addr_244_5:
    mov qword rax, -1
    push rax
addr_244_6:
    mov rax, 60
    pop rdi
    syscall
addr_244_7:
addr_245:
    push mem+2
addr_246:
    mov qword rax, 10
    push rax
addr_247:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_248:
    pop rax
addr_249:
    pop rax
    push rax
    push rax
addr_250:
    pop rax
    push rax
    push rax
addr_251:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_252
    jmp addr_13
addr_252:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_253:
    mov qword rax, 1
    push rax
addr_254:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_255:
    pop rax
    push rax
    push rax
addr_256:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_257:
    mov qword rax, 98
    push rax
addr_258:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_259:
    pop rbx
    test rbx, rbx
    jz addr_261
addr_260:
addr_260_0:
    push mem+2
addr_260_1:
    mov qword rax, 2
    push rax
addr_260_2:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_260_3:
    pop rax
addr_260_4:
addr_261:
    pop rax
    push rax
    push rax
addr_262:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_263:
    mov qword rax, 104
    push rax
addr_264:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_265:
    pop rbx
    test rbx, rbx
    jz addr_267
addr_266:
addr_266_0:
    push mem+2
addr_266_1:
    mov qword rax, 16
    push rax
addr_266_2:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_266_3:
    pop rax
addr_266_4:
addr_267:
    pop rax
addr_268:
    mov qword rax, 0
    push rax
addr_269:
addr_270:
    push mem+2
addr_271:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_272:
    pop rax
    pop rbx
    imul rax, rbx
    push rax
addr_273:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_274:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_275:
    pop rax
    push rax
    push rax
addr_276:
    mov qword rax, 70
    push rax
addr_277:
    mov qword rax, 1
    push rax
addr_278:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_279:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_280:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_281:
    mov qword rax, 65
    push rax
addr_282:
    mov qword rax, 1
    push rax
addr_283:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_284:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_285:
    pop rbx
    pop rax
    and rax, rbx
    push rax
addr_286:
    pop rbx
    test rbx, rbx
    jz addr_288
addr_287:
addr_287_0:
    mov qword rax, 65
    push rax
addr_287_1:
    mov qword rax, 10
    push rax
addr_287_2:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_287_3:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_287_4:
    mov qword rax, 48
    push rax
addr_287_5:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_287_6:
addr_288:
    mov qword rax, 48
    push rax
addr_289:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_290:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_291:
    pop rax
    pop rbx
    push rax
    push rbx
addr_292:
    mov qword rax, 1
    push rax
addr_293:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_294:
    pop rax
    pop rbx
    push rax
    push rbx
addr_295:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_296:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_297:
    pop rax
    push rax
    push rax
addr_298:
    mov qword rax, 0
    push rax
addr_299:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_300:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_301:
    mov qword rax, 98
    push rax
addr_302:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_303:
    pop rbx
    pop rax
    and rax, rbx
    push rax
addr_304:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_305:
    mov qword rax, 104
    push rax
addr_306:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_307:
    pop rbx
    pop rax
    and rax, rbx
    push rax
addr_308:
    pop rax
    pop rbx
    push rax
    push rbx
addr_309:
    pop rax
addr_310:
    pop rbx
    test rbx, rbx
    jz addr_311
    jmp addr_269
addr_311:
    pop rax
    pop rbx
    push rax
    push rbx
addr_312:
    pop rax
addr_313:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_314:
addr_315:
addr_316:
addr_317:
    ; - proc split 3 2
addr_318:
    pop rax
    pop rbx
    push rax
    push rbx
addr_319:
    push mem+3
addr_320:
    pop rax
    pop rbx
    push rax
    push rbx
addr_321:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_322:
    pop rax
addr_323:
    push mem+4
addr_324:
    pop rax
    pop rbx
    push rax
    push rbx
addr_325:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_326:
    pop rax
addr_327:
    push mem+4
addr_328:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_329:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_330
    jmp addr_149
addr_330:
addr_331:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_332:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_333:
    push mem+3
addr_334:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_335:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_336:
    pop rbx
    test rbx, rbx
    jz addr_338
addr_337:
addr_337_0:
    pop rax
addr_337_1:
    mov qword rax, 1
    push rax
addr_337_2:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_337_3:
    push mem+4
addr_337_4:
   pop rax
   xor rbx, rbx
   mov rbx, [rax]
   push rbx
addr_337_5:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_337_6:
addr_338:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_339:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_340:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_341:
    pop rax
    pop rbx
    push rax
    push rbx
addr_342:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_343:
    pop rax
addr_344:
    pop rax
    pop rbx
    push rax
    push rbx
addr_345:
    mov qword rax, 1
    push rax
addr_346:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_347:
    pop rax
    pop rbx
    push rax
    push rbx
addr_348:
    mov qword rax, 1
    push rax
addr_349:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_350:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_351:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_352:
    mov qword rax, 0
    push rax
addr_353:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_354:
    pop rbx
    test rbx, rbx
    jz addr_355
    jmp addr_330
addr_355:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_356:
addr_357:
addr_358:
addr_359:
addr_360:
addr_361:
    ; - proc gettmp 0 1
addr_362:
    push mem+20
addr_363:
    mov qword rax, 30
    push rax
addr_364:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_365:
    push mem+12
addr_366:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_367:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_368:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_369:
addr_370:
    ; - proc inctmpidx 0 0
addr_371:
    push mem+12
addr_372:
    push mem+12
addr_373:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_374:
    mov qword rax, 1
    push rax
addr_375:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_376:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_377:
    pop rax
addr_378:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_379:
addr_380:
    ; - proc cstr 1 1
addr_381:
addr_382:
    mov qword rax, 10
    push rax
addr_383:
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
addr_384:
    mov qword rax, 48
    push rax
addr_385:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_386:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_387
    jmp addr_362
addr_387:
    pop rax
    pop rbx
    push rax
    push rbx
addr_388:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_389:
    pop rax
addr_390:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_391
    jmp addr_371
addr_391:
    pop rax
    push rax
    push rax
addr_392:
    mov qword rax, 0
    push rax
addr_393:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_394:
    pop rbx
    test rbx, rbx
    jz addr_395
    jmp addr_381
addr_395:
    pop rax
addr_396:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_397
    jmp addr_362
addr_397:
    mov qword rax, 1
    push rax
addr_398:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_399:
    push mem+12
addr_400:
    mov qword rax, 0
    push rax
addr_401:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_402:
    pop rax
addr_403:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_404:
addr_405:
    ; - proc cstrhex 1 1
addr_406:
addr_407:
    mov qword rax, 16
    push rax
addr_408:
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
addr_409:
    pop rax
    push rax
    push rax
addr_410:
    mov qword rax, 9
    push rax
addr_411:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_412:
    pop rbx
    test rbx, rbx
    jz addr_414
addr_413:
addr_413_0:
    mov qword rax, 97
    push rax
addr_413_1:
    mov qword rax, 10
    push rax
addr_413_2:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_413_3:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_413_4:
addr_414:
    pop rax
    push rax
    push rax
addr_415:
    mov qword rax, 10
    push rax
addr_416:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_417:
    pop rbx
    test rbx, rbx
    jz addr_419
addr_418:
addr_418_0:
    mov qword rax, 48
    push rax
addr_418_1:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_418_2:
addr_419:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_420
    jmp addr_362
addr_420:
    pop rax
    pop rbx
    push rax
    push rbx
addr_421:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_422:
    pop rax
addr_423:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_424
    jmp addr_371
addr_424:
    pop rax
    push rax
    push rax
addr_425:
    mov qword rax, 0
    push rax
addr_426:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_427:
    pop rbx
    test rbx, rbx
    jz addr_428
    jmp addr_406
addr_428:
    pop rax
addr_429:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_430
    jmp addr_362
addr_430:
    mov qword rax, 36
    push rax
addr_431:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_432:
    pop rax
addr_433:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_434
    jmp addr_371
addr_434:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_435
    jmp addr_362
addr_435:
    mov qword rax, 1
    push rax
addr_436:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_437:
    push mem+12
addr_438:
    mov qword rax, 0
    push rax
addr_439:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_440:
    pop rax
addr_441:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_442:
addr_443:
    ; - proc print 1 0
addr_444:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_445
    jmp addr_381
addr_445:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_446
    jmp addr_33
addr_446:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_447
    jmp addr_43
addr_447:
    push mem+12
addr_448:
    mov qword rax, 0
    push rax
addr_449:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_450:
    pop rax
addr_451:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_452:
addr_453:
    ; - proc printhex 1 0
addr_454:
addr_455:
    mov qword rax, 16
    push rax
addr_456:
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
addr_457:
    pop rax
    push rax
    push rax
addr_458:
    mov qword rax, 9
    push rax
addr_459:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_460:
    pop rbx
    test rbx, rbx
    jz addr_462
addr_461:
addr_461_0:
    mov qword rax, 97
    push rax
addr_461_1:
    mov qword rax, 10
    push rax
addr_461_2:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_461_3:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_461_4:
addr_462:
    pop rax
    push rax
    push rax
addr_463:
    mov qword rax, 10
    push rax
addr_464:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_465:
    pop rbx
    test rbx, rbx
    jz addr_467
addr_466:
addr_466_0:
    mov qword rax, 48
    push rax
addr_466_1:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_466_2:
addr_467:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_468
    jmp addr_362
addr_468:
    pop rax
    pop rbx
    push rax
    push rbx
addr_469:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_470:
    pop rax
addr_471:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_472
    jmp addr_371
addr_472:
    pop rax
    push rax
    push rax
addr_473:
    mov qword rax, 0
    push rax
addr_474:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_475:
    pop rbx
    test rbx, rbx
    jz addr_476
    jmp addr_454
addr_476:
    pop rax
addr_477:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_478
    jmp addr_362
addr_478:
    mov qword rax, 120
    push rax
addr_479:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_480:
    pop rax
addr_481:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_482
    jmp addr_371
addr_482:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_483
    jmp addr_362
addr_483:
    mov qword rax, 48
    push rax
addr_484:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_485:
    pop rax
addr_486:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_487
    jmp addr_371
addr_487:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_488
    jmp addr_362
addr_488:
    mov qword rax, 1
    push rax
addr_489:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_490:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_491
    jmp addr_33
addr_491:
    push mem+12
addr_492:
    mov qword rax, 0
    push rax
addr_493:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_494:
    pop rax
addr_495:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_496
    jmp addr_43
addr_496:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_497:
addr_498:
addr_499:
addr_500:
addr_501:
addr_502:
addr_503:
addr_504:
addr_505:
addr_506:
addr_507:
addr_508:
addr_509:
    ; - proc isentry 1 1
addr_510:
    pop rax
    push rax
    push rax
addr_511:
    pop rax
    push rax
    push rax
addr_512:
    mov qword rax, 0
    push rax
addr_513:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_514:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_515:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_516:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_517:
    mov qword rax, 8
    push rax
addr_518:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_519:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_520:
    mov qword rax, 1
    push rax
addr_521:
    pop rbx
    pop rax
    and rax, rbx
    push rax
addr_522:
    mov qword rax, 0
    push rax
addr_523:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_524:
    pop rbx
    pop rax
    and rax, rbx
    push rax
addr_525:
    pop rax
    pop rbx
    push rax
    push rbx
addr_526:
    pop rax
addr_527:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_528:
addr_529:
addr_530:
addr_531:
addr_532:
    ; - proc copy 3 0
addr_533:
    push mem+52
addr_534:
    pop rax
    pop rbx
    push rax
    push rbx
addr_535:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_536:
    pop rax
addr_537:
addr_538:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_539:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_540:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_541:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_542:
    pop rax
addr_543:
    pop rax
    pop rbx
    push rax
    push rbx
addr_544:
    mov qword rax, 1
    push rax
addr_545:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_546:
    pop rax
    pop rbx
    push rax
    push rbx
addr_547:
    mov qword rax, 1
    push rax
addr_548:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_549:
    push mem+52
addr_550:
    push mem+52
addr_551:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_552:
    mov qword rax, 1
    push rax
addr_553:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_554:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_555:
    pop rax
addr_556:
    push mem+52
addr_557:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_558:
    mov qword rax, 0
    push rax
addr_559:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_560:
    pop rbx
    test rbx, rbx
    jz addr_561
    jmp addr_537
addr_561:
    pop rax
addr_562:
    pop rax
addr_563:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_564:
addr_565:
    ; - proc eq 3 1
addr_566:
    push mem+52
addr_567:
    pop rax
    pop rbx
    push rax
    push rbx
addr_568:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_569:
    pop rax
addr_570:
addr_571:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_572:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_573:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_574:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_575:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_576:
    pop rbx
    test rbx, rbx
    jz addr_578
addr_577:
addr_577_0:
    pop rax
addr_577_1:
    pop rax
addr_577_2:
    mov qword rax, 0
    push rax
addr_577_3:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_577_4:
addr_578:
    push mem+52
addr_579:
    push mem+52
addr_580:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_581:
    mov qword rax, 1
    push rax
addr_582:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_583:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_584:
    pop rax
addr_585:
    push mem+52
addr_586:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_587:
    mov qword rax, 0
    push rax
addr_588:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_589:
    pop rbx
    test rbx, rbx
    jz addr_590
    jmp addr_570
addr_590:
    pop rax
addr_591:
    pop rax
addr_592:
    mov qword rax, 1
    push rax
addr_593:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_594:
addr_595:
    ; - proc zero 2 0
addr_596:
    push mem+52
addr_597:
    pop rax
    pop rbx
    push rax
    push rbx
addr_598:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_599:
    pop rax
addr_600:
addr_601:
    pop rax
    push rax
    push rax
addr_602:
    mov qword rax, 0
    push rax
addr_603:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_604:
    pop rax
addr_605:
    mov qword rax, 1
    push rax
addr_606:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_607:
    push mem+52
addr_608:
    push mem+52
addr_609:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_610:
    mov qword rax, 1
    push rax
addr_611:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_612:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_613:
    pop rax
addr_614:
    push mem+52
addr_615:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_616:
    mov qword rax, 0
    push rax
addr_617:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_618:
    pop rbx
    test rbx, rbx
    jz addr_619
    jmp addr_600
addr_619:
    pop rax
addr_620:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_621:
addr_622:
addr_623:
addr_624:
addr_625:
addr_626:
addr_627:
addr_628:
addr_629:
addr_630:
addr_631:
    ; - proc allocpage 0 0
addr_632:
    push mem+68
addr_633:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_634:
    mov qword rax, 64000
    push rax
addr_635:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_636:
    pop rax
    push rax
    push rax
addr_637:
    push mem+68
addr_638:
    pop rax
    pop rbx
    push rax
    push rbx
addr_639:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_640:
    pop rax
addr_641:
    mov qword rax, 12
    push rax
addr_642:
    pop rax
    pop rdi
    syscall
    push rax
addr_643:
    mov qword rax, 0
    push rax
addr_644:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_645:
    pop rbx
    test rbx, rbx
    jz addr_647
addr_646:
addr_646_0:
    push str_2
addr_646_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_646_2
    jmp addr_51
addr_646_2:
addr_647:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_648:
addr_649:
    ; - proc init 0 0
addr_650:
    push mem+92
addr_651:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_652:
    pop rbx
    test rbx, rbx
    jz addr_654
addr_653:
addr_653_0:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_653_1:
addr_654:
    push mem+92
addr_655:
    mov qword rax, 1
    push rax
addr_656:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_657:
    pop rax
addr_658:
    push mem+60
addr_659:
    mov qword rax, 0
    push rax
addr_660:
    mov qword rax, 12
    push rax
addr_661:
    pop rax
    pop rdi
    syscall
    push rax
addr_662:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_663:
    pop rax
addr_664:
    push mem+68
addr_665:
    push mem+60
addr_666:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_667:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_668:
    pop rax
addr_669:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_670
    jmp addr_632
addr_670:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_671:
addr_672:
    ; - proc map 0 0
addr_673:
    push mem+84
addr_674:
    mov qword rax, 0
    push rax
addr_675:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_676:
    pop rax
addr_677:
    push str_3
addr_678:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_679
    jmp addr_51
addr_679:
    push str_4
addr_680:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_681
    jmp addr_51
addr_681:
    push str_5
addr_682:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_683
    jmp addr_33
addr_683:
    push mem+68
addr_684:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_685:
    push mem+60
addr_686:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_687:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_688:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_689
    jmp addr_444
addr_689:
    push mem+60
addr_690:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_691:
    mov qword rax, 64
    push rax
addr_692:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_693:
addr_694:
    mov qword rax, 64
    push rax
addr_695:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_696:
    pop rax
    push rax
    push rax
addr_697:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_698
    jmp addr_510
addr_698:
    pop rbx
    test rbx, rbx
    jz addr_700
addr_699:
addr_699_0:
    push str_6
addr_699_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_699_2
    jmp addr_51
addr_699_2:
    push str_7
addr_699_3:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_699_4
    jmp addr_33
addr_699_4:
    pop rax
    push rax
    push rax
addr_699_5:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_699_6
    jmp addr_454
addr_699_6:
    push str_8
addr_699_7:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_699_8
    jmp addr_33
addr_699_8:
    pop rax
    push rax
    push rax
addr_699_9:
    mov qword rax, 9
    push rax
addr_699_10:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_699_11:
   pop rax
   xor rbx, rbx
   mov rbx, [rax]
   push rbx
addr_699_12:
    pop rax
    push rax
    push rax
addr_699_13:
    push mem+84
addr_699_14:
   pop rax
   xor rbx, rbx
   mov rbx, [rax]
   push rbx
addr_699_15:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_699_16:
    push mem+84
addr_699_17:
    pop rax
    pop rbx
    push rax
    push rbx
addr_699_18:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_699_19:
    pop rax
addr_699_20:
    pop rax
    push rax
    push rax
addr_699_21:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_699_22
    jmp addr_444
addr_699_22:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_699_23:
    mov qword rax, 64
    push rax
addr_699_24:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_699_25:
addr_700:
    pop rax
    push rax
    push rax
addr_701:
    push mem+68
addr_702:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_703:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_704:
    pop rbx
    test rbx, rbx
    jz addr_705
    jmp addr_693
addr_705:
    pop rax
addr_706:
    push str_9
addr_707:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_708
    jmp addr_33
addr_708:
    push mem+84
addr_709:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_710:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_711
    jmp addr_444
addr_711:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_712
    jmp addr_43
addr_712:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_713:
addr_714:
    ; - proc alloc 1 1
addr_715:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_716
    jmp addr_650
addr_716:
    mov qword rax, 17
    push rax
addr_717:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_718:
    pop rax
    push rax
    push rax
addr_719:
    mov qword rax, 64
    push rax
addr_720:
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
addr_721:
    pop rax
    pop rbx
    push rax
    push rbx
addr_722:
    pop rax
addr_723:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_724:
    mov qword rax, 64
    push rax
addr_725:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_726:
    push mem+76
addr_727:
    pop rax
    pop rbx
    push rax
    push rbx
addr_728:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_729:
    pop rax
addr_730:
    mov qword rax, 0
    push rax
addr_731:
    push mem+60
addr_732:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_733:
    pop rax
    pop rbx
    push rax
    push rbx
addr_734:
    mov qword rax, 64
    push rax
addr_735:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_736:
    pop rax
    pop rbx
    push rax
    push rbx
addr_737:
    mov qword rax, 64
    push rax
addr_738:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_739:
addr_740:
    pop rax
    pop rbx
    push rax
    push rbx
addr_741:
    mov qword rax, 64
    push rax
addr_742:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_743:
    pop rax
    pop rbx
    push rax
    push rbx
addr_744:
    mov qword rax, 64
    push rax
addr_745:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_746:
    pop rax
    push rax
    push rax
addr_747:
    push mem+68
addr_748:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_749:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_750:
    pop rax
    xor rax, 1
    push rax
addr_751:
    pop rbx
    test rbx, rbx
    jz addr_753
addr_752:
addr_752_0:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_752_1
    jmp addr_632
addr_752_1:
addr_753:
    pop rax
    push rax
    push rax
addr_754:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_755
    jmp addr_510
addr_755:
    pop rbx
    test rbx, rbx
    jz addr_757
addr_756:
addr_756_0:
    pop rax
    push rax
    push rax
addr_756_1:
    mov qword rax, 9
    push rax
addr_756_2:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_756_3:
   pop rax
   xor rbx, rbx
   mov rbx, [rax]
   push rbx
addr_756_4:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_756_5:
    pop rax
    pop rbx
    push rax
    push rbx
addr_756_6:
    pop rax
addr_756_7:
    mov qword rax, 0
    push rax
addr_756_8:
    mov qword rax, 64
    push rax
addr_756_9:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_756_10:
    pop rax
    pop rbx
    push rax
    push rbx
addr_756_11:
    mov qword rax, 64
    push rax
addr_756_12:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_756_13:
addr_757:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_758:
    push mem+76
addr_759:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_760:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_761:
    pop rbx
    test rbx, rbx
    jz addr_762
    jmp addr_739
addr_762:
    pop rax
    pop rbx
    push rax
    push rbx
addr_763:
    pop rax
addr_764:
    push mem+76
addr_765:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_766:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_767:
    pop rax
    push rax
    push rax
addr_768:
    mov qword rax, 9
    push rax
addr_769:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_770:
    push mem+76
addr_771:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_772:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_773:
    pop rax
addr_774:
    pop rax
    push rax
    push rax
addr_775:
    pop rax
    push rax
    push rax
addr_776:
    mov qword rax, 0
    push rax
addr_777:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_778:
    pop rax
    pop rbx
    push rax
    push rbx
addr_779:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_780:
    pop rax
addr_781:
    pop rax
    push rax
    push rax
addr_782:
    mov qword rax, 8
    push rax
addr_783:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_784:
    mov qword rax, 1
    push rax
addr_785:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_786:
    pop rax
addr_787:
    mov qword rax, 17
    push rax
addr_788:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_789:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_790:
addr_791:
    ; - proc zalloc 1 1
addr_792:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_793
    jmp addr_650
addr_793:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_794
    jmp addr_715
addr_794:
    pop rax
    push rax
    push rax
addr_795:
    pop rax
    push rax
    push rax
addr_796:
    mov qword rax, 17
    push rax
addr_797:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_798:
    mov qword rax, 9
    push rax
addr_799:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_800:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_801:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_802
    jmp addr_596
addr_802:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_803:
addr_804:
    ; - proc free 1 0
addr_805:
    mov qword rax, 17
    push rax
addr_806:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_807:
    pop rax
    push rax
    push rax
addr_808:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_809
    jmp addr_510
addr_809:
    pop rax
    xor rax, 1
    push rax
addr_810:
    pop rbx
    test rbx, rbx
    jz addr_812
addr_811:
addr_811_0:
    push str_10
addr_811_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_811_2
    jmp addr_51
addr_811_2:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_811_3
    jmp addr_454
addr_811_3:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_811_4:
addr_812:
    mov qword rax, 8
    push rax
addr_813:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_814:
    mov qword rax, 0
    push rax
addr_815:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_816:
    pop rax
addr_817:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_818:
addr_819:
    ; - proc tryfree 1 0
addr_820:
    mov qword rax, 17
    push rax
addr_821:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_822:
    pop rax
    push rax
    push rax
addr_823:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_824
    jmp addr_510
addr_824:
    pop rax
    xor rax, 1
    push rax
addr_825:
    pop rbx
    test rbx, rbx
    jz addr_827
addr_826:
addr_826_0:
    pop rax
addr_826_1:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_826_2:
addr_827:
    mov qword rax, 8
    push rax
addr_828:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_829:
    mov qword rax, 0
    push rax
addr_830:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_831:
    pop rax
addr_832:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_833:
addr_834:
    ; - proc realloc 2 1
addr_835:
    mov qword rax, 17
    push rax
addr_836:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_837:
    pop rax
    push rax
    push rax
addr_838:
    mov qword rax, 64
    push rax
addr_839:
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
addr_840:
    pop rax
    pop rbx
    push rax
    push rbx
addr_841:
    pop rax
addr_842:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_843:
    mov qword rax, 64
    push rax
addr_844:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_845:
    push mem+76
addr_846:
    pop rax
    pop rbx
    push rax
    push rbx
addr_847:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_848:
    pop rax
addr_849:
    mov qword rax, 17
    push rax
addr_850:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_851:
    pop rax
    push rax
    push rax
addr_852:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_853
    jmp addr_510
addr_853:
    pop rax
    xor rax, 1
    push rax
addr_854:
    pop rbx
    test rbx, rbx
    jz addr_856
addr_855:
addr_855_0:
    push str_11
addr_855_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_855_2
    jmp addr_51
addr_855_2:
addr_856:
    push mem+76
addr_857:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_858:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_859:
    mov qword rax, 9
    push rax
addr_860:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_861:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_862:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_863:
    pop rbx
    test rbx, rbx
    jz addr_865
addr_864:
addr_864_0:
    mov qword rax, 17
    push rax
addr_864_1:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_864_2:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_864_3:
addr_865:
    pop rax
    push rax
    push rax
addr_866:
    pop rax
    push rax
    push rax
addr_867:
    mov qword rax, 9
    push rax
addr_868:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_869:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_870:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_871:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_872:
    mov qword rax, 9
    push rax
addr_873:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_874:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_875:
    mov qword rax, 64
    push rax
addr_876:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_877:
    pop rax
    pop rbx
    push rax
    push rbx
addr_878:
    mov qword rax, 64
    push rax
addr_879:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_880:
addr_881:
    pop rax
    pop rbx
    push rax
    push rbx
addr_882:
    mov qword rax, 64
    push rax
addr_883:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_884:
    pop rax
    pop rbx
    push rax
    push rbx
addr_885:
    mov qword rax, 64
    push rax
addr_886:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_887:
    pop rax
    push rax
    push rax
addr_888:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_889
    jmp addr_510
addr_889:
    pop rbx
    test rbx, rbx
    jz addr_891
addr_890:
addr_890_0:
    pop rax
addr_890_1:
    pop rax
addr_890_2:
    pop rax
    push rax
    push rax
addr_890_3:
    mov qword rax, 17
    push rax
addr_890_4:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_890_5:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_890_6
    jmp addr_805
addr_890_6:
    push mem+76
addr_890_7:
   pop rax
   xor rbx, rbx
   mov rbx, [rax]
   push rbx
addr_890_8:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_890_9
    jmp addr_715
addr_890_9:
    pop rax
    pop rbx
    push rax
    push rbx
addr_890_10:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_890_11:
    mov qword rax, 17
    push rax
addr_890_12:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_890_13:
    pop rax
    push rax
    push rax
addr_890_14:
    mov qword rax, 9
    push rax
addr_890_15:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_890_16:
   pop rax
   xor rbx, rbx
   mov rbx, [rax]
   push rbx
addr_890_17:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_890_18
    jmp addr_533
addr_890_18:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_890_19:
addr_891:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_892:
    push mem+76
addr_893:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_894:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_895:
    pop rax
    xor rax, 1
    push rax
addr_896:
    pop rbx
    test rbx, rbx
    jz addr_897
    jmp addr_880
addr_897:
    pop rax
addr_898:
    pop rax
addr_899:
    pop rax
    push rax
    push rax
addr_900:
    mov qword rax, 9
    push rax
addr_901:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_902:
    push mem+76
addr_903:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_904:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_905:
    pop rax
addr_906:
    pop rax
    push rax
    push rax
addr_907:
    pop rax
    push rax
    push rax
addr_908:
    mov qword rax, 0
    push rax
addr_909:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_910:
    pop rax
    pop rbx
    push rax
    push rbx
addr_911:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_912:
    pop rax
addr_913:
    pop rax
    push rax
    push rax
addr_914:
    mov qword rax, 8
    push rax
addr_915:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_916:
    mov qword rax, 1
    push rax
addr_917:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_918:
    pop rax
addr_919:
    mov qword rax, 17
    push rax
addr_920:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_921:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_922:
addr_923:
addr_924:
addr_925:
addr_926:
addr_927:
addr_928:
addr_929:
addr_930:
addr_931:
addr_932:
addr_933:
addr_934:
    ; - proc level 2 0
addr_935:
    push mem+101
addr_936:
    mov qword rax, 0
    push rax
addr_937:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_938:
    pop rax
    pop rbx
    push rax
    push rbx
addr_939:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_940:
    pop rax
addr_941:
    push mem+101
addr_942:
    mov qword rax, 8
    push rax
addr_943:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_944:
    pop rax
    pop rbx
    push rax
    push rbx
addr_945:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_946:
    pop rax
addr_947:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_948:
addr_949:
    ; - proc msg 2 0
addr_950:
    push mem+101
addr_951:
    mov qword rax, 13
    push rax
addr_952:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_953:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_954
    jmp addr_149
addr_954:
    pop rax
    pop rbx
    push rax
    push rbx
addr_955:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_956
    jmp addr_240
addr_956:
    pop rax
addr_957:
    pop rax
addr_958:
    push mem+101
addr_959:
    mov qword rax, 9
    push rax
addr_960:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_961:
    pop rax
    pop rbx
    push rax
    push rbx
addr_962:
    mov qword rax, 3
    push rax
addr_963:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_964
    jmp addr_533
addr_964:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_965:
addr_966:
    ; - proc cat 1 0
addr_967:
    push mem+101
addr_968:
    mov qword rax, 13
    push rax
addr_969:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_970:
    pop rax
    pop rbx
    push rax
    push rbx
addr_971:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_972
    jmp addr_170
addr_972:
    pop rax
addr_973:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_974:
addr_975:
    ; - proc log 0 0
addr_976:
    push mem+101
addr_977:
    mov qword rax, 8
    push rax
addr_978:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_979:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_980:
    pop rbx
    test rbx, rbx
    jz addr_982
addr_981:
addr_981_0:
    push str_12
addr_981_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_981_2
    jmp addr_33
addr_981_2:
    push str_13
addr_981_3:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_981_4
    jmp addr_33
addr_981_4:
    push mem+101
addr_981_5:
    mov qword rax, 9
    push rax
addr_981_6:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_981_7:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_981_8
    jmp addr_33
addr_981_8:
    push str_14
addr_981_9:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_981_10
    jmp addr_33
addr_981_10:
    push mem+101
addr_981_11:
    mov qword rax, 13
    push rax
addr_981_12:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_981_13:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_981_14
    jmp addr_33
addr_981_14:
    push str_15
addr_981_15:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_981_16
    jmp addr_51
addr_981_16:
    mov qword rax, 0
    push rax
addr_981_17:
    mov qword rax, 0
    push rax
addr_981_18:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_981_19:
    mov rax, 60
    pop rdi
    syscall
addr_981_20:
addr_982:
    push str_16
addr_983:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_984
    jmp addr_33
addr_984:
    push mem+101
addr_985:
    mov qword rax, 9
    push rax
addr_986:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_987:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_988
    jmp addr_33
addr_988:
    push str_17
addr_989:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_990
    jmp addr_33
addr_990:
    push mem+101
addr_991:
    mov qword rax, 13
    push rax
addr_992:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_993:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_994
    jmp addr_51
addr_994:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_995:
addr_996:
addr_997:
addr_998:
    ; - enum
addr_999:
addr_1000:
addr_1001:
    ; - enum
addr_1002:
addr_1003:
addr_1004:
addr_1005:
addr_1006:
addr_1007:
addr_1008:
addr_1009:
addr_1010:
addr_1011:
addr_1012:
    ; - proc fork 0 1
addr_1013:
    mov qword rax, 57
    push rax
addr_1014:
    pop rax
    syscall
    push rax
addr_1015:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_1016:
addr_1017:
    ; - proc deverr 0 0
addr_1018:
    push str_18
addr_1019:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1020
    jmp addr_51
addr_1020:
    mov qword rax, -1
    push rax
addr_1021:
    mov rax, 60
    pop rdi
    syscall
addr_1022:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_1023:
addr_1024:
    ; - proc execcmd 1 0
addr_1025:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1026
    jmp addr_1013
addr_1026:
    pop rax
    push rax
    push rax
addr_1027:
    mov qword rax, 0
    push rax
addr_1028:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_1029:
    pop rbx
    test rbx, rbx
    jz addr_1031
addr_1030:
addr_1030_0:
    mov qword rax, 1
    push rax
addr_1030_1:
    mov qword rax, 0
    push rax
addr_1030_2:
    mov qword rax, 0
    push rax
addr_1030_3:
    push str_19
addr_1030_4:
    mov qword rax, -100
    push rax
addr_1030_5:
    mov qword rax, 257
    push rax
addr_1030_6:
    pop rax
    pop rdi
    pop rsi
    pop rdx
    pop r10
    syscall
    push rax
addr_1030_7:
    pop rax
    push rax
    push rax
addr_1030_8:
    mov qword rax, 0
    push rax
addr_1030_9:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_1030_10:
    pop rbx
    test rbx, rbx
    jz addr_1030_12
addr_1030_11:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1030_12
    jmp addr_1018
addr_1030_12:
    mov qword rax, 33
    push rax
addr_1030_13:
    pop rax
    pop rdi
    pop rsi
    syscall
    push rax
addr_1030_14:
    mov qword rax, 0
    push rax
addr_1030_15:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_1030_16:
    pop rbx
    test rbx, rbx
    jz addr_1030_18
addr_1030_17:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1030_18
    jmp addr_1018
addr_1030_18:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_1030_19:
    mov rax, [args_ptr]
    mov rax, [rax]
    add rax, 2
    shl rax, 3
    mov rbx, [args_ptr]
    add rbx, rax
    push rbx
addr_1030_20:
    pop rax
    pop rbx
    push rax
    push rbx
addr_1030_21:
    pop rax
    push rax
    push rax
addr_1030_22:
   pop rax
   xor rbx, rbx
   mov rbx, [rax]
   push rbx
addr_1030_23:
    mov qword rax, 59
    push rax
addr_1030_24:
    pop rax
    pop rdi
    pop rsi
    pop rdx
    syscall
    push rax
addr_1030_25:
    pop rax
addr_1030_26:
    pop rax
addr_1030_27:
    pop rax
addr_1030_28:
    mov qword rax, -1
    push rax
addr_1030_29:
    mov rax, 60
    pop rdi
    syscall
addr_1030_30:
addr_1031:
    pop rax
    push rax
    push rax
addr_1032:
    mov qword rax, 0
    push rax
addr_1033:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_1034:
    pop rbx
    test rbx, rbx
    jz addr_1036
addr_1035:
addr_1035_0:
    mov qword rax, 0
    push rax
addr_1035_1:
    mov qword rax, 0
    push rax
addr_1035_2:
    push mem+229
addr_1035_3:
    mov qword rax, -1
    push rax
addr_1035_4:
    mov qword rax, 0
    push rax
addr_1035_5:
    pop rax
    pop rdi
    pop rsi
    pop rdx
    pop r10
    syscall
    push rax
addr_1035_6:
    mov qword rax, 0
    push rax
addr_1035_7:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_1035_8:
    pop rbx
    test rbx, rbx
    jz addr_1035_10
addr_1035_9:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1035_10
    jmp addr_1018
addr_1035_10:
    pop rax
addr_1035_11:
    pop rax
addr_1035_12:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_1035_13:
addr_1036:
    mov qword rax, 0
    push rax
addr_1037:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_1038:
    pop rbx
    test rbx, rbx
    jz addr_1040
addr_1039:
addr_1039_0:
    push str_20
addr_1039_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1039_2
    jmp addr_51
addr_1039_2:
addr_1040:
    pop rax
addr_1041:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_1042:
addr_1043:
    ; - proc execcmdecho 1 0
addr_1044:
    mov qword rax, 0
    push rax
addr_1045:
    mov qword rax, 1
    push rax
addr_1046:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1047
    jmp addr_976
addr_1047:
    push str_21
addr_1048:
    push str_22
addr_1049:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1050
    jmp addr_950
addr_1050:
    pop rax
    push rax
    push rax
addr_1051:
addr_1052:
    pop rax
    push rax
    push rax
addr_1053:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_1054:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1055
    jmp addr_967
addr_1055:
    push addr_362
addr_1056:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_1057:
    pop rax
    push rax
    push rax
addr_1058:
    pop rbx
    test rbx, rbx
    jz addr_1060
addr_1059:
addr_1059_0:
    push str_23
addr_1059_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1059_2
    jmp addr_967
addr_1059_2:
addr_1060:
    pop rax
    push rax
    push rax
addr_1061:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_1062:
    mov qword rax, 0
    push rax
addr_1063:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_1064:
    pop rbx
    test rbx, rbx
    jz addr_1065
    jmp addr_1051
addr_1065:
    pop rax
addr_1066:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1067
    jmp addr_976
addr_1067:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1068
    jmp addr_1025
addr_1068:

ax, rbx
    cmovne rcx, rdx
    push rcx
addr_1064:
    pop rbx
    test rbx, rbx
    jz addr_1065
    jmp addr_1051
addr_1065:
    pop rax
addr_1066:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1067
    jmp addr_63963136
addr_1067:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_1068
    jmp addr_67174401
addr_1068:
