inc "stdlib.slm"
inc "stdlib/log.slm"
inc "stdlib/string.slm"
inc "compiler/token.slm"

{
This is a enum of all the operations
and identifiers in slam
}
enum
0   SNK_NULL
    SNK_FILE
    SNK_INC
    SNK_BLOCK
    SNK_INTR
    SNK_CALL
    SNK_CONST
    SNK_VAR
    SNK_DEF
    SNK_PROP
    SNK_COMMENT
end

enum
0   BNK_BRACKET
    BNK_CLASS
    BNK_PROC
    BNK_ENUM
    BNK_DO
end

enum
0   INK_RETURN
    INK_COPY
    INK_DISC
end

enum
0   CNK_NUMBER
    CNK_STRING
    CNK_WORD
end


class nodedata
  prop kind int.SIZE

  var tmp int.SIZE
  var printnode int.SIZE
end

class calldata of nodedata
  prop kind int.SIZE
  prop callee int.SIZE

  proc new 1 1
    nodedata.tmp
    int.SIZE 2 *
    (heap.alloc)
    put disc

    nodedata.tmp read calldata.kind . SNK_CALL put disc
    nodedata.tmp read calldata.callee . swap put disc

    nodedata.tmp read

    ret
  end

  proc print 1 0
    """ (cstr.print)
    calldata.callee . read (str.print)
    """ (cstr.print)
    ret
  end
end

class incdata of nodedata
  prop kind int.SIZE
  prop include int.SIZE

  proc new 1 1
    nodedata.tmp
    int.SIZE 2 *
    (heap.alloc)
    put disc

    nodedata.tmp read incdata.kind . SNK_INC put disc
    nodedata.tmp read incdata.include . swap put disc

    nodedata.tmp read

    ret
  end

  proc print 1 0
    """ (cstr.print)
    incdata.include . read (str.print)
    """ (cstr.print)
    ret
  end
end

class commentdata of nodedata
  prop kind int.SIZE

  proc new 0 1
    nodedata.tmp
    int.SIZE 1 *
    (heap.alloc)
    put disc

    nodedata.tmp read commentdata.kind . SNK_COMMENT put disc

    nodedata.tmp read

    ret
  end
end

class intrdata of nodedata
  prop kind int.SIZE
  prop intrkind int.SIZE

  proc new 1 1
    nodedata.tmp
    int.SIZE 2 *
    (heap.alloc)
    put disc

    nodedata.tmp read intrdata.kind . SNK_INTR put disc
    nodedata.tmp read intrdata.intrkind . swap put disc

    nodedata.tmp read

    ret
  end

  proc print 1 0
    copy NULL == if [ disc ret ]
    nodedata.tmp swap put disc

    nodedata.tmp read intrdata.intrkind . read
    ""
    covr INK_RETURN == if [ disc "ret" ]
    covr INK_COPY == if [ disc "copy" ]
    covr INK_DISC == if [ disc "disc" ]
    swap disc

    (cstr.print)

    ret
  end
end

class vardata of nodedata
  prop kind int.SIZE
  prop varname int.SIZE
  prop varkind int.SIZE
  prop varvalue int.SIZE

  proc new 3 1
    nodedata.tmp
    int.SIZE 4 *
    (heap.alloc)
    put disc

    nodedata.tmp read vardata.kind . SNK_VAR put disc
    nodedata.tmp read vardata.varvalue . swap put disc
    nodedata.tmp read vardata.varkind . swap put disc
    nodedata.tmp read vardata.varname . swap put disc

    nodedata.tmp read

    ret
  end

  proc print 1 0
    copy NULL == if [ disc ret ]
    nodedata.tmp swap put disc

    nodedata.tmp read vardata.varkind . read
    ""
    covr CNK_NUMBER == if [ disc "NUMBER: " ]
    covr CNK_WORD == if [ disc "WORD: "" ]
    swap disc

    (cstr.print)

    nodedata.tmp read vardata.varkind . read
    nodedata.tmp read vardata.varvalue . read
    covr CNK_NUMBER == if [ (str.print) disc ret ]
    covr CNK_WORD == if [ (str.print) disc """ (cstr.print) ret ]
    disc disc

    ret
  end
end

class defdata of nodedata
  prop kind int.SIZE
  prop defname int.SIZE
  prop defkind int.SIZE
  prop defvalue int.SIZE

  proc new 3 1
    nodedata.tmp
    int.SIZE 4 *
    (heap.alloc)
    put disc

    nodedata.tmp read defdata.kind . SNK_DEF put disc
    nodedata.tmp read defdata.defvalue . swap put disc
    nodedata.tmp read defdata.defkind . swap put disc
    nodedata.tmp read defdata.defname . swap put disc

    nodedata.tmp read
    ret
  end

  proc print 1 0
    copy NULL == if [ disc ret ]
    nodedata.tmp swap put disc

    nodedata.tmp read defdata.defkind . read
    ""
    covr CNK_NUMBER == if [ disc "NUMBER: " ]
    covr CNK_WORD == if [ disc "WORD: "" ]
    swap disc

    (cstr.print)

    nodedata.tmp read defdata.defkind . read
    nodedata.tmp read defdata.defvalue . read
    covr CNK_NUMBER == if [ (str.print) disc ret ]
    covr CNK_WORD == if [ (str.print) disc """ (cstr.print) ret ]
    disc disc

    ret
  end
end


class propdata of nodedata
  prop kind int.SIZE
  prop propname int.SIZE
  prop propkind int.SIZE
  prop propvalue int.SIZE

  proc new 3 1
    nodedata.tmp
    int.SIZE 4 *
    (heap.alloc)
    put disc

    nodedata.tmp read propdata.kind . SNK_PROP put disc
    nodedata.tmp read propdata.propvalue . swap put disc
    nodedata.tmp read propdata.propkind . swap put disc
    nodedata.tmp read propdata.propname . swap put disc

    nodedata.tmp read

    ret
  end

  proc print 1 0
    copy NULL == if [ disc ret ]
    nodedata.tmp swap put disc

    nodedata.tmp read propdata.propkind . read
    ""
    covr CNK_NUMBER == if [ disc "NUMBER: " ]
    covr CNK_WORD == if [ disc "WORD: "" ]
    swap disc

    (cstr.print)

    nodedata.tmp read propdata.propkind . read
    nodedata.tmp read propdata.propvalue . read
    covr CNK_NUMBER == if [ (str.print) disc ret ]
    covr CNK_WORD == if [ (str.print) disc """ (cstr.print) ret ]
    disc disc

    ret
  end
end

class constdata of nodedata
  prop kind int.SIZE
  prop constkind int.SIZE
  prop constvalue int.SIZE

  proc new 2 1
    nodedata.tmp
    int.SIZE 3 *
    (heap.alloc)
    put disc

    nodedata.tmp read constdata.kind . SNK_CONST put disc
    nodedata.tmp read constdata.constvalue . swap put disc
    nodedata.tmp read constdata.constkind . swap put disc

    nodedata.tmp read

    ret
  end

  proc print 1 0
    copy NULL == if [ disc ret ]
    nodedata.tmp swap put disc

    nodedata.tmp read constdata.constkind . read
    ""
    covr CNK_NUMBER == if [ disc "NUMBER: " ]
    covr CNK_STRING == if [ disc "STRING: "" ]
    covr CNK_WORD == if [ disc "WORD: "" ]
    swap disc

    (cstr.print)

    nodedata.tmp read constdata.constkind . read
    nodedata.tmp read constdata.constvalue . read
    covr CNK_NUMBER == if [ (int.cstr) (cstr.print) disc ret ]
    covr CNK_STRING == if [ (str.print) disc """ (cstr.print) ret ]
    covr CNK_WORD == if [ (str.print) disc """ (cstr.print) ret ]
    disc disc

    ret
  end
end

class filedata of nodedata
  prop kind int.SIZE
  prop name int.SIZE

  {child array}
  prop childcount int.SIZE
  prop children 0

  proc new 1 1
    nodedata.tmp
    int.SIZE 3 *
    (heap.alloc)
    put disc

    nodedata.tmp read filedata.kind . SNK_FILE put disc
    nodedata.tmp read filedata.childcount . 0 put disc
    nodedata.tmp read filedata.name . swap put disc

    nodedata.tmp read

    ret
  end

  proc append 2 1
    swap nodedata.tmp swap put disc

    int.SIZE 6 *
    nodedata.tmp read filedata.childcount . read int.SIZE * +
    nodedata.tmp read swap (heap.realloc)
    nodedata.tmp swap put disc
    
    nodedata.tmp read filedata.childcount . read int.SIZE *
    nodedata.tmp read filedata.children . + swap put disc

    nodedata.tmp read filedata.childcount .
    copy read 1 +
    put disc
    nodedata.tmp read

    ret
  end

  proc print 2 0
    copy NULL == if [ disc disc ret ]

    nodedata.tmp swap put disc
    nodedata.printnode swap put disc

    """ (cstr.print)
    nodedata.tmp read
    filedata.name . read
    (cstr.print)
    ""\ " (cstr.print)

    nodedata.tmp read
    filedata.childcount . read
    0 == if [ ret ]

    0
    do
      nodedata.tmp read

      covr 8 * nodedata.tmp read filedata.children . + read
      nodedata.printnode read ()
      asm "push 0" disc

      nodedata.tmp swap put disc

      1 +
      nodedata.tmp read filedata.childcount . read covr >
    end
    disc

    ret
  end
end

class blockdata of nodedata
  prop kind int.SIZE
  prop blockkind int.SIZE

  {child array}
  prop childcount int.SIZE
  prop children 0

  proc new 1 1
    nodedata.tmp
    int.SIZE 3 *
    (heap.alloc)
    put disc

    nodedata.tmp read blockdata.kind . SNK_BLOCK put disc
    nodedata.tmp read blockdata.childcount . 0 put disc
    nodedata.tmp read blockdata.blockkind . swap put disc

    nodedata.tmp read

    ret
  end

  proc append 2 1
    swap nodedata.tmp swap put disc

    int.SIZE 4 *
    nodedata.tmp read blockdata.childcount . read int.SIZE * +
    nodedata.tmp read swap (heap.realloc)
    nodedata.tmp swap put disc
    
    nodedata.tmp read blockdata.childcount . read int.SIZE *
    nodedata.tmp read blockdata.children . + swap put disc

    nodedata.tmp read blockdata.childcount .
    copy read 1 +
    put disc
    nodedata.tmp read

    ret
  end

  proc print 2 0
    copy NULL == if [ disc disc ret ]

    nodedata.tmp swap put disc
    nodedata.printnode swap put disc

    nodedata.tmp read blockdata.blockkind . read
    ""
    covr BNK_CLASS == if [ disc "class" ]
    covr BNK_PROC == if [ disc "proc" ]
    covr BNK_ENUM == if [ disc "enum" ]
    covr BNK_BRACKET == if [ disc "block" ]
    covr BNK_DO == if [ disc "do" ]
    swap disc

    (cstr.print)
    " " (cstr.print)

    nodedata.tmp read
    blockdata.childcount . read
    0 == if [ ret ]

    0
    do
      nodedata.tmp read
      
      covr 8 * nodedata.tmp read blockdata.children . + read
      nodedata.printnode read ()
      asm "push 0" disc

      nodedata.tmp swap put disc

      1 +
      nodedata.tmp read blockdata.childcount . read covr >
    end
    disc

    ret
  end
end

{
stores a token for slam
}
class slmnode
  {pointer nodedata}
  prop data int.SIZE

  prop start filepos.SIZE
  prop stop filepos.SIZE

  var tmp int.SIZE

  proc print 1 0
    copy NULL == if [
      "ERR" "Could not convert NULL to string " (log.msg)
      (log.log)
      1 quit
    ]

    slmnode.tmp swap put disc
    
    slmnode.tmp read
    slmnode.data . read nodedata.kind . read
    copy SNK_NULL == if [
      "<NULL>" (cstr.print)

      disc ret
    ]
    copy SNK_FILE == if [
      "<FILE: " (cstr.print)
      slmnode.tmp read
      slmnode.data . read 
      slmnode.print swap
      (filedata.print)

      ">" (cstr.println)
      disc ret
    ]
    copy SNK_BLOCK == if [
      "<BLOCK: " (cstr.print)
      slmnode.tmp read
      slmnode.data . read 
      slmnode.print swap
      (blockdata.print)

      ">" (cstr.print)
      disc ret
    ]
    copy SNK_INC == if [
      "<INC: " (cstr.print)
      slmnode.tmp read
      slmnode.data . read
      (incdata.print)

      ">" (cstr.print)
      disc ret
    ]
    copy SNK_CALL == if [
      "<CALL: " (cstr.print)
      slmnode.tmp read
      slmnode.data . read
      (calldata.print)

      ">" (cstr.print)
      disc ret
    ]
    copy SNK_INTR == if [
      "<INTR: " (cstr.print)
      slmnode.tmp read
      slmnode.data . read
      (intrdata.print)

      ">" (cstr.print)
      disc ret
    ]
    copy SNK_CONST == if [
      "<CONST: " (cstr.print)
      slmnode.tmp read
      slmnode.data . read
      (constdata.print)

      ">" (cstr.print)
      disc ret
    ]
    copy SNK_VAR == if [
      "<VAR: " (cstr.print)
      slmnode.tmp read
      slmnode.data . read
      (vardata.print)

      ">" (cstr.print)
      disc ret
    ]
    copy SNK_DEF == if [
      "<DEF: " (cstr.print)
      slmnode.tmp read
      slmnode.data . read
      (defdata.print)

      ">" (cstr.print)
      disc ret
    ]
    copy SNK_PROP == if [
      "<PROP: " (cstr.print)
      slmnode.tmp read
      slmnode.data . read
      (propdata.print)

      ">" (cstr.print)
      disc ret
    ]
    copy SNK_COMMENT == if [
      "<COMMENT>" (cstr.print)
      disc ret
    ]
    "ERR" "Could not convert node " (log.msg)
    copy (int.cstr) (log.cat)
    " to string" (log.cat)
    (log.log)
    1 quit
  end

  var result int.SIZE

  proc new 3 1
    int.SIZE 1 *
    filepos.SIZE 2 * +
    (heap.alloc)
    slmnode.result swap put disc

    slmnode.result read slmnode.data . swap put disc
    slmnode.result read slmnode.start . swap
    filepos.SIZE (mem.copy)
    slmnode.result read slmnode.stop . swap
    filepos.SIZE (mem.copy)

    slmnode.result read
    ret
  end
end
