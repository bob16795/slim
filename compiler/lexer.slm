inc "compiler/token.slm"
inc "stdlib/os.slm"
inc "stdlib/arrays.slm"
inc "stdlib/string.slm"

{
TODO: read buffer
}
class lexer
  prop filename int.SIZE
  prop file int.SIZE
  prop pos filepos.SIZE
  prop cstart filepos.SIZE
  prop current int.SIZE
  prop word int.SIZE
  prop token slmtoken.SIZE

  var tmp int.SIZE
  var result int.SIZE
  var includepath int.SIZE

  push proc new 2 1
    "[LEX] " (cstr.print)
    swap covr if [
      lexer.includepath
      (str.new) put disc

      lexer.includepath read
      "HOME" (os.env)
      copy (cstr.len) swap (str.sput)
      covr (cstr.println)
      "/.local/slam/lib/" (str.catc)
      covr (str.catc) disc
    ]
    swap ! if [
      lexer.includepath
      (str.new) put disc

      lexer.includepath read
      covr
      copy (cstr.len) swap (str.sput)
      (str.println)
    ]

    lexer.tmp
    filepos.SIZE 2 *
    int.SIZE 4 * +
    slmtoken.SIZE 1 * +
    (heap.zalloc) put disc

    lexer.includepath read str.data .
    
    (filestream.new)

    {
    0 swap
    fm.READ swap
    0
    covr readc '/' != if [
      disc -100
    ]
    (os.open)
    }

    lexer.tmp read lexer.file . swap put disc
    lexer.tmp read lexer.filename . swap put disc

    lexer.tmp read lexer.pos . filepos.filename .
    lexer.tmp read lexer.filename . read
    put disc
    lexer.tmp read lexer.cstart . filepos.filename .
    lexer.tmp read lexer.filename . read
    put disc

    lexer.tmp read lexer.word . (str.new)
    put disc

    lexer.tmp read
    ret
  end

  push proc advance 1 1
    lexer.tmp swap put disc

    lexer.tmp read lexer.pos .
    lexer.tmp read lexer.current . read
    (filepos.advance) disc

    lexer.tmp read lexer.current . 0 put disc

    lexer.tmp read lexer.current .
    lexer.tmp read lexer.file . read
    (filestream.readchar)
    putc disc

    lexer.tmp read

    ret
  end

  push proc free 1 0
    copy lexer.word . read (str.free)
    copy lexer.file . read (filestream.free)

    (heap.free)

    ret
  end

  push proc badword 0 1
    lexer.tmp read lexer.current . readc
    0 == if [
      0 ret
    ]

    lexer.tmp read lexer.word . read str.data . readc
    copy ''' == 
    covr '"' == ||
    covr '`' == ||
    covr '(' == ||
    covr '{' == ||
    swap disc
    ! if [
      0 ret
    ]
    lexer.tmp read lexer.word . read str.size . read 2 >
    ! if [
      1 ret
    ]
    
    lexer.tmp read lexer.word . read str.data . readc ''' ==
    lexer.tmp read lexer.word . read copy str.data . swap str.size . read + 2 - readc ''' == &&
    if [ 0 ret ]

    lexer.tmp read lexer.word . read str.data . readc '"' ==
    lexer.tmp read lexer.word . read copy str.data . swap str.size . read + 2 - readc '"' == &&
    if [ 0 ret ]

    lexer.tmp read lexer.word . read str.data . readc '`' ==
    lexer.tmp read lexer.word . read copy str.data . swap str.size . read + 2 - readc '`' == &&
    if [ 0 ret ]
    
    lexer.tmp read lexer.word . read str.data . readc '(' ==
    lexer.tmp read lexer.word . read copy str.data . swap str.size . read + 2 - readc ')' == &&
    if [ 0 ret ]
    
    lexer.tmp read lexer.word . read str.data . readc '{' ==
    lexer.tmp read lexer.word . read copy str.data . swap str.size . read + 2 - readc '}' == &&
    if [ 0 ret ]
    
    1

    ret
  end

  push proc gettoken 1 0
    copy "sim" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_SIM put disc disc ret
    ]
    copy "lambda" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_LAMBDA put disc disc ret
    ]
    copy ":" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_NAMED put disc disc ret
    ]
    copy "els" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_ELSE put disc disc ret
    ]
    copy "cas" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_CASE put disc disc ret
    ]
    copy "switch" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_SWITCH put disc disc ret
    ]
    copy "asm" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_ASM put disc disc ret
    ]
    copy "inc" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_INC put disc disc ret
    ]
    copy "enum" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_ENUM put disc disc ret
    ]
    copy "if" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_IF put disc disc ret
    ]
    copy "do" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_DO put disc disc ret
    ]
    copy "ret" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_RET put disc disc ret
    ]
    copy "brk" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_BRK put disc disc ret
    ]
    copy "const" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_CONST put disc disc ret
    ]
    copy "class" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_CLASS put disc disc ret
    ]
    copy "proc" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_PROC put disc disc ret
    ]
    copy "end" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_END put disc disc ret
    ]
    copy "quit" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_QUIT put disc disc ret
    ]
    copy "var" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_VAR put disc disc ret
    ]
    copy "copy" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_COPY put disc disc ret
    ]
    copy "covr" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_COVR put disc disc ret
    ]
    copy "disc" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_DISC put disc disc ret
    ]
    copy "prop" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_PROP put disc disc ret
    ]
    copy "[" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_COMMENT put disc disc ret
    ]
    copy "]" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_END put disc disc ret
    ]
    copy "." (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_ACCESS put disc disc ret
    ]
    copy "+" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_ADD put disc disc ret
    ]
    copy "-" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_SUB put disc disc ret
    ]
    copy "*" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_MUL put disc disc ret
    ]
    copy "/%" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_DIVMOD put disc disc ret
    ]
    copy "==" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_EQ put disc disc ret
    ]
    copy "!=" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_NEQ put disc disc ret
    ]
    copy ">" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_GT put disc disc ret
    ]
    copy "<" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_LT put disc disc ret
    ]
    copy "&&" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_AND put disc disc ret
    ]
    copy "||" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_OR put disc disc ret
    ]
    copy "!" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_NOT put disc disc ret
    ]
    copy "of" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_OF put disc disc ret
    ]
    copy "oper" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_OPER put disc disc ret
    ]
    copy "push" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_PUSH put disc disc ret
    ]
    copy "read" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_READ put disc disc ret
    ]
    copy "readc" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_READC put disc disc ret
    ]
    copy "put" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_PUT put disc disc ret
    ]
    copy "putc" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_PUTC put disc disc ret
    ]
    copy "swap" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_SWAP put disc disc ret
    ]
    copy "argv" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_ARGV put disc disc ret
    ]
    copy "argc" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_ARGC put disc disc ret
    ]
    copy "envp" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_ENVP put disc disc ret
    ]
    copy "sys0" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_SYS0 put disc disc ret
    ]
    copy "sys1" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_SYS1 put disc disc ret
    ]
    copy "sys2" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_SYS2 put disc disc ret
    ]
    copy "sys3" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_SYS3 put disc disc ret
    ]
    copy "sys4" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_SYS4 put disc disc ret
    ]
    copy "sys5" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_SYS5 put disc disc ret
    ]
    copy "sys6" (str.eq) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_SYS6 put disc disc ret
    ]

    str.data .
    copy (cstr.isnum) if [
      lexer.tmp read lexer.token . slmtoken.type . STK_CONST_NUMBER put disc disc ret
    ]
    readc
    
    copy '{' == if [
      lexer.tmp read lexer.token . slmtoken.type . STK_COMMENT put disc disc ret
    ]
    copy '"' == if [
      lexer.tmp read lexer.token . slmtoken.type . STK_CONST_STRING put disc

      lexer.tmp read lexer.token . slmtoken.value . read
      lexer.tmp read lexer.word . read
      str.size . read 1 -
      lexer.tmp read lexer.word . read
      str.data . 1 +
      (str.sput)
      copy str.data .
      swap str.size . read + 1 -
      0 putc disc disc ret
    ]
    copy '`' == if [
      lexer.tmp read lexer.token . slmtoken.type . STK_CONST_SSTRING put disc

      lexer.tmp read lexer.token . slmtoken.value . read
      lexer.tmp read lexer.word . read
      str.size . read 1 -
      lexer.tmp read lexer.word . read
      str.data . 1 +
      (str.sput)
      copy str.data .
      swap str.size . read + 1 -
      0 putc disc disc ret
    ]
    copy ''' == if [
      lexer.tmp read lexer.token . slmtoken.type . STK_CONST_NUMBER put disc

      lexer.tmp read lexer.token . slmtoken.value . read
      lexer.tmp read lexer.word . read
      str.data . 1 + readc (int.cstr)
      copy (cstr.len) swap
      (str.sput) disc
    ]
    copy '(' == if [
      lexer.tmp read lexer.token . slmtoken.type . STK_PAREN put disc

      lexer.tmp read lexer.token . slmtoken.value . read
      lexer.tmp read lexer.word . read
      str.size . read 1 -
      lexer.tmp read lexer.word . read
      str.data . 1 +
      (str.sput)
      copy str.data .
      swap str.size . read + 1 -
      0 putc disc disc ret
    ]
    disc

    ret
  end


  push proc run 1 1
    lexer.tmp swap put disc
    lexer.result
    slmtoken.SIZE (dlist.new)
    put disc

    do
      do
        lexer.tmp read lexer.word . read 
        lexer.tmp read (lexer.advance)
        lexer.current . 1 swap (str.sput) disc

        lexer.tmp read lexer.current . read
        copy 9 == 
        covr 10 == ||
        covr 13 == ||
        covr 32 == ||
        swap disc
      end

      lexer.tmp read lexer.cstart .
      lexer.tmp read lexer.pos .
      filepos.SIZE (mem.cpy)

      do
        do
          lexer.tmp read lexer.word . read
          lexer.tmp read (lexer.advance)
          lexer.current . (str.catc)
          lexer.tmp read lexer.word . swap put disc

          lexer.tmp read lexer.current . read
          copy 9 ==
          covr 0 == ||
          covr 10 == ||
          covr 13 == ||
          covr 32 == || !
          swap disc
        end
        (lexer.badword)
      end
      lexer.tmp read lexer.word . read
      copy str.size .
      copy read 1 -
      put disc

      lexer.tmp read lexer.token . slmtoken.type . STK_WORD put disc

      lexer.tmp read lexer.token . slmtoken.value . (str.new) put disc

      lexer.tmp read lexer.token . slmtoken.value . read
      lexer.tmp read lexer.word . read
      str.size . read
      lexer.tmp read lexer.word . read
      str.data .
      (str.sput) disc

      lexer.tmp read lexer.word . read
      copy str.data .
      swap str.size . read +
      0 putc disc

      lexer.tmp read lexer.token . slmtoken.start .
      lexer.tmp read lexer.cstart .
      filepos.SIZE (mem.cpy)

      lexer.tmp read lexer.token . slmtoken.stop .
      lexer.tmp read lexer.pos .
      filepos.SIZE (mem.cpy)

      (lexer.gettoken)

      lexer.tmp read lexer.word . read
      str.size . read 0 != if [
        lexer.result read
        lexer.tmp read lexer.token .
        (dlist.append)
        lexer.result
        swap put disc
      ]

      lexer.tmp read lexer.current . read 0 !=
    end

    lexer.tmp read (lexer.free)
    lexer.result read
    ret
  end
end
