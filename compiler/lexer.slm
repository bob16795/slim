inc "compiler/lexer.slh"

class lexer
  oper proc new 2 1
    var result 8
    var incpath 8

    lexer.print readc if
      "[SLM] " cstr.print
      covr cstr.println
    end

    incpath str.new put disc

    covr "./" 2 mem.eq ! && if
      incpath read
      "HOME" os.env str.catc
      "/.local/slam/lib/" str.catc
      incpath swap put disc
    end
    copy "./" 2 mem.eq if
      incpath read
      "PWD" os.env str.catc
      incpath swap put disc
      1 +
    end

    incpath read
    swap str.catc
    incpath swap put disc

    result lexer.SIZE heap.zalloc put disc

    incpath read str.data .
    copy
    incpath read str.size @ +
    0 putc disc

    filestream.new

    result read lexer.file . swap put disc
    incpath read
    result read lexer.filename . swap put disc

    result read lexer.pos . filepos.filename .
    result read lexer.filename @
    put disc

    result read lexer.cstart . filepos.filename .
    result read lexer.filename @
    put disc

    result read lexer.pos . filepos.row .
    1
    put disc

    result read lexer.cstart . filepos.row .
    1
    put disc

    result read lexer.word . str.new put disc

    incpath read str.free

    result read

    ret
  end

  oper proc free 1 0
    copy lexer.word @ str.free
    copy lexer.file @ filestream.free
    heap.free

    ret
  end

  oper proc advance 1 1
    var self 8

    self swap put disc

    self read lexer.pos .
    self read lexer.current . readc
    filepos.advance disc

    self read lexer.current . 1 + 0 putc disc

    self read lexer.current .
    self read lexer.file @
    filestream.readchar
    copy '\\' == if
      disc
      self read lexer.file @
      filestream.readchar
      copy 'n' == if
        disc 10
      end
      copy 't' == if
        disc 11
      end
      copy 'r' == if
        disc 13
      end
      copy 'e' == if
        disc 27
      end
    end
    putc disc

    self read

    ret
  end

  oper proc isbadword 1 1
    var self 8

    self swap put disc

    self read lexer.current . readc
    0 == if bool.false ret end

    self read lexer.word @ str.data . readc
    copy ''' == 
    covr '"' == ||
    covr '`' == ||
    covr '(' == ||
    covr '\{' == ||
    swap disc !
    if bool.false ret end

    self read lexer.word @ str.size @ 2 > !
    if bool.true ret end
    
    self read lexer.word @ str.data . readc ''' ==
    self read lexer.word @ copy str.data . swap str.size @ + 2 - readc ''' == &&
    if bool.false ret end
    
    self read lexer.word @ str.data . readc '"' ==
    self read lexer.word @ copy str.data . swap str.size @ + 2 - readc '"' == &&
    if bool.false ret end
    
    self read lexer.word @ str.data . readc '`' ==
    self read lexer.word @ copy str.data . swap str.size @ + 2 - readc '`' == &&
    if bool.false ret end
    
    self read lexer.word @ str.data . readc '(' ==
    self read lexer.word @ copy str.data . swap str.size @ + 2 - readc ')' == &&
    if bool.false ret end
    
    self read lexer.word @ str.data . readc '\{' ==
    self read lexer.word @ copy str.data . swap str.size @ + 2 - readc '}' == &&
    if bool.false ret end

    bool.true

    ret
  end

  oper proc matchword 4 3
    var match 8
    var result 8
    var word 8
    var lexer 8

    result swap put disc
    match swap put disc
    word swap put disc
    lexer swap put disc

    word read
    match read str.ceq if
      lexer read lexer.token . slmtoken.type . result read put disc

      lexer read
      word read
      bool.true
      ret
    end
    lexer read
    word read
    bool.false

    ret
  end

  oper proc gettoken 2 2
    var word 8
    var self 8

    word swap put disc
    self swap put disc

    self read word read
    "lambda" STK_LAMBDA lexer.matchword if ret end
    "switch" STK_SWITCH lexer.matchword if ret end
    "unsafe" STK_UNSAFE lexer.matchword if ret end
    "const" STK_CONST lexer.matchword if ret end
    "class" STK_CLASS lexer.matchword if ret end
    "readc" STK_READC lexer.matchword if ret end
    "proc" STK_PROC lexer.matchword if ret end
    "enum" STK_ENUM lexer.matchword if ret end
    "copy" STK_COPY lexer.matchword if ret end
    "swap" STK_SWAP lexer.matchword if ret end
    "read" STK_READ lexer.matchword if ret end
    "putc" STK_PUTC lexer.matchword if ret end
    "disc" STK_DISC lexer.matchword if ret end
    "covr" STK_COVR lexer.matchword if ret end
    "prop" STK_PROP lexer.matchword if ret end
    "quit" STK_QUIT lexer.matchword if ret end
    "head" STK_HEAD lexer.matchword if ret end
    "push" STK_PUSH lexer.matchword if ret end
    "oper" STK_OPER lexer.matchword if ret end
    "argc" STK_ARGC lexer.matchword if ret end
    "argv" STK_ARGV lexer.matchword if ret end
    "envp" STK_ENVP lexer.matchword if ret end
    "sys0" STK_SYS0 lexer.matchword if ret end
    "sys1" STK_SYS1 lexer.matchword if ret end
    "sys2" STK_SYS2 lexer.matchword if ret end
    "sys3" STK_SYS3 lexer.matchword if ret end
    "sys4" STK_SYS4 lexer.matchword if ret end
    "sys5" STK_SYS5 lexer.matchword if ret end
    "sys6" STK_SYS6 lexer.matchword if ret end
    "end" STK_END lexer.matchword if ret end
    "put" STK_PUT lexer.matchword if ret end
    "var" STK_VAR lexer.matchword if ret end
    "sim" STK_SIM lexer.matchword if ret end
    "els" STK_ELSE lexer.matchword if ret end
    "cas" STK_CASE lexer.matchword if ret end
    "asm" STK_ASM lexer.matchword if ret end
    "inc" STK_INC lexer.matchword if ret end
    "ret" STK_RET lexer.matchword if ret end
    "brk" STK_BRK lexer.matchword if ret end
    "if" STK_IF lexer.matchword if ret end
    "do" STK_DO lexer.matchword if ret end
    "of" STK_OF lexer.matchword if ret end
    "/%" STK_DIVMOD lexer.matchword if ret end
    "==" STK_EQ lexer.matchword if ret end
    "!=" STK_NEQ lexer.matchword if ret end
    "&&" STK_AND lexer.matchword if ret end
    "||" STK_OR lexer.matchword if ret end
    "!" STK_NOT lexer.matchword if ret end
    ">" STK_GT lexer.matchword if ret end
    "<" STK_LT lexer.matchword if ret end
    ":" STK_NAMED lexer.matchword if ret end
    "." STK_ACCESS lexer.matchword if ret end
    "@" STK_REFACCESS lexer.matchword if ret end
    "+" STK_ADD lexer.matchword if ret end
    "-" STK_SUB lexer.matchword if ret end
    "*" STK_MUL lexer.matchword if ret end
    "~" STK_INV lexer.matchword if ret end
    disc disc

    word read str.data . cstr.isnum if
      self read lexer.token . slmtoken.type . STK_CONST_NUMBER put disc
      self read word read
      ret
    end

    word read str.data . readc
    copy '\{' == if
      disc
      self read lexer.token . slmtoken.type . STK_COMMENT put disc
      self read word read
      ret
    end
    copy '"' == if
      disc
      self read lexer.token . slmtoken.type . STK_CONST_STRING put disc
      self read lexer.token . slmtoken.value @
      self read lexer.word @ str.size @ 1 -
      self read lexer.word @ str.data . 1 +
      str.sput
      copy str.data .
      swap str.size @ + 1 -
      0 putc disc

      self read word read
      ret
    end
    copy '`' == if
      disc
      self read lexer.token . slmtoken.type . STK_CONST_SSTRING put disc
      self read lexer.token . slmtoken.value @
      self read lexer.word @ str.size @ 1 -
      self read lexer.word @ str.data . 1 +
      str.sput
      copy str.data .
      swap str.size @ + 1 -
      0 putc disc

      self read word read
      ret
    end
    copy ''' == if
      disc
      self read lexer.token . slmtoken.type . STK_CONST_NUMBER put disc
      self read lexer.token . slmtoken.value @
      self read lexer.word @ str.data . 1 + readc int.cstr
      copy cstr.len swap
      str.sput
      copy str.data .
      swap str.size @ +
      0 putc disc

      self read word read
      ret
    end
    copy '(' == if
      disc
      self read lexer.token . slmtoken.type . STK_PAREN put disc
      self read lexer.token . slmtoken.value @
      self read lexer.word @ str.size @ 2 -
      self read lexer.word @ str.data . 1 +
      str.sput
      copy str.data .
      swap str.size @ +
      0 putc disc

      self read word read
      ret
    end
    disc

    self read word read

    ret
  end

  oper proc run 1 1
    var self 8
    var result 8

    self swap put disc
    result slmtoken.SIZE dlist.new put disc

    do
      do
        self read lexer.advance disc

        self read lexer.word @ str.data .
        self read lexer.current . readc
        putc disc
        self read lexer.word @ str.size . 1 put disc

        self read lexer.current . readc
        copy 9 == 
        covr 10 == ||
        covr 13 == ||
        covr 32 == ||
        swap disc
      end

      self read lexer.cstart .
      self read lexer.pos .
      filepos.SIZE mem.cpy

      do
        do
          self read lexer.word @
          self read lexer.advance
          lexer.current . str.catc
          self read lexer.word .
          swap put disc

          self read lexer.current . readc
          copy 9 ==
          covr 0 == ||
          covr 10 == ||
          covr 13 == ||
          covr 32 == || !
          swap disc
        end

        self read
        lexer.isbadword
      end

      self read lexer.word @ str.size .
      copy read
      copy 0 != if 1 - end
      put disc

      self read lexer.token . slmtoken.type . STK_WORD put disc
      self read lexer.token . slmtoken.value . str.new put disc
      
      self read lexer.token . slmtoken.value @
      self read lexer.word @ str.size @
      self read lexer.word @ str.data .
      str.sput disc

      self read lexer.word @
      copy str.data .
      swap str.size @ +
      0 putc disc

      self read lexer.token . slmtoken.start .
      self read lexer.cstart .
      filepos.SIZE
      mem.cpy

      self read lexer.token . slmtoken.stop .
      self read lexer.pos .
      filepos.SIZE
      mem.cpy

      self read
      self read lexer.word @
      lexer.gettoken
      disc disc

      self read lexer.word @
      str.size @ 0 != if
        result read
        self read lexer.token .
        dlist.append
        result swap put disc
      end

      self read lexer.current . readc 0 !=
    end

    self read lexer.free

    result read

    ret
  end
end

