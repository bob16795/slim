inc "compiler/writer.slh"

class writer
  oper proc new 1 1
    var result 8

    result writer.SIZE heap.zalloc put disc

    result read writer.name . swap put disc

    511
    65
    result read writer.name @
    -100
    os.openf
    result read writer.fd . swap put disc

    8
    dlist.new
    result read writer.strings . swap put disc

    result read

    ret
  end

  oper proc free 1 0
    var self 8

    self swap put disc

    self read writer.strings @ dlist.free
    self read heap.free

    ret
  end

  oper proc write 1 0
    copy cstr.len swap
    writer.current read writer.fd @
    os.writef

    ret
  end

  oper proc getlen 1 1
    var string 8
    var len 8

    string swap put disc
  
    len 0 put disc

    0
    do
      string read str.data . covr + readc
      '\' != if
        len copy
        read 1 +
        put disc
      end
      1 +
      copy string read str.size @ 1 - <
    end
    disc

    len read
    
    ret
  end

  oper proc addstr 1 0
    var string 8

    string swap put disc

    writer.current read writer.strings @
    string read dlist.append
    writer.current read writer.strings . swap put disc

    writer.current read writer.strings @ dlist.len 1 -
    int.cstr writer.write

    ret
  end

  oper proc mem 0 1
    writer.current read writer.tmem .

    ret
  end

  oper proc getescape 1 1
    copy 'e' == if disc 27 ret end
    copy 'n' == if disc 10 ret end
    copy 'r' == if disc 13 ret end
    copy 't' == if disc 9 ret end
    copy '0' == if disc 0 ret end

    ret
  end

  oper proc writeheader 0 0
    "format ELF64\n" writer.write
    "section '.text' executable\n" writer.write
    "public _start\n" writer.write

    ret
  end

  oper proc writefooter 0 0
    "    jmp quit\n" writer.write
    "_start:\n" writer.write
    "    mov qword [args_ptr], rsp\n" writer.write
    "    mov qword [ret_stack_rsp], ret_stack\n" writer.write
    "    mov qword [loc_stack_rsp], loc_stack\n" writer.write
    "    mov rax, [ret_stack_rsp] \n" writer.write
    "    mov qword [rax], quit\n" writer.write
    "    jmp proc_main\n" writer.write
    "quit:\n" writer.write
    "    mov rax, 60\n" writer.write
    "    mov rdi, 0\n" writer.write
    "    syscall\n" writer.write
    "section '.data'\n" writer.write

    writer.writestrings

    "section '.bss'\n" writer.write
    "    args_ptr: rq 1\n" writer.write
    "    ret_stack_rsp: rq 1\n" writer.write
    "    ret_stack: rq 1024\n" writer.write
    "    loc_stack_rsp: rq 1\n" writer.write
    "    loc_stack: rq 512\n" writer.write
    "    mem: rb " writer.write
    writer.current read writer.tmem @ int.cstr writer.write

    ret
  end

  oper proc writestring 1 0
    var string 8
    var escape 1

    string swap put disc
    escape bool.false putc disc

    0
    do
      string read str.data . covr + readc
      int.cstr writer.write

      ", " writer.write
      1 +
      copy string read str.size @ 1 - <
    end
    disc

    ret
  end

  oper proc writestrings 0 0
    writer.current read writer.strings @
    dlist.len 0 == if ret end

    0
    do
      writer.current read writer.strings @
      covr dlist.getptr
      copy NULL != if
        "    str_" writer.write
        covr int.cstr writer.write
        ": db " writer.write
        copy read writer.writestring
        "0\n" writer.write
      end
      disc

      1 +

      writer.current read writer.strings @ dlist.len covr !=
    end
    disc

    ret
  end 
end

