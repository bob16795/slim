inc "stdlib/os.slm"

push proc max 2 1
  covr covr < if [
    disc ret
  ]
  swap disc

  ret
end

class writer
  var fd int.SIZE
  var strings int.SIZE
  var tmem int.SIZE
  var tmpstr int.SIZE
  var tmpwrite int.SIZE
  var _ int.SIZE

  push proc write 1 0
    copy (cstr.len) swap writer.fd read (os.write)

    ret
  end

  push proc cr 0 0
    "\n" (writer.write)

    ret
  end

  push proc writeln 1 0
    (writer.write)
    (writer.cr)

    ret
  end
  
  var len int.SIZE

  push proc getlen 1 1
    writer.tmpstr swap put disc

    0
    do
      writer.tmpstr read str.data . covr + readc
      '\' != if [
        writer.len copy
        read 1 +
        put disc
      ]
      1 +
      copy writer.tmpstr read str.size . read 1 - <
    end
    disc
    
    writer.len read

    ret
  end

  push proc addstr 1 0
    writer.tmpstr swap put disc

    writer.strings read (dlist.len) 0 == if [
      writer.strings read 
      writer.tmpstr read (dlist.append) 
      writer.strings swap put disc

      writer.strings read (dlist.len) 1 -
      (int.cstr) (writer.write)
      ret
    ]

    -1
    do
      1 +
      writer.strings read 
      covr (dlist.ptrat) read

      writer.tmpstr read
      covr (str.len) str.data +
      covr (str.len) str.data +
      (max)

      (mem.eq) !
      covr writer.strings read (dlist.len) 1 - != &&
    end

    writer.strings read (dlist.len) 1 - covr == if [
      writer.strings read
      writer.tmpstr read (dlist.append)
      writer.strings swap put disc

      writer.strings read (dlist.len) 1 -
      (int.cstr) (writer.write)
      disc
      ret
    ]
    "lol" (cstr.println)

    (int.cstr) (writer.write)

    {
    writer.strings read 
    writer.tmpstr read (dlist.append) 
    writer.strings swap put disc

    writer.strings read (dlist.len) 1 -
    (int.cstr) (writer.write)
    }
    
    ret
  end

  push proc header 0 0
    "format ELF64\n" (writer.write)
    "section '.text' executable\n" (writer.write)
    "public _start\n" (writer.write)

    ret
  end

  var escape int.SIZE

  push proc getescape 1 1
    copy 'n' == if [ disc 10 ret ]
    copy 't' == if [ disc 9 ret ]

    ret
  end

  push proc writestring 1 0
    writer.tmpstr swap put disc
    0
    do
      writer.tmpstr read str.data . covr + readc
      writer.escape read if [
        (writer.getescape)
      ]
      writer.escape bool.true put disc
      copy '\' != if [
        writer.escape bool.false put disc
        (int.cstr) (writer.write)

        ", " (writer.write) 0
      ]
      disc
      1 +
      copy writer.tmpstr read str.size . read 1 - <
    end
    disc

    ret
  end

  push proc writestrings 0 0
    writer.strings read (dlist.len) 0 == if [ ret ]

    0
    do
      writer.strings read 
      covr (dlist.ptrat)
      copy NULL != if [
        "str_" (writer.write)
        covr (int.cstr) (writer.write)
        ": db " (writer.write)
        copy read (writer.writestring)
        "0 ;" (writer.write)
        writer.tmpstr read str.data . (writer.writeln)
      ]
      disc
      
      1 +

      writer.strings read (dlist.len) covr !=
    end
    disc

    ret
  end

  push proc footer 0 0
    "_start:\n" (writer.write)
    "    mov qword [args_ptr], rsp\n" (writer.write)
    "    mov qword [ret_stack_rsp], ret_stack\n" (writer.write)
    "    mov rax, [ret_stack_rsp] \n" (writer.write)
    "    mov qword [rax], quit\n" (writer.write)
    "    jmp proc_main\n" (writer.write)
    "quit:\n" (writer.write)
    "    mov rax, 60\n" (writer.write)
    "    mov rdi, 0\n" (writer.write)
    "    syscall\n" (writer.write)
    "section '.data'\n" (writer.write)

    (writer.writestrings)

    "section '.bss'\n" (writer.write)
    "args_ptr: rq 1\n" (writer.write)
    "ret_stack_rsp: rq 1\n" (writer.write)
    "ret_stack: rb 65536\n" (writer.write)
    "mem: rb " (writer.write)
    writer.tmem read (int.cstr) (writer.writeln)

    ret
  end

  push proc write32 1 0
    65535 && writer.tmpwrite swap put disc
    writer.tmpwrite 4 + 4 swap writer.fd read (os.write)

    ret
  end

  push proc write64 1 0
    writer.tmpwrite swap put disc
    writer.tmpwrite 8 swap writer.fd read (os.write)

    ret
  end

  push proc open 1 0
    511 swap
    65 swap
    -100
    (os.open)
    writer.fd swap put disc

    writer.strings int.SIZE (dlist.new) put disc
    ret
  end
end
