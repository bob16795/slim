inc "compiler/node.slm"
inc "compiler/writer.slm"
inc "stdlib/maps.slm"

{the size of a key for the proc, const table}
const TAB_KEY_SIZE   64

class simulator
  const SUCCESS 0
  const FAIL 1

  var root int.SIZE
  var visit int.SIZE
  var file int.SIZE

  var simstack int.SIZE
  var blockstack int.SIZE
  var consttab int.SIZE
  var vartab int.SIZE
  var varpos int.SIZE

  var classsize int.SIZE
  var curcall int.SIZE
  var laststring int.SIZE
  var classname int.SIZE

  var includedtab int.SIZE

  var tmpname int.SIZE
  var tmpnum int.SIZE

  var tmpchar 2

  push proc getconst 1 1
    simulator.consttab read covr (map.in) if [
      covr (map.get) read
      swap disc
      swap disc
      ret
    ] disc

    ret
  end

  var itemp int.SIZE

  push proc internalname 1 1
    simulator.itemp swap put disc

    simulator.tmpname read
    str.size . 0 put disc

    0
    do
      copy
      simulator.itemp read
      str.data . +
      readc 
      copy simulator.tmpchar swap putc disc
      copy '/' == if [
        simulator.tmpname read
        "slash" (str.catc)
        disc disc 0
      ]
      copy '.' == if [
        simulator.tmpname read
        "_" (str.catc)
        disc disc 0
      ]
      copy 0 != if [
        simulator.tmpname read
        simulator.tmpchar
        (str.catc)
        disc disc 0
      ]
      disc
      
      1 +
      
      copy
      simulator.itemp read
      str.size . read
      <
    end
    disc

    simulator.tmpname read
    copy
    copy str.data .
    swap str.size . read +
    0 putc disc

    ret
  end

  push proc visitconst 1 1
    copy constdata.constkind . read swap
    covr CNK_NUMBER == if [
      simulator.simstack read
      covr constdata.constvalue . read str.data . (cstr.tonum)
      simulator.tmpnum
      swap put
      (dlist.append)
      disc

      disc
      disc
      simulator.SUCCESS
      ret
    ]
    covr CNK_STRING == if [
      disc
      disc
      simulator.FAIL
      ret
    ]
    covr CNK_WORD == if [
      disc
      disc
      simulator.FAIL
      ret
    ]
    disc
    disc
    simulator.FAIL
    ret
  end

  var tmp int.SIZE

  push proc visitdef 1 1
    copy defdata.defkind . read swap
    covr CNK_NUMBER == if [
      disc
      disc
      simulator.FAIL
      ret
    ]
    covr CNK_STRING == if [
      disc
      disc
      simulator.FAIL
      ret
    ]
    disc
    disc
    simulator.FAIL

    ret
  end

  push proc visitprop 1 1
    copy propdata.propkind . read swap
    covr CNK_NUMBER == if [
      disc
      disc
      simulator.FAIL
      ret
    ]
    covr CNK_WORD == if [
      disc
      disc
      simulator.FAIL
      ret
    ]
    disc
    disc
    simulator.FAIL
    ret
  end

  push proc visitvar 1 1
    copy vardata.varkind . read swap
    covr CNK_NUMBER == if [
      disc
      disc
      simulator.FAIL
      ret
    ]
    covr CNK_WORD == if [
      disc
      disc
      simulator.FAIL
      ret
    ]
    swap disc

    ret
  end

  push proc visitcall 1 1
    disc
    simulator.FAIL

    ret
  end

  push proc visitword 1 1
    disc
    simulator.FAIL
    
    ret
  end

  push proc visitintr 1 1
    copy intrdata.intrkind . read swap
    covr INK_RETURN == if [
      disc
      disc
      simulator.FAIL

      ret
    ]
    covr INK_ADD == if [
      simulator.simstack read
      copy (dlist.pop) read
      covr (dlist.pop) read
      +
      simulator.tmpnum swap put
      (dlist.append)
      disc

      disc
      disc
      simulator.SUCCESS

      ret
    ]
    disc
    disc
    simulator.FAIL

    ret
  end

  push proc visitinc 1 1
    simulator.file read

    covr incdata.include . read
    str.data .
    copy simulator.includedtab read swap (map.in) swap disc if [
      disc disc disc
      simulator.SUCCESS
      ret
    ]
    simulator.includedtab read covr
    "y" (map.putat)
    disc

    bool.true
    (lexer.new) (lexer.run)
    (parser.new) (parser.run)

    simulator.visit read ()
    swap

    simulator.file swap put disc

    swap disc

    ret
  end

  push proc visitfile 1 1
    simulator.file
    covr filedata.name . read
    put disc
  
    copy filedata.childcount . read

    0 == if [
      disc
      simulator.SUCCESS
      ret
    ]

    0
    do
      covr filedata.children .
      covr int.SIZE * + read

      copy simulator.visit read ()
      simulator.SUCCESS != if [
        (slmnode.print)
        disc
        disc
        simulator.FAIL
        ret
      ]

      disc

      1 +
      covr filedata.childcount . read
      covr >
    end
    disc
    disc

    simulator.SUCCESS

    ret
  end

  push proc addprochead 2 2

    ret
  end

  push proc visitblock 1 1
    copy blockdata.blockkind . read
    copy BNK_CLASS == if [

    ]
    copy BNK_PROC == if [
      (simulator.addprochead)
    ]
    disc

    copy blockdata.childcount . read

    0 == if [
      disc
      simulator.SUCCESS
      ret
    ]

    0
    do
      covr blockdata.children .
      covr int.SIZE * + read

      copy simulator.visit read ()
      simulator.SUCCESS != if [
        (slmnode.print)
        disc
        disc
        simulator.FAIL
        ret
      ]

      disc

      1 +
      covr blockdata.childcount . read
      covr >
    end
    disc
    blockdata.blockkind . read
    copy BNK_CLASS == if [
      simulator.classname
      NULL
      put disc
    ]
    disc

    simulator.SUCCESS

    ret
  end

  push proc visitnode 1 1
    simulator.blockstack read NULL == if [
      simulator.blockstack int.SIZE (llist.new) put disc
      simulator.simstack int.SIZE (dlist.new) put disc
      simulator.consttab 256 int.SIZE TAB_KEY_SIZE (map.new) put disc
      simulator.vartab 256 int.SIZE TAB_KEY_SIZE (map.new) put disc
      simulator.includedtab 256 int.SIZE TAB_KEY_SIZE (map.new) put disc
      simulator.tmpname (str.new) put disc
    ]
    simulator.visit simulator.visitnode put disc

    slmnode.data . read copy nodedata.kind . read
    copy SNK_NULL == if [
      disc disc
      simulator.FAIL

      ret
    ]
    copy SNK_INC == if [
      disc
      (simulator.visitinc)
      
      ret
    ]
    copy SNK_COMMENT == if [
      disc disc
      simulator.SUCCESS

      ret
    ]
    copy SNK_COMMENT == if [
      disc disc
      simulator.SUCCESS

      ret
    ]
    copy SNK_FILE == if [
      disc
      (simulator.visitfile)
      
      ret
    ]
    copy SNK_BLOCK == if [
      disc
      (simulator.visitblock)
      
      ret
    ]
    copy SNK_CONST == if [
      disc
      (simulator.visitconst)
      
      ret
    ]
    copy SNK_DEF == if [
      disc
      (simulator.visitdef)
      
      ret
    ]
    copy SNK_INTR == if [
      disc
      (simulator.visitintr)
      
      ret
    ]
    copy SNK_PROP == if [
      disc
      (simulator.visitprop)
      
      ret
    ]
    copy SNK_VAR == if [
      disc
      (simulator.visitvar)
      
      ret
    ]
    copy SNK_CALL == if [
      disc
      (simulator.visitcall)
      
      ret
    ]
    disc (slmnode.print)

    simulator.FAIL
    ret
  end
end
