inc "compiler/token.slm"
inc "compiler/node.slm"
inc "compiler/errors.slm"
inc "stdlib/arrays.slm"
inc "stdlib/mem.slm"

class parserresult
  prop error int.SIZE
  prop node int.SIZE

  var tmp int.SIZE
  var self int.SIZE

  proc register 2 1
    parserresult.tmp swap put disc
    parserresult.self swap put disc

    parserresult.tmp read NULL != if
      parserresult.tmp read parserresult.error . read NULL != if
        parserresult.self read parserresult.error .
        parserresult.tmp read parserresult.error . read
        put disc
      end

      parserresult.tmp read (heap.free)

      parserresult.tmp read parserresult.node . read

      ret
    end

    NULL

    ret
  end

  proc success 2 1
    parserresult.tmp swap put disc
    parserresult.self swap put disc

    parserresult.self read parserresult.node .
    parserresult.tmp read
    put disc

    parserresult.self read 

    ret
  end

  proc failure 2 1
    parserresult.tmp swap put disc
    parserresult.self swap put disc

    parserresult.self read parserresult.error .
    parserresult.tmp read
    put disc

    parserresult.self read 

    ret
  end
end

class parser
  prop tokens int.SIZE
  prop idx int.SIZE
  prop current int.SIZE

  var inblock int.SIZE
  var startstack int.SIZE
  var tmp int.SIZE

  push proc new 1 1
    parser.tmp
    int.SIZE 3 *
    (heap.zalloc) put disc

    parser.tmp read parser.tokens . swap put disc
    parser.tmp read parser.idx . -1 put disc

    parser.tmp read

    ret
  end

  push proc free 1 0
    copy parser.tokens . read (dlist.free)
    (heap.free)

    parser.startstack read seq.free

    ret
  end

  push proc advance 1 1
    parser.tmp swap put disc

    parser.tmp read parser.idx .
    copy read 1 +
    copy 0 < if disc 0 end
    put disc

    parser.tmp read parser.current . NULL put disc

    parser.tmp read parser.idx . read
    parser.tmp read parser.tokens . read (dlist.len) < if
      parser.tmp read parser.current .
      parser.tmp read parser.tokens . read
      parser.tmp read parser.idx . read
      (dlist.ptrat)
      put disc
    end
    parser.tmp read

    ret
  end

  push proc initres 0 1
    parserresult.SIZE (heap.alloc)

    ret
  end

  push proc subintr 2 1
    parser.tmp read parser.current . read slmtoken.type . read
    == if
      parser.tmp read parser.tokens . read
      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.start . swap
      parser.tmp read parser.current . read slmtoken.stop . swap
      
      (intrdata.new)

      (slmnode.new)

      parser.startstack read seq.popaddr disc disc
      ret
    end
    disc

    NULL
    ret
  end
  
  push proc parseintr 0 1
    parser.initres

    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if
      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.start . swap
      copy
      EK_SYNTAX
      "EOF unexpected"
      parserresult.failure

      ret
    end

    INK_COPY STK_COPY (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_COVR STK_COVR (parser.subintr) copy NULL != if parserresult.success ret end disc 
    INK_DISC STK_DISC (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_AND STK_AND (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_OR STK_OR (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_NOT STK_NOT (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_INV STK_INV (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_READ STK_READ (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_READC STK_READC (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_PUT STK_PUT (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_PUTC STK_PUTC (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_SWAP STK_SWAP (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_ADD STK_ADD (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_SUB STK_SUB (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_MUL STK_MUL (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_DIVMOD STK_DIVMOD (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_ACCESS STK_ACCESS (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_EQ STK_EQ (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_NEQ STK_NEQ (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_LT STK_LT (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_GT STK_GT (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_BRK STK_BRK (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_RETURN STK_RET (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_ARGV STK_ARGV (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_ARGC STK_ARGC (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_ENVP STK_ENVP (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_QUIT STK_QUIT (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_SYS0 STK_SYS0 (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_SYS1 STK_SYS1 (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_SYS2 STK_SYS2 (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_SYS3 STK_SYS3 (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_SYS4 STK_SYS4 (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_SYS5 STK_SYS5 (parser.subintr) copy NULL != if parserresult.success ret end disc
    INK_SYS6 STK_SYS6 (parser.subintr) copy NULL != if parserresult.success ret end disc

    parser.tmp read parser.idx .
    parser.startstack read seq.popaddr read swap disc
    put disc

    parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.start . swap
    parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.stop . swap
    EK_SYNTAX
    "Intrinsic expected"
    parserresult.failure

    ret
  end

  push proc parsenum 0 1
    parser.initres

    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if NULL ret end

    parser.tmp read parser.current . read slmtoken.type . read 
    STK_CONST_NUMBER != if
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      
      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.start . swap
      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.stop . swap
      EK_SYNTAX
      "Enums should start with a const"
      parserresult.failure
      
      ret
    end

    parser.tmp read parser.tokens . read
    parser.tmp read parser.idx . read
    1 - (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.current . read slmtoken.stop .
    
    CNK_NUMBER
    parser.tmp read parser.current . read slmtoken.value . read
    (constdata.new)

    (slmnode.new)

    parser.startstack read seq.popaddr disc disc

    parserresult.success

    ret
  end

  push proc parsestring 0 1
    parser.initres

    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read 
    STK_CONST_STRING != if
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc

      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.start . swap
      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.stop . swap
      EK_SYNTAX
      "String expected"
      parserresult.failure

      ret
    end

    parser.tmp read parser.tokens . read
    parser.tmp read parser.idx . read
    1 - (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.current . read slmtoken.stop .
    
    CNK_STRING
    parser.tmp read parser.current . read slmtoken.value . read 
    (constdata.new)

    (slmnode.new)

    parser.startstack read seq.popaddr disc disc

    parserresult.success

    ret
  end

  push proc parsesstring 0 1
    parser.initres

    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if NULL ret end

    parser.tmp read parser.current . read slmtoken.type . read 
    STK_CONST_SSTRING != if
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc

      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.start . swap
      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.stop . swap
      EK_SYNTAX
      "S-String expected"
      parserresult.failure
      ret
    end

    parser.tmp read parser.tokens . read
    parser.tmp read parser.idx . read
    1 - (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.current . read slmtoken.stop .
    
    CNK_SSTRING
    parser.tmp read parser.current . read slmtoken.value . read 
    (constdata.new)

    (slmnode.new)

    parser.startstack read seq.popaddr disc disc

    parserresult.success

    ret
  end

  push proc parseword 0 1
    parser.initres

    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if NULL ret end

    parser.tmp read parser.current . read slmtoken.type . read 
    STK_WORD != if
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret

      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.start . swap
      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.stop . swap
      EK_SYNTAX
      "Word expected"
      parserresult.failure

      ret
    end

    parser.tmp read parser.tokens . read
    parser.tmp read parser.idx . read
    1 - (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.current . read slmtoken.stop .
    
    CNK_WORD
    parser.tmp read parser.current . read slmtoken.value . read 
    (constdata.new)

    (slmnode.new)

    parser.startstack read seq.popaddr disc disc

    parserresult.success

    ret
  end

  push proc parsecall 0 1
    parser.initres

    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if NULL ret end

    parser.tmp read parser.current . read slmtoken.type . read 
    STK_PAREN != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc

      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.start . swap
      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.stop . swap
      EK_SYNTAX
      "Word expected"
      parserresult.failure

      ret
    end

    parser.tmp read parser.tokens . read
    parser.tmp read parser.idx . read
    1 - (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.current . read slmtoken.stop .
    
    parser.tmp read parser.current . read slmtoken.value . read 
    (calldata.new)

    (slmnode.new)

    parser.startstack read seq.popaddr disc disc

    parserresult.success

    ret
  end

  push proc parseinc 0 1
    parser.initres

    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc
    
    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if NULL ret end

    parser.tmp read parser.current . read slmtoken.type . read 
    STK_INC != if
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc

      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.start . swap
      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.stop . swap
      EK_SYNTAX
      "Include expected"
      parserresult.failure

      ret
    end

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if NULL ret end

    parser.tmp read parser.current . read slmtoken.type . read 
    STK_CONST_STRING != if
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc

      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.start . swap
      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.stop . swap
      EK_SYNTAX
      "String expected"
      parserresult.failure

      ret
    end

    parser.tmp read parser.tokens . read
    parser.tmp read parser.idx . read
    1 - (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.current . read slmtoken.stop .

    parser.tmp read parser.current . read slmtoken.value . read 
    (incdata.new)

    (slmnode.new)

    parser.startstack read seq.popaddr disc disc

    parserresult.success

    ret
  end

  push proc parseasm 0 1
    parser.initres

    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc
    
    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if NULL ret end

    parser.tmp read parser.current . read slmtoken.type . read 
    STK_ASM != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc

      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.start . swap
      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.stop . swap
      EK_SYNTAX
      "Asm expected"
      parserresult.failure

      ret
    end

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if NULL ret end

    parser.tmp read parser.current . read slmtoken.type . read 
    STK_CONST_STRING != if 
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc

      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.start . swap
      parser.tmp read parser.idx . read 1 - (dlist.ptrat) slmtoken.stop . swap
      EK_SYNTAX
      "String expected"
      parserresult.failure

      ret
    end

    parser.tmp read parser.tokens . read
    parser.tmp read parser.idx . read
    1 - (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.current . read slmtoken.stop .

    parser.tmp read parser.current . read slmtoken.value . read 
    (asmdata.new)

    (slmnode.new)

    parser.startstack read seq.popaddr disc disc

    parserresult.success

    ret
  end

  push proc parseof 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc
    
    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if NULL ret end

    parser.tmp read parser.current . read slmtoken.type . read 
    STK_OF != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    STOPPED HERE

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read 
    STK_WORD != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read parser.tokens . read
    parser.tmp read parser.idx . read
    1 - (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.current . read slmtoken.stop .

    parser.tmp read parser.current . read slmtoken.value . read 
    (ofdata.new)

    (slmnode.new)

    parser.startstack read seq.popaddr disc disc

    ret
  end

  push proc parsecase 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc
    
    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read 
    STK_CASE != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read 
    STK_CONST_NUMBER != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read parser.tokens . read
    parser.tmp read parser.idx . read
    1 - (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.current . read slmtoken.stop .

    parser.tmp read parser.current . read slmtoken.value . read 
    (casedata.new)

    (slmnode.new)

    parser.startstack read seq.popaddr disc disc

    ret
  end

  push proc parsecomment 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_COMMENT != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read parser.tokens . read
    parser.tmp read parser.idx . read
    (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.current . read slmtoken.stop .
    
    (commentdata.new)

    (slmnode.new)

    parser.startstack read seq.popaddr disc disc

    ret
  end

  push proc parseif 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_IF != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read parser.tokens . read 0 (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.tokens . read (dlist.last) slmtoken.stop .
    
    NULL
    0
    0
    BNK_IF
    NULL
    (blockdata.new)
  
    do
      NULL
      parser.inblock read ()

      copy NULL != if [ swap covr (blockdata.append) swap ]
    end
    swap disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ disc disc disc NULL ret ]

    (slmnode.new)

    parser.tmp read parser.current . read slmtoken.type . read
    STK_END != if [
      disc
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.startstack read seq.popaddr disc disc

    ret
  end

  push proc parseswitch 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_SWITCH != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read parser.tokens . read 0 (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.tokens . read (dlist.last) slmtoken.stop .
    
    NULL
    0
    0
    BNK_SWITCH
    NULL
    (blockdata.new)
  
    do
      NULL
      parser.inblock read ()
      copy NULL == if [ disc (parser.parsecase) ]

      copy NULL != if [ swap covr (blockdata.append) swap ]
    end
    swap disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ disc disc disc NULL ret ]

    (slmnode.new)

    parser.tmp read parser.current . read slmtoken.type . read
    STK_END != if [
      disc
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.startstack read seq.popaddr disc disc

    ret
  end

  push proc parsesim 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_SIM != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read parser.tokens . read 0 (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.tokens . read (dlist.last) slmtoken.stop .
    
    NULL
    0
    0
    BNK_SIM
    NULL
    (blockdata.new)
  
    do
      NULL
      parser.inblock read ()

      copy NULL != if [ swap covr (blockdata.append) swap ]
    end
    swap disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ disc disc disc NULL ret ]

    (slmnode.new)

    parser.tmp read parser.current . read slmtoken.type . read
    STK_END != if [
      disc
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.startstack read seq.popaddr disc disc

    ret
  end

  push proc parsedo 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_DO != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read parser.tokens . read 0 (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.tokens . read (dlist.last) slmtoken.stop .
    
    NULL
    0
    0
    BNK_DO
    NULL
    (blockdata.new)
  
    do
      NULL
      parser.inblock read ()

      copy NULL != if [ swap covr (blockdata.append) swap ]
    end
    swap disc
    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ disc disc disc NULL ret ]

    (slmnode.new)

    parser.tmp read parser.current . read slmtoken.type . read
    STK_END != if [
      disc
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.startstack read seq.popaddr disc disc

    ret
  end

  var procname int.SIZE
  var procin int.SIZE
  var procout int.SIZE
  var prockind int.SIZE

  push proc parseproc 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.prockind PNK_OPER put disc

    parser.tmp read parser.current . read slmtoken.type . read
    STK_HEAD == if [
      parser.prockind PNK_OHEAD put disc
      parser.tmp read (parser.advance) disc
    ]
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_UNSAFE == if [
      parser.prockind PNK_OUNSAFE put disc
      parser.tmp read (parser.advance) disc
    ]
    parser.tmp read parser.current . read NULL == if [ NULL ret ]
    
    parser.tmp read parser.current . read slmtoken.type . read
    STK_OPER == if [
      parser.prockind copy read PNK_OPER + put disc
      parser.tmp read (parser.advance) disc
    ]
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_PUSH == if [
      parser.prockind copy read PNK_PUSH + put disc
      parser.tmp read (parser.advance) disc
    ]
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_PROC != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_WORD != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.procname
    parser.tmp read parser.current . read slmtoken.value . read
    put disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_CONST_NUMBER != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.procin
    parser.tmp read parser.current . read slmtoken.value . read
    put disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_CONST_NUMBER != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.procout
    parser.tmp read parser.current . read slmtoken.value . read
    put disc

    parser.tmp read parser.tokens . read 0 (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.tokens . read (dlist.last) slmtoken.stop .
  
    parser.procname read
    parser.procin read
    parser.procout read
    BNK_PROC
    parser.prockind read
    (blockdata.new)

    copy blockdata.blockmisc . read copy PNK_OHEAD < ! swap PNK_PHEAD > ! && if
      swap disc
      (slmnode.new)
      
      parser.startstack read seq.popaddr disc disc

      ret
    end
 
    do
      NULL
      parser.inblock read ()

      copy NULL != if [ swap covr (blockdata.append) swap ]
    end
    swap disc

    (slmnode.new)

    copy slmnode.data . read blockdata.blockmisc . read
    copy PNK_OHEAD < swap PNK_PHEAD > || if
      parser.tmp read (parser.advance) disc
      parser.tmp read parser.current . read NULL == if [ disc NULL ret ]

      parser.tmp read parser.current . read slmtoken.type . read
      STK_END != if [
        disc
        parser.tmp read parser.idx .
        parser.startstack read seq.popaddr read swap disc
        put disc
        NULL ret
      ]
    end
    
    parser.startstack read seq.popaddr disc disc

    ret
  end

  push proc parseinside 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read parser.tokens . read 0 (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.tokens . read (dlist.last) slmtoken.stop .
    
    NULL
    0
    0
    BNK_SIM
    NULL
    (blockdata.new)
  
    do
      NULL
      parser.inblock read ()

      copy NULL != if [ swap covr (blockdata.append) swap ]
    end
    swap disc

    (slmnode.new)

    parser.startstack read seq.popaddr disc disc

    ret
  end

  push proc parselambda 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_LAMBDA != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_CONST_NUMBER != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.procin
    parser.tmp read parser.current . read slmtoken.value . read
    put disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_CONST_NUMBER != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.procout
    parser.tmp read parser.current . read slmtoken.value . read
    put disc

    parser.tmp read parser.tokens . read 0 (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.tokens . read (dlist.last) slmtoken.stop .
  
    NULL
    parser.procin read
    parser.procout read
    BNK_LAMBDA
    parser.prockind read
    (blockdata.new)
  
    do
      NULL
      parser.inblock read ()

      copy NULL != if [ swap covr (blockdata.append) swap ]
    end
    swap disc
    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ disc disc disc NULL ret ]

    (slmnode.new)

    parser.tmp read parser.current . read slmtoken.type . read
    STK_END != if [
      disc
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.startstack read seq.popaddr disc disc

    ret
  end

  push proc parsenamed 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_WORD != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.procname
    parser.tmp read parser.current . read slmtoken.value . read
    put disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_NAMED != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_CONST_NUMBER != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.procin
    parser.tmp read parser.current . read slmtoken.value . read
    put disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_CONST_NUMBER != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.procout
    parser.tmp read parser.current . read slmtoken.value . read
    put disc

    parser.tmp read parser.tokens . read 0 (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.tokens . read (dlist.last) slmtoken.stop .
  
    parser.procname read
    parser.procin read
    parser.procout read
    BNK_PLAMBDA
    parser.prockind read
    (blockdata.new)
  
    do
      NULL
      parser.inblock read ()

      copy NULL != if [ swap covr (blockdata.append) swap ]
    end
    swap disc
    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ disc disc disc NULL ret ]

    (slmnode.new)

    parser.tmp read parser.current . read slmtoken.type . read
    STK_END != if [
      disc
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.startstack read seq.popaddr disc disc

    ret
  end

  push proc parseenum 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_ENUM != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read parser.tokens . read 0 (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.tokens . read (dlist.last) slmtoken.stop .
    
    NULL
    0
    0
    BNK_ENUM
    NULL
    (blockdata.new)
  
    do
      (parser.parseword)
      copy NULL == if [ disc (parser.parsenum) ]

      copy NULL != if [ swap covr (blockdata.append) swap ]
    end
    swap disc
    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ disc disc disc NULL ret ]

    (slmnode.new)

    parser.tmp read parser.current . read slmtoken.type . read
    STK_END != if [
      disc
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.startstack read seq.popaddr disc disc

    ret
  end

  var varname int.SIZE

  push proc parseprop 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_PROP != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_WORD != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.varname
    parser.tmp read parser.current . read slmtoken.value . read
    put disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    NULL
    parser.tmp read parser.current . read slmtoken.type . read
    STK_WORD == if [
      disc
      parser.tmp read parser.tokens . read
      parser.tmp read parser.idx . read
      1 - (dlist.ptrat) slmtoken.start .
      parser.tmp read parser.current . read slmtoken.stop .

      parser.varname read
      CNK_WORD
      parser.tmp read parser.current . read slmtoken.value . read
      (propdata.new)

      (slmnode.new)

      parser.startstack read seq.popaddr disc disc

      ret
    ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_CONST_NUMBER == if [
      disc
      parser.tmp read parser.tokens . read
      parser.tmp read parser.idx . read
      1 - (dlist.ptrat) slmtoken.start .
      parser.tmp read parser.current . read slmtoken.stop .
      
      parser.varname read
      CNK_NUMBER
      parser.tmp read parser.current . read slmtoken.value . read
      str.data . cstr.int
      (propdata.new)

      (slmnode.new)

      parser.startstack read seq.popaddr disc disc
      
      ret
    ]
    parser.tmp read parser.idx .
    parser.startstack read seq.popaddr read swap disc
    put disc

    ret
  end

  push proc parseconst 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_CONST != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_WORD != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.varname
    parser.tmp read parser.current . read slmtoken.value . read
    put disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    NULL
    parser.tmp read parser.current . read slmtoken.type . read
    STK_WORD == if [
      disc
      parser.tmp read parser.tokens . read
      parser.tmp read parser.idx . read
      1 - (dlist.ptrat) slmtoken.start .
      parser.tmp read parser.current . read slmtoken.stop .

      parser.varname read
      CNK_WORD
      parser.tmp read parser.current . read slmtoken.value . read
      (defdata.new)

      (slmnode.new)

      parser.startstack read seq.popaddr disc disc
      
      ret
    ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_CONST_NUMBER == if [
      disc
      parser.tmp read parser.tokens . read
      parser.tmp read parser.idx . read
      1 - (dlist.ptrat) slmtoken.start .
      parser.tmp read parser.current . read slmtoken.stop .
      
      parser.varname read
      CNK_NUMBER
      parser.tmp read parser.current . read slmtoken.value . read
      (defdata.new)

      (slmnode.new)

      parser.startstack read seq.popaddr disc disc
      
      ret
    ]
    parser.tmp read parser.idx .
    parser.startstack read seq.popaddr read swap disc
    put disc

    ret
  end

  push proc parsevar 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_VAR != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_WORD != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.varname
    parser.tmp read parser.current . read slmtoken.value . read
    put disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    NULL
    parser.tmp read parser.current . read slmtoken.type . read
    STK_WORD == if [
      disc
      parser.tmp read parser.tokens . read
      parser.tmp read parser.idx . read
      1 - (dlist.ptrat) slmtoken.start .
      parser.tmp read parser.current . read slmtoken.stop .

      parser.varname read
      CNK_WORD
      parser.tmp read parser.current . read slmtoken.value . read
      (vardata.new)

      (slmnode.new)

      parser.startstack read seq.popaddr disc disc
      
      ret
    ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_CONST_NUMBER == if [
      disc
      parser.tmp read parser.tokens . read
      parser.tmp read parser.idx . read
      1 - (dlist.ptrat) slmtoken.start .
      parser.tmp read parser.current . read slmtoken.stop .
      
      parser.varname read
      CNK_NUMBER
      parser.tmp read parser.current . read slmtoken.value . read
      str.data . cstr.int
      (vardata.new)

      (slmnode.new)

      parser.startstack read seq.popaddr disc disc
      
      ret
    ]

    parser.tmp read parser.idx .
    parser.startstack read seq.popaddr read swap disc
    put disc

    ret
  end

  var classname int.SIZE

  push proc parseclass 0 1
    parser.startstack read
    parser.tmp read parser.idx . read
    seq.pushint disc

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]

    parser.tmp read parser.current . read slmtoken.type . read
    STK_CLASS != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ NULL ret ]
    
    parser.tmp read parser.current . read slmtoken.type . read
    STK_WORD != if [
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.classname
    parser.tmp read parser.current . read slmtoken.value . read
    put disc

    parser.tmp read parser.tokens . read 0 (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.tokens . read (dlist.last) slmtoken.stop .
    
    parser.classname read
    0
    0
    BNK_CLASS
    NULL
    (blockdata.new)
  
    do
      (parser.parseproc)
      copy NULL == if [ disc (parser.parsecomment) ]
      copy NULL == if [ disc (parser.parseenum) ]
      copy NULL == if [ disc (parser.parseof) ]
      copy NULL == if [ disc (parser.parseprop) ]
      copy NULL == if [ disc (parser.parseconst) ]
      copy NULL == if [ disc (parser.parsevar) ]

      copy NULL != if [ swap covr (blockdata.append) swap ]
    end
    swap disc
    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL == if [ disc disc disc NULL ret ]

    (slmnode.new)

    parser.tmp read parser.current . read slmtoken.type . read
    STK_END != if [
      (slmnode.print)
      parser.tmp read parser.idx .
      parser.startstack read seq.popaddr read swap disc
      put disc
      NULL ret
    ]

    parser.startstack read seq.popaddr disc disc

    ret
  end

  push proc parsefile 0 1
    parser.tmp read parser.tokens . read 0 (dlist.ptrat) slmtoken.start .
    parser.tmp read parser.tokens . read (dlist.last) slmtoken.stop .
    
    parser.tmp read parser.tokens . read 0 (dlist.ptrat) slmtoken.start . filepos.filename . read
    (filedata.new)

    do
      (parser.parseinc)
      copy NULL == if [ disc (parser.parseclass) ]
      copy NULL == if [ disc (parser.parsecomment) ]
      copy NULL == if [ disc (parser.parseproc) ]
      copy NULL == if [ disc (parser.parsevar) ]
      copy NULL == if [ disc (parser.parseconst) ]
      copy NULL == if [ disc (parser.parseenum) ]
      copy NULL == if [ disc (parser.parseasm) ]

      copy NULL != if [ swap covr (filedata.append) swap ]
    end
    swap disc

    (slmnode.new)

    ret
  end

  push proc parseinblock 1 1
    copy NULL == if disc (parser.parsenamed) end
    copy NULL == if disc (parser.parsenum) end
    copy NULL == if disc (parser.parsecall) end
    copy NULL == if disc (parser.parsecomment) end
    copy NULL == if disc (parser.parseintr) end
    copy NULL == if disc (parser.parseword) end
    copy NULL == if disc (parser.parseif) end
    copy NULL == if disc (parser.parseswitch) end
    copy NULL == if disc (parser.parselambda) end
    copy NULL == if disc (parser.parsesim) end
    copy NULL == if disc (parser.parsedo) end
    copy NULL == if disc (parser.parsestring) end
    copy NULL == if disc (parser.parsesstring) end
    copy NULL == if disc (parser.parseasm) end
    copy NULL == if disc (parser.parsevar) end

    ret
  end

  push proc run 1 1
    "[PRS] " cstr.print
    copy parser.tokens . read (dlist.len)
    int.cstr cstr.print
    " tokens" cstr.println

    parser.startstack int.SIZE 2048 seq.new put disc

    parser.inblock parser.parseinblock put disc

    parser.tmp swap put disc
    (parser.parsefile)
    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL != if
      parser.tmp read parser.current . read (slmtoken.print) disc cstr.cr
      1 quit
    end
    parser.tmp read (parser.free)

    ret
  end

  push proc runinside 1 1
    parser.startstack int.SIZE 2048 seq.new put disc

    parser.inblock parser.parseinblock put disc

    parser.tmp swap put disc
    (parser.parseinside)
    parser.tmp read (parser.advance) disc
    parser.tmp read parser.current . read NULL != if
      parser.tmp read parser.current . read (slmtoken.print) disc cstr.cr
      1 quit
    end
    parser.tmp read (parser.free)

    ret
  end
end
