inc "compiler/parser.slh"

class parserresult
  oper proc register 2 1
    var self 8
    var other 8

    other swap put disc
    self swap put disc

    other read NULL != if
      other read parserresult.error @ NULL != if
        self read parserresult.error @
        NULL != if
          self read parserresult.error @
          heap.free
        end

        self read parserresult.error .
        other read parserresult.error @
        put disc
      end
      other read parserresult.node @

      ret
    end

    NULL

    ret
  end

  oper proc success 2 1
    var self 8
    var node 8

    node swap put disc
    self swap put disc

    self read parserresult.node .
    node read
    put disc

    self read

    ret
  end

  oper proc failure 2 1
    var self 8
    var err 8

    err swap put disc
    self swap put disc

    self read parserresult.error .
    err read
    put disc

    self read

    ret
  end
end

class parser
  oper proc new 1 1
    var tmp 8

    tmp parser.SIZE heap.zalloc put disc

    tmp read parser.tokens . swap put disc
    tmp read parser.idx . -1 put disc

    tmp read

    ret
  end

  oper proc free 1 0
    copy parser.tokens @ dlist.free
    heap.free

    ret
  end

  oper proc advance 1 1
    var tmp 8

    tmp swap put disc

    tmp read parser.idx .
    copy read 1 +
    copy 0 < if disc NULL end
    put disc

    tmp read parser.current . NULL put disc

    tmp read parser.idx @
    tmp read parser.tokens @ dlist.len < if
      tmp read parser.current .
      tmp read parser.tokens @
      tmp read parser.idx @
      dlist.getptr
      put disc
    end

    tmp read

    ret
  end

  oper proc run 1 1
    parser.running swap put disc

    parser.parsefile

    copy parserresult.error @ NULL != if
      copy parserresult.error @ error.eval
    end

    copy parserresult.node @
    swap heap.free

    parser.running read parser.advance disc
    parser.running read parser.current @ NULL != if
      {TODO: ERROR}

      parser.running read parser.current @ slmtoken.print disc
      cstr.cr
      1 quit
    end
    parser.running read parser.free

    ret
  end

  oper proc runinside 1 1
    "TODO parser.runinside" cstr.println
    1 quit

    ret
  end

  oper proc subintr 2 1
    parser.running read parser.current @ slmtoken.type @
    == if
      parser.running read parser.current @ slmtoken.start . swap
      parser.running read parser.current @ slmtoken.stop . swap

      intrdata.new
      slmnode.new

      ret
    end
    disc

    NULL

    ret
  end

  oper proc asserttype 1 1
    parser.running read parser.advance disc
    parser.running read parser.current @ NULL == if disc bool.false ret end

    parser.running read parser.current @ slmtoken.type @ ==

    ret
  end

  oper proc setuperr 2 1
    var msg 8
    var start 8

    start swap put disc
    msg swap put disc

    parser.running read parser.idx .
    copy read 2 - put disc

    parser.running read
    parser.advance disc

    parser.running read parser.tokens @
    start read dlist.getptr copy NULL == if
      disc parser.running read parser.current .
    end
    read slmtoken.start .
    parser.running read parser.current @ slmtoken.stop .
    error.EK_SYNTAX
    msg read

    error.new

    ret
  end

  oper proc parseintr 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    parser.running read parser.advance disc
    parser.running read parser.current @ NULL == if result read ret end

    INK_COPY STK_COPY parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_COVR STK_COVR parser.subintr copy NULL != if result read swap parserresult.success ret end disc 
    INK_DISC STK_DISC parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_AND STK_AND parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_OR STK_OR parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_NOT STK_NOT parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_INV STK_INV parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_READ STK_READ parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_READC STK_READC parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_PUT STK_PUT parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_PUTC STK_PUTC parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_SWAP STK_SWAP parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_ADD STK_ADD parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_SUB STK_SUB parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_MUL STK_MUL parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_DIVMOD STK_DIVMOD parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_ACCESS STK_ACCESS parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_REFACCESS STK_REFACCESS parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_EQ STK_EQ parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_NEQ STK_NEQ parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_LT STK_LT parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_GT STK_GT parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_BRK STK_BRK parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_RETURN STK_RET parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_ARGV STK_ARGV parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_ARGC STK_ARGC parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_ENVP STK_ENVP parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_QUIT STK_QUIT parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_SYS0 STK_SYS0 parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_SYS1 STK_SYS1 parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_SYS2 STK_SYS2 parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_SYS3 STK_SYS3 parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_SYS4 STK_SYS4 parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_SYS5 STK_SYS5 parser.subintr copy NULL != if result read swap parserresult.success ret end disc
    INK_SYS6 STK_SYS6 parser.subintr copy NULL != if result read swap parserresult.success ret end disc

    parser.running read parser.idx .
    start read
    put disc

    result read

    ret
  end

  oper proc parsenum 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_CONST_NUMBER parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read
    copy 0 < if disc 0 end
    dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop .

    CNK_NUMBER
    parser.running read parser.current @ slmtoken.value @
    constdata.new

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parsestring 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc
  
    STK_CONST_STRING parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read
    copy 0 < if disc 0 end
    dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop .

    CNK_STRING
    parser.running read parser.current @ slmtoken.value @
    constdata.new

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parsesstring 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc
  
    STK_CONST_SSTRING parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read
    copy 0 < if disc 0 end
    dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop .

    CNK_SSTRING
    parser.running read parser.current @ slmtoken.value @
    constdata.new

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parseword 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_WORD parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read
    copy 0 < if disc 0 end
    dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop .

    CNK_WORD
    parser.running read parser.current @ slmtoken.value @
    constdata.new

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parsecall 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc
  
    STK_PAREN parser.asserttype ! if
      result read

      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read
    copy 0 < if disc 0 end
    dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop .

    parser.running read parser.current @ slmtoken.value @
    calldata.new

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parseinc 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_INC parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    STK_CONST_STRING parser.asserttype ! if
      result read
      "Expected file for include" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read
    copy 0 < if disc 0 end
    dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop .

    parser.running read parser.current @ slmtoken.value @
    incdata.new

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parseasm 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_ASM parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    STK_CONST_STRING parser.asserttype ! if
      result read
      "Expected string for assembly" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read
    copy 0 < if disc 0 end
    dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop .

    parser.running read parser.current @ slmtoken.value @
    asmdata.new

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parseof 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_OF parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    STK_WORD parser.asserttype ! if
      result read
      "Expected class name for of" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read
    copy 0 < if disc 0 end
    dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop .

    parser.running read parser.current @ slmtoken.value @
    ofdata.new

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parseprop 0 1
    var result 8
    var start 8

    var name 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_PROP parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    STK_WORD parser.asserttype ! if
      result read
      "Expected name for prop" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    name
    parser.running read parser.current @ slmtoken.value @
    put disc

    STK_WORD parser.asserttype if
      parser.running read parser.tokens @ start read
      copy 0 < if disc 0 end
      dlist.getptr slmtoken.start .
      parser.running read parser.current @ slmtoken.stop .

      name read
      CNK_WORD
      parser.running read parser.current @ slmtoken.value @
      propdata.new

      slmnode.new
      result read swap
      parserresult.success

      ret
    end

    parser.running read parser.current @ slmtoken.type @
    STK_CONST_NUMBER == if
      parser.running read parser.tokens @ start read
      copy 0 < if disc 0 end
      dlist.getptr slmtoken.start .
      parser.running read parser.current @ slmtoken.stop .

      name read
      CNK_NUMBER
      parser.running read parser.current @ slmtoken.value @
      propdata.new

      slmnode.new
      result read swap
      parserresult.success

      ret
    end

    result read
    "Expected value for prop" start read parser.setuperr
    parserresult.failure
    
    parser.running read parser.idx .
    start read
    put disc
    
    ret
  end

  oper proc parseconst 0 1
    var result 8
    var start 8

    var name 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_CONST parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    STK_WORD parser.asserttype ! if
      result read
      "Expected word for const" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    name
    parser.running read parser.current @ slmtoken.value @
    put disc

    STK_WORD parser.asserttype if
      parser.running read parser.tokens @ start read dlist.getptr slmtoken.start .
      parser.running read parser.current @ slmtoken.stop .

      name read
      CNK_WORD
      parser.running read parser.current @ slmtoken.value @
      defdata.new

      slmnode.new
      result read swap
      parserresult.success

      ret
    end

    parser.running read parser.current @ slmtoken.type @
    STK_CONST_NUMBER == if
      parser.running read parser.tokens @ start read dlist.getptr slmtoken.start .
      parser.running read parser.current @ slmtoken.stop .

      name read
      CNK_NUMBER
      parser.running read parser.current @ slmtoken.value @
      defdata.new

      slmnode.new
      result read swap
      parserresult.success

      ret
    end

    result read
    "Expected value for const" start read parser.setuperr
    parserresult.failure
    
    parser.running read parser.idx .
    start read
    put disc
    
    ret
  end

  oper proc parsevar 0 1
    var result 8
    var start 8

    var name 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_VAR parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    STK_WORD parser.asserttype ! if
      result read
      "Expected name for var" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    name
    parser.running read parser.current @ slmtoken.value @
    put disc

    STK_WORD parser.asserttype if
      parser.running read parser.tokens @ start read dlist.getptr slmtoken.start .
      parser.running read parser.current @ slmtoken.stop .

      name read
      CNK_WORD
      parser.running read parser.current @ slmtoken.value @
      vardata.new

      slmnode.new
      result read swap
      parserresult.success

      ret
    end

    parser.running read parser.current @ slmtoken.type @
    STK_CONST_NUMBER == if
      parser.running read parser.tokens @ start read dlist.getptr slmtoken.start .
      parser.running read parser.current @ slmtoken.stop .

      name read
      CNK_NUMBER
      parser.running read parser.current @ slmtoken.value @
      vardata.new

      slmnode.new
      result read swap
      parserresult.success

      ret
    end

    result read
    "Expected value for var" start read parser.setuperr
    parserresult.failure
    
    parser.running read parser.idx .
    start read
    put disc
    
    ret
  end

  oper proc parsecomment 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_COMMENT parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop .

    commentdata.new

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parseif 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_IF parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop . {TODO: update}

    NULL
    0
    0
    BNK_IF
    NULL
    blockdata.new

    do
      NULL
      copy NULL == if disc result read parser.parsenum parserresult.register end
      copy NULL == if disc result read parser.parsecall parserresult.register end
      copy NULL == if disc result read parser.parsecomment parserresult.register end
      copy NULL == if disc result read parser.parseintr parserresult.register end
      copy NULL == if disc result read parser.parseword parserresult.register end
      copy NULL == if disc result read parser.parseif parserresult.register end
      copy NULL == if disc result read parser.parselambda parserresult.register end
      copy NULL == if disc result read parser.parsesim parserresult.register end
      copy NULL == if disc result read parser.parsedo parserresult.register end
      copy NULL == if disc result read parser.parsestring parserresult.register end
      copy NULL == if disc result read parser.parsesstring parserresult.register end
      copy NULL == if disc result read parser.parseasm parserresult.register end
      copy NULL == if disc result read parser.parsevar parserresult.register end

      result read parserresult.error @ NULL != if
        result read parserresult.error @ error.eval
      end

      copy NULL != if
        blockdata.append 1
      end
    end

    STK_END parser.asserttype ! if
      disc disc disc

      result read
      "Expected end for if" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parsesim 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_SIM parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop . {TODO: update}

    NULL
    0
    0
    BNK_SIM
    NULL
    blockdata.new

    do
      NULL
      copy NULL == if disc result read parser.parsenum parserresult.register end
      copy NULL == if disc result read parser.parsecall parserresult.register end
      copy NULL == if disc result read parser.parsecomment parserresult.register end
      copy NULL == if disc result read parser.parseintr parserresult.register end
      copy NULL == if disc result read parser.parseword parserresult.register end
      copy NULL == if disc result read parser.parseif parserresult.register end
      copy NULL == if disc result read parser.parselambda parserresult.register end
      copy NULL == if disc result read parser.parsesim parserresult.register end
      copy NULL == if disc result read parser.parsedo parserresult.register end
      copy NULL == if disc result read parser.parsestring parserresult.register end
      copy NULL == if disc result read parser.parsesstring parserresult.register end
      copy NULL == if disc result read parser.parseasm parserresult.register end
      copy NULL == if disc result read parser.parsevar parserresult.register end

      result read parserresult.error @ NULL != if
        result read parserresult.error @ error.eval
      end

      copy NULL != if
        blockdata.append 1
      end
    end

    STK_END parser.asserttype ! if
      disc disc disc

      result read
      "Expected end for sim" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parsedo 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_DO parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop . {TODO: update}

    NULL
    0
    0
    BNK_DO
    NULL
    blockdata.new

    do
      NULL
      copy NULL == if disc result read parser.parsenum parserresult.register end
      copy NULL == if disc result read parser.parsecall parserresult.register end
      copy NULL == if disc result read parser.parsecomment parserresult.register end
      copy NULL == if disc result read parser.parseintr parserresult.register end
      copy NULL == if disc result read parser.parseword parserresult.register end
      copy NULL == if disc result read parser.parseif parserresult.register end
      copy NULL == if disc result read parser.parselambda parserresult.register end
      copy NULL == if disc result read parser.parsesim parserresult.register end
      copy NULL == if disc result read parser.parsedo parserresult.register end
      copy NULL == if disc result read parser.parsestring parserresult.register end
      copy NULL == if disc result read parser.parsesstring parserresult.register end
      copy NULL == if disc result read parser.parseasm parserresult.register end
      copy NULL == if disc result read parser.parsevar parserresult.register end

      result read parserresult.error @ NULL != if
        result read parserresult.error @ error.eval
      end

      copy NULL != if
        blockdata.append 1
      end
    end

    STK_END parser.asserttype ! if
      disc disc disc

      result read
      "Expected end for do" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parseproc 0 1
    var result 8
    var start 8

    var type 8
    var name 8
    var in 8
    var out 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    type PNK_OPER put disc

    parser.running read parser.advance disc
    parser.running read parser.current @ NULL == if result read ret end

    parser.running read parser.current @ slmtoken.type @
    STK_HEAD == if
      type PNK_OHEAD put disc
      parser.running read parser.advance disc
    end

    parser.running read parser.current @ NULL == if result read ret end

    parser.running read parser.current @ slmtoken.type @
    STK_UNSAFE == if
      type PNK_OUNSAFE put disc
      parser.running read parser.advance disc
    end

    parser.running read parser.current @ NULL == if result read ret end
    
    parser.running read parser.current @ slmtoken.type @
    STK_OPER == if
      type copy read PNK_OPER + put disc
      parser.running read parser.advance disc
    end

    parser.running read parser.current @ NULL == if result read ret end
    
    parser.running read parser.current @ slmtoken.type @
    STK_PUSH == if
      type copy read PNK_PUSH + put disc
      parser.running read parser.advance disc
    end

    parser.running read parser.current @ NULL == if result read ret end

    parser.running read parser.current @ slmtoken.type @
    STK_PROC != if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    STK_WORD parser.asserttype ! if
      result read
      "Expected name for proc" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    name
    parser.running read parser.current @ slmtoken.value @
    put disc

    STK_CONST_NUMBER parser.asserttype ! if
      result read
      "Expected in value for proc" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    in
    parser.running read parser.current @ slmtoken.value @
    put disc

    STK_CONST_NUMBER parser.asserttype ! if
      result read
      "Expected out value for proc" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    out
    parser.running read parser.current @ slmtoken.value @
    put disc

    parser.running read parser.tokens @ start read dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop . {TODO: update}

    name read
    in read
    out read
    BNK_PROC
    type read
    blockdata.new

    copy blockdata.blockmisc @ copy PNK_OHEAD < ! swap PNK_PHEAD > ! && if
      slmnode.new
      result read swap
      parserresult.success

      ret
    end

    do
      NULL
      copy NULL == if disc result read parser.parsenamed parserresult.register end
      copy NULL == if disc result read parser.parsenum parserresult.register end
      copy NULL == if disc result read parser.parsecall parserresult.register end
      copy NULL == if disc result read parser.parsecomment parserresult.register end
      copy NULL == if disc result read parser.parseintr parserresult.register end
      copy NULL == if disc result read parser.parseword parserresult.register end
      copy NULL == if disc result read parser.parseif parserresult.register end
      copy NULL == if disc result read parser.parselambda parserresult.register end
      copy NULL == if disc result read parser.parsesim parserresult.register end
      copy NULL == if disc result read parser.parsedo parserresult.register end
      copy NULL == if disc result read parser.parsestring parserresult.register end
      copy NULL == if disc result read parser.parsesstring parserresult.register end
      copy NULL == if disc result read parser.parseasm parserresult.register end
      copy NULL == if disc result read parser.parsevar parserresult.register end

      result read parserresult.error @ NULL != if
        result read parserresult.error @ error.eval
      end

      copy NULL != if
        blockdata.append 1
      end
    end


    STK_END parser.asserttype ! if
      disc disc disc

      result read
      "Expected end for non head proc" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parselambda 0 1
    var result 8
    var start 8

    var in 8
    var out 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_LAMBDA parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    STK_CONST_NUMBER parser.asserttype ! if
      result read
      "Expected in value for lambda" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    in
    parser.running read parser.current @ slmtoken.value @
    put disc

    STK_CONST_NUMBER parser.asserttype ! if
      result read
      "Expected out value for lambda" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    out
    parser.running read parser.current @ slmtoken.value @
    put disc

    parser.running read parser.tokens @ start read dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop . {TODO: update}

    NULL
    in read
    out read
    BNK_LAMBDA
    NULL    
    blockdata.new

    do
      NULL
      copy NULL == if disc result read parser.parsenum parserresult.register end
      copy NULL == if disc result read parser.parsecall parserresult.register end
      copy NULL == if disc result read parser.parsecomment parserresult.register end
      copy NULL == if disc result read parser.parseintr parserresult.register end
      copy NULL == if disc result read parser.parseword parserresult.register end
      copy NULL == if disc result read parser.parseif parserresult.register end
      copy NULL == if disc result read parser.parselambda parserresult.register end
      copy NULL == if disc result read parser.parsesim parserresult.register end
      copy NULL == if disc result read parser.parsedo parserresult.register end
      copy NULL == if disc result read parser.parsestring parserresult.register end
      copy NULL == if disc result read parser.parsesstring parserresult.register end
      copy NULL == if disc result read parser.parseasm parserresult.register end
      copy NULL == if disc result read parser.parsevar parserresult.register end

      result read parserresult.error @ NULL != if
        result read parserresult.error @ error.eval
      end

      copy NULL != if
        blockdata.append 1
      end
    end

    STK_END parser.asserttype ! if
      disc disc disc

      result read
      "Expected end for lambda" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parsenamed 0 1
    var result 8
    var start 8

    var name 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_WORD parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    name
    parser.running read parser.current @ slmtoken.value @
    put disc

    STK_NAMED parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop . {TODO: update}

    name read
    0
    0
    BNK_PLAMBDA
    0
    blockdata.new
    do
      NULL
      copy NULL == if disc result read parser.parsenum parserresult.register end
      copy NULL == if disc result read parser.parsecall parserresult.register end
      copy NULL == if disc result read parser.parsecomment parserresult.register end
      copy NULL == if disc result read parser.parseintr parserresult.register end
      copy NULL == if disc result read parser.parseword parserresult.register end
      copy NULL == if disc result read parser.parseif parserresult.register end
      copy NULL == if disc result read parser.parselambda parserresult.register end
      copy NULL == if disc result read parser.parsesim parserresult.register end
      copy NULL == if disc result read parser.parsedo parserresult.register end
      copy NULL == if disc result read parser.parsestring parserresult.register end
      copy NULL == if disc result read parser.parsesstring parserresult.register end
      copy NULL == if disc result read parser.parseasm parserresult.register end
      copy NULL == if disc result read parser.parsevar parserresult.register end

      result read parserresult.error @ NULL != if
        result read parserresult.error @ error.eval
      end

      copy NULL != if
        blockdata.append 1
      end
    end

    STK_END parser.asserttype ! if
      disc disc disc

      result read
      "Expected end for proc lambda" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parseenum 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_ENUM parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @ start read dlist.getptr slmtoken.start .
    parser.running read parser.current @ slmtoken.stop . {TODO: update}

    NULL
    0
    0
    BNK_ENUM
    NULL
    blockdata.new

    do
      parser.parseword parserresult.node @
      copy NULL == if disc parser.parsenum parserresult.node @ end

      copy NULL != if
        blockdata.append 1
      end
    end

    STK_END parser.asserttype ! if
      disc disc disc

      result read
      "Expected end for enum" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    slmnode.new
    result read swap
    parserresult.success

    ret
  end

  oper proc parseclass 0 1
    var result 8
    var start 8

    var name 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    STK_CLASS parser.asserttype ! if
      result read
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    STK_WORD parser.asserttype ! if
      result read
      "Expected name for class" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    name
    parser.running read parser.current @ slmtoken.value @
    put disc

    parser.running read parser.tokens @ start read dlist.getptr slmtoken.start .

    name read
    0
    0
    BNK_CLASS
    NULL
    blockdata.new

    do
      NULL
      copy NULL == if disc result read parser.parseproc parserresult.register end
      copy NULL == if disc result read parser.parsecomment parserresult.register end
      copy NULL == if disc result read parser.parseenum parserresult.register end
      copy NULL == if disc result read parser.parseof parserresult.register end
      copy NULL == if disc result read parser.parseprop parserresult.register end
      copy NULL == if disc result read parser.parseconst parserresult.register end
      copy NULL == if disc result read parser.parsevar parserresult.register end
      copy NULL == if disc result read parser.parseasm parserresult.register end

      result read parserresult.error @ NULL != if
        result read parserresult.error @ error.eval
      end

      copy NULL != if
        blockdata.append 1
      end
    end

    STK_END parser.asserttype ! if
      disc disc

      result read
      "Expected end for class" start read parser.setuperr
      parserresult.failure
      
      parser.running read parser.idx .
      start read
      put disc

      ret
    end

    parser.running read parser.tokens @
    parser.running read parser.idx @ 1 -
    dlist.getptr slmtoken.stop . swap

    slmnode.new
    result read swap
    parserresult.success

    ret
  end
  
  oper proc parsefile 0 1
    var result 8
    var start 8

    result
    parserresult.SIZE heap.zalloc
    put disc
    start
    parser.running read parser.idx @
    put disc

    parser.running read parser.tokens @ 0 dlist.getptr slmtoken.start .

    parser.running read parser.tokens @ 0 dlist.getptr slmtoken.start . filepos.filename @
    filedata.new

    do
      NULL
      copy NULL == if disc result read parser.parsecomment parserresult.register end
      copy NULL == if disc result read parser.parseinc parserresult.register end
      copy NULL == if disc result read parser.parseclass parserresult.register end
      copy NULL == if disc result read parser.parseproc parserresult.register end
      copy NULL == if disc result read parser.parseenum parserresult.register end
      copy NULL == if disc result read parser.parseconst parserresult.register end
      copy NULL == if disc result read parser.parsevar parserresult.register end
      copy NULL == if disc result read parser.parseasm parserresult.register end

      result read parserresult.error @ NULL != if
        result read parserresult.error @ error.eval
      end

      copy NULL != if
        filedata.append 1
      end

      NULL !=
    end

    parser.running read parser.tokens @
    parser.running read parser.idx @ 1 -
    dlist.getptr slmtoken.stop . swap

    slmnode.new
    result read swap
    parserresult.success

    ret
  end
end
