const NULL 0

class str
  prop Size 0
  prop Data 8

  gvar tmpidx 8
 
  proc gettmp 0 1
    var 32 30 +
    str.tmpidx read -

    ret
  end

  proc inctmpidx 0 0
    str.tmpidx 
    str.tmpidx read 1 +
    putc disc

    ret
  end

  proc int 1 1
    do
      10 /
      '0' +
      (str.gettmp)
      swap
      putc disc
      (str.inctmpidx)
      
      copy 0 !=
    end
    disc
    (str.gettmp) 1 +
    
    str.tmpidx 0 putc disc
    ret
  end

  {
  args: pointer
  result: 
  
  prints a string
  }
  proc print 1 0 
    copy read NULL == if [disc ret]
    do
      { read the current char }
      copy
      read
      dump
  
      { increase the address }
      1 +
  
      { read the next address }
      copy
      readc
      
      0 !=
    end
    disc
    ret
  end

  {
  args:
  result:
  
  prints a new line
  }
  proc cr 0 0
    { print new line }
    10
    dump
    ret
  end

  {
  prints
  }
  proc println 1 0
    (str.print)
    (str.cr)
    ret
  end

  {
  args: ptr int
  result: ptr
  
  converts a int to a string
  }
  proc printint 1 0
    (str.int) (str.print) (str.cr)
    
    str.tmpidx 0 putc disc
    ret
  end

  {
  args: ptr int
  result: ptr
  
  converts a int to a hex string
  }
  proc printinthex 1 0
    do
      16 /
      copy 9 > if ['a' 10 - +]
      copy 10 < if ['0' +]
      (str.gettmp)
      swap
      putc disc
      (str.inctmpidx)

      copy 0 !=
    end
    disc
  
    (str.gettmp)
    'x'
    putc disc
    (str.inctmpidx)
  
    (str.gettmp)
    '0'
    putc disc
    (str.inctmpidx)
  
    (str.gettmp) 1 + (str.print)
    str.tmpidx 0 putc disc
    (str.cr)
    ret
  end
  
  proc len 1 1
    copy readc 0 == if [disc 0 ret]
    copy
    do
      1 +
  
      copy readc
    end
    covr -
    swap disc
    ret
  end
  
  {
  args: pointer pointer
  result: int
  
  compares strings, returns 1 if they are not equal
  }
  proc eq 2 1
    covr readc
    covr readc
    != if [disc disc 0 ret]
    1 -
    swap
    1 -
    do
      1 +
      swap
      1 +
      covr readc
      covr readc
      covr 0 == covr 0 == &&
      if [
        disc
        disc
        disc
        disc
        1
        ret
        ]
      covr 0 == covr 0 == ||
      if [
        disc
        disc
        disc
        disc
        0
        ret
      ]
      ==
    end
    disc
    disc
    0
    ret
  end

  {
  args: pointer pointer
  result: 
  
  copy a string from a pointer to another
  }
  proc copy 2 2
    covr
    covr
    do
      covr
      covr
      readc
  
      putc
      disc
  
      swap 1 +
      swap 1 +
      copy readc 0 !=
    end
    0
    putc
    disc
    disc
    ret
  end
  
  {
  }
  proc last 1 1
    1 -
    do
      1 +
      copy readc
      0 !=
    end
    1 -
    readc
  
    ret
  end

  proc clear 1 1
    copy readc 0 == if [ret]
    copy
    do
      copy
      0
      putc
      disc
  
      1 +
      copy readc
    end
    disc
  
    ret
  end
  
  proc concat 2 1
    covr copy (str.len) +
    swap (str.copy) disc disc

    ret
  end

  gvar tempmin 1
  gvar tempmax 1
  
  {
  args: ptr[string]
  returns: int[val]
  
  returns 1 if the string is a number
  }
  proc isnum 1 1
    str.tempmin '0' putc disc
    str.tempmax '9' putc disc
  
    copy copy (str.len) + 1 -
    readc 
    copy 'b' == if [
      str.tempmax '1' putc disc
    ]
    copy 'h' == if [
      str.tempmax 'f' putc disc
    ]
    disc
    copy readc
    '-' == if [1 +]
    do
      copy readc
      copy str.tempmin readc <
      covr str.tempmax readc >
      || if [
        disc
        copy readc 'b' ==  
        covr readc 'h' == ||
        covr (str.len) 1 == &&
        swap disc
        ret
      ]
      disc
  
      1 +
      copy readc
      0 !=
    end
    disc
    1
    ret
  end
  
  gvar tempmul 1
  
  {
  args: ptr[string]
  returns: int[value]
  
  returns the value of a int
  }
  proc tonum 1 1
    copy (str.isnum) ! if [
      copy (str.println)
      "String is not a number" (str.println)
      disc
      -1 quit
    ]
      
    str.tempmul 10 putc disc
    
    copy copy (str.len) +
    copy readc 'b' == if [
      str.tempmul 2 putc disc
    ]
    disc
    
    0
    do
      str.tempmul readc *
      covr readc
      '0' - +
      
      swap 1 +
      swap
  
      covr readc
    end
    swap disc
  
    ret
  end
end

class mem
  gvar tmp 8
  
  proc copy 3 0
    mem.tmp swap put disc
    do
      covr
      covr readc
      putc disc
  
      swap 1 +
      swap 1 +
  
      mem.tmp
      mem.tmp read
      1 - put disc
      mem.tmp read 0 >
    end
    disc
    disc
  
    ret
  end
  
  proc zero 2 0
    mem.tmp swap put disc
    do
      copy
      0
      putc disc
  
      1 +
  
      mem.tmp
      mem.tmp read
      1 - put disc
      mem.tmp read 0 >
    end
    disc
  
    ret
  end
end

