{
slam2
}
inc "compiler/node.sl2"
inc "compiler/lexer.sl2"
inc "compiler/parser.sl2"
inc "compiler/simulator.sl2"
inc "compiler/assembler.sl2"
inc "stdlib/mem.sl2"

proc main 0 0
  1 (os.args)
  bool.false
  (lexer.new) (lexer.run)
  (parser.new) (parser.run)
  "format ELF64\n" (cstr.print)
  "section '.text' executable\n" (cstr.print)
  "public _start\n\n" (cstr.print)
  "print:\n" (cstr.print)
  "    mov r10, rsp\n" (cstr.print)
  "    sub rsp, 8\n" (cstr.print)
  "    mov rsp end, al\n" (cstr.print)
  "    mov edi, 1\n" (cstr.print)
  "    mov rsi, rsp\n" (cstr.print)
  "    mov edx, 1\n" (cstr.print)
  "    mov eax, 1\n" (cstr.print)
  "    syscall\n" (cstr.print)
  "    mov rsp, r10\n" (cstr.print)
  "    ret\n" (cstr.print)
  (assembler.visitnode)

  (int.print)

  ret
end
