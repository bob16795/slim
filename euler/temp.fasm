format ELF64 executable 3
segment readable executable
print:
    mov r10, rsp
    sub rsp, 8
    mov [rsp], al
    mov edi, 1
    mov rsi, rsp
    mov edx, 1
    mov eax, 1
    syscall
    mov rsp, r10
    ret
addr_0:
addr_1:
addr_2:
addr_3:
addr_4:
addr_5:
    ; - proc gettmp 0 1
addr_6:
    push mem+8
addr_7:
    mov qword rax, 30
    push rax
addr_8:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_9:
    push mem+0
addr_10:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_11:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_12:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_13:
addr_14:
    ; - proc inctmpidx 0 0
addr_15:
    push mem+0
addr_16:
    push mem+0
addr_17:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_18:
    mov qword rax, 1
    push rax
addr_19:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_20:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_21:
    pop rax
addr_22:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_23:
addr_24:
    ; - proc int 1 1
addr_25:
addr_26:
    mov qword rax, 10
    push rax
addr_27:
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
addr_28:
    mov qword rax, 48
    push rax
addr_29:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_30:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_31
    jmp addr_6
addr_31:
    pop rax
    pop rbx
    push rax
    push rbx
addr_32:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_33:
    pop rax
addr_34:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_35
    jmp addr_15
addr_35:
    pop rax
    push rax
    push rax
addr_36:
    mov qword rax, 0
    push rax
addr_37:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_38:
    pop rbx
    test rbx, rbx
    jz addr_39
    jmp addr_25
addr_39:
    pop rax
addr_40:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_41
    jmp addr_6
addr_41:
    mov qword rax, 1
    push rax
addr_42:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_43:
    push mem+0
addr_44:
    mov qword rax, 0
    push rax
addr_45:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_46:
    pop rax
addr_47:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_48:
addr_49:
    ; - proc print 1 0
addr_50:
    pop rax
    push rax
    push rax
addr_51:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_52:
    mov qword rax, 0
    push rax
addr_53:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_54:
    pop rbx
    test rbx, rbx
    jz addr_56
addr_55:
addr_55_0:
    pop rax
addr_55_1:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_55_2:
addr_56:
addr_57:
    pop rax
    push rax
    push rax
addr_58:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_59:
    pop rax
    call print
addr_60:
    mov qword rax, 1
    push rax
addr_61:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_62:
    pop rax
    push rax
    push rax
addr_63:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_64:
    mov qword rax, 0
    push rax
addr_65:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_66:
    pop rbx
    test rbx, rbx
    jz addr_67
    jmp addr_56
addr_67:
    pop rax
addr_68:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_69:
addr_70:
    ; - proc cr 0 0
addr_71:
    mov qword rax, 10
    push rax
addr_72:
    pop rax
    call print
addr_73:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_74:
addr_75:
    ; - proc println 1 0
addr_76:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_77
    jmp addr_50
addr_77:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_78
    jmp addr_71
addr_78:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_79:
addr_80:
    ; - proc printint 1 0
addr_81:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_82
    jmp addr_25
addr_82:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_83
    jmp addr_50
addr_83:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_84
    jmp addr_71
addr_84:
    push mem+0
addr_85:
    mov qword rax, 0
    push rax
addr_86:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_87:
    pop rax
addr_88:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_89:
addr_90:
    ; - proc printinthex 1 0
addr_91:
addr_92:
    mov qword rax, 16
    push rax
addr_93:
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
addr_94:
    pop rax
    push rax
    push rax
addr_95:
    mov qword rax, 9
    push rax
addr_96:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_97:
    pop rbx
    test rbx, rbx
    jz addr_99
addr_98:
addr_98_0:
    mov qword rax, 97
    push rax
addr_98_1:
    mov qword rax, 10
    push rax
addr_98_2:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_98_3:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_98_4:
addr_99:
    pop rax
    push rax
    push rax
addr_100:
    mov qword rax, 10
    push rax
addr_101:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_102:
    pop rbx
    test rbx, rbx
    jz addr_104
addr_103:
addr_103_0:
    mov qword rax, 48
    push rax
addr_103_1:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_103_2:
addr_104:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_105
    jmp addr_6
addr_105:
    pop rax
    pop rbx
    push rax
    push rbx
addr_106:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_107:
    pop rax
addr_108:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_109
    jmp addr_15
addr_109:
    pop rax
    push rax
    push rax
addr_110:
    mov qword rax, 0
    push rax
addr_111:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_112:
    pop rbx
    test rbx, rbx
    jz addr_113
    jmp addr_91
addr_113:
    pop rax
addr_114:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_115
    jmp addr_6
addr_115:
    mov qword rax, 120
    push rax
addr_116:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_117:
    pop rax
addr_118:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_119
    jmp addr_15
addr_119:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_120
    jmp addr_6
addr_120:
    mov qword rax, 48
    push rax
addr_121:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_122:
    pop rax
addr_123:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_124
    jmp addr_15
addr_124:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_125
    jmp addr_6
addr_125:
    mov qword rax, 1
    push rax
addr_126:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_127:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_128
    jmp addr_50
addr_128:
    push mem+0
addr_129:
    mov qword rax, 0
    push rax
addr_130:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_131:
    pop rax
addr_132:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_133
    jmp addr_71
addr_133:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_134:
addr_135:
    ; - proc len 1 1
addr_136:
    pop rax
    push rax
    push rax
addr_137:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_138:
    mov qword rax, 0
    push rax
addr_139:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_140:
    pop rbx
    test rbx, rbx
    jz addr_142
addr_141:
addr_141_0:
    pop rax
addr_141_1:
    mov qword rax, 0
    push rax
addr_141_2:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_141_3:
addr_142:
    pop rax
    push rax
    push rax
addr_143:
addr_144:
    mov qword rax, 1
    push rax
addr_145:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_146:
    pop rax
    push rax
    push rax
addr_147:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_148:
    pop rbx
    test rbx, rbx
    jz addr_149
    jmp addr_143
addr_149:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_150:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_151:
    pop rax
    pop rbx
    push rax
    push rbx
addr_152:
    pop rax
addr_153:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_154:
addr_155:
    ; - proc eq 2 1
addr_156:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_157:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_158:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_159:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_160:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_161:
    pop rbx
    test rbx, rbx
    jz addr_163
addr_162:
addr_162_0:
    pop rax
addr_162_1:
    pop rax
addr_162_2:
    mov qword rax, 0
    push rax
addr_162_3:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_162_4:
addr_163:
    mov qword rax, 1
    push rax
addr_164:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_165:
    pop rax
    pop rbx
    push rax
    push rbx
addr_166:
    mov qword rax, 1
    push rax
addr_167:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_168:
addr_169:
    mov qword rax, 1
    push rax
addr_170:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_171:
    pop rax
    pop rbx
    push rax
    push rbx
addr_172:
    mov qword rax, 1
    push rax
addr_173:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_174:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_175:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_176:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_177:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_178:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_179:
    mov qword rax, 0
    push rax
addr_180:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_181:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_182:
    mov qword rax, 0
    push rax
addr_183:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_184:
    pop rbx
    pop rax
    and rax, rbx
    push rax
addr_185:
    pop rbx
    test rbx, rbx
    jz addr_187
addr_186:
addr_186_0:
    pop rax
addr_186_1:
    pop rax
addr_186_2:
    pop rax
addr_186_3:
    pop rax
addr_186_4:
    mov qword rax, 1
    push rax
addr_186_5:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_186_6:
addr_187:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_188:
    mov qword rax, 0
    push rax
addr_189:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_190:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_191:
    mov qword rax, 0
    push rax
addr_192:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_193:
    pop rbx
    pop rax
    or rax, rbx
    push rax
addr_194:
    pop rbx
    test rbx, rbx
    jz addr_196
addr_195:
addr_195_0:
    pop rax
addr_195_1:
    pop rax
addr_195_2:
    pop rax
addr_195_3:
    pop rax
addr_195_4:
    mov qword rax, 0
    push rax
addr_195_5:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_195_6:
addr_196:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_197:
    pop rbx
    test rbx, rbx
    jz addr_198
    jmp addr_168
addr_198:
    pop rax
addr_199:
    pop rax
addr_200:
    mov qword rax, 0
    push rax
addr_201:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_202:
addr_203:
    ; - proc copy 2 2
addr_204:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_205:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_206:
addr_207:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_208:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_209:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_210:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_211:
    pop rax
addr_212:
    pop rax
    pop rbx
    push rax
    push rbx
addr_213:
    mov qword rax, 1
    push rax
addr_214:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_215:
    pop rax
    pop rbx
    push rax
    push rbx
addr_216:
    mov qword rax, 1
    push rax
addr_217:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_218:
    pop rax
    push rax
    push rax
addr_219:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_220:
    mov qword rax, 0
    push rax
addr_221:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_222:
    pop rbx
    test rbx, rbx
    jz addr_223
    jmp addr_206
addr_223:
    mov qword rax, 0
    push rax
addr_224:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_225:
    pop rax
addr_226:
    pop rax
addr_227:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_228:
addr_229:
    ; - proc last 1 1
addr_230:
    mov qword rax, 1
    push rax
addr_231:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_232:
addr_233:
    mov qword rax, 1
    push rax
addr_234:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_235:
    pop rax
    push rax
    push rax
addr_236:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_237:
    mov qword rax, 0
    push rax
addr_238:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_239:
    pop rbx
    test rbx, rbx
    jz addr_240
    jmp addr_232
addr_240:
    mov qword rax, 1
    push rax
addr_241:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_242:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_243:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_244:
addr_245:
    ; - proc clear 1 1
addr_246:
    pop rax
    push rax
    push rax
addr_247:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_248:
    mov qword rax, 0
    push rax
addr_249:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_250:
    pop rbx
    test rbx, rbx
    jz addr_252
addr_251:
addr_251_0:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_251_1:
addr_252:
    pop rax
    push rax
    push rax
addr_253:
addr_254:
    pop rax
    push rax
    push rax
addr_255:
    mov qword rax, 0
    push rax
addr_256:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_257:
    pop rax
addr_258:
    mov qword rax, 1
    push rax
addr_259:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_260:
    pop rax
    push rax
    push rax
addr_261:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_262:
    pop rbx
    test rbx, rbx
    jz addr_263
    jmp addr_253
addr_263:
    pop rax
addr_264:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_265:
addr_266:
    ; - proc concat 2 1
addr_267:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_268:
    pop rax
    push rax
    push rax
addr_269:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_270
    jmp addr_136
addr_270:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_271:
    pop rax
    pop rbx
    push rax
    push rbx
addr_272:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_273
    jmp addr_204
addr_273:
    pop rax
addr_274:
    pop rax
addr_275:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_276:
addr_277:
addr_278:
addr_279:
    ; - proc isnum 1 1
addr_280:
    push mem+40
addr_281:
    mov qword rax, 48
    push rax
addr_282:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_283:
    pop rax
addr_284:
    push mem+41
addr_285:
    mov qword rax, 57
    push rax
addr_286:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_287:
    pop rax
addr_288:
    pop rax
    push rax
    push rax
addr_289:
    pop rax
    push rax
    push rax
addr_290:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_291
    jmp addr_136
addr_291:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_292:
    mov qword rax, 1
    push rax
addr_293:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_294:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_295:
    pop rax
    push rax
    push rax
addr_296:
    mov qword rax, 98
    push rax
addr_297:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_298:
    pop rbx
    test rbx, rbx
    jz addr_300
addr_299:
addr_299_0:
    push mem+41
addr_299_1:
    mov qword rax, 49
    push rax
addr_299_2:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_299_3:
    pop rax
addr_299_4:
addr_300:
    pop rax
    push rax
    push rax
addr_301:
    mov qword rax, 104
    push rax
addr_302:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_303:
    pop rbx
    test rbx, rbx
    jz addr_305
addr_304:
addr_304_0:
    push mem+41
addr_304_1:
    mov qword rax, 102
    push rax
addr_304_2:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_304_3:
    pop rax
addr_304_4:
addr_305:
    pop rax
addr_306:
    pop rax
    push rax
    push rax
addr_307:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_308:
    mov qword rax, 45
    push rax
addr_309:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_310:
    pop rbx
    test rbx, rbx
    jz addr_312
addr_311:
addr_311_0:
    mov qword rax, 1
    push rax
addr_311_1:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_311_2:
addr_312:
addr_313:
    pop rax
    push rax
    push rax
addr_314:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_315:
    pop rax
    push rax
    push rax
addr_316:
    push mem+40
addr_317:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_318:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_319:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_320:
    push mem+41
addr_321:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_322:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_323:
    pop rbx
    pop rax
    or rax, rbx
    push rax
addr_324:
    pop rbx
    test rbx, rbx
    jz addr_326
addr_325:
addr_325_0:
    pop rax
addr_325_1:
    pop rax
    push rax
    push rax
addr_325_2:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_325_3:
    mov qword rax, 98
    push rax
addr_325_4:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_325_5:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_325_6:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_325_7:
    mov qword rax, 104
    push rax
addr_325_8:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_325_9:
    pop rbx
    pop rax
    or rax, rbx
    push rax
addr_325_10:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_325_11:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_325_12
    jmp addr_136
addr_325_12:
    mov qword rax, 1
    push rax
addr_325_13:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_325_14:
    pop rbx
    pop rax
    and rax, rbx
    push rax
addr_325_15:
    pop rax
    pop rbx
    push rax
    push rbx
addr_325_16:
    pop rax
addr_325_17:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_325_18:
addr_326:
    pop rax
addr_327:
    mov qword rax, 1
    push rax
addr_328:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_329:
    pop rax
    push rax
    push rax
addr_330:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_331:
    mov qword rax, 0
    push rax
addr_332:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_333:
    pop rbx
    test rbx, rbx
    jz addr_334
    jmp addr_312
addr_334:
    pop rax
addr_335:
    mov qword rax, 1
    push rax
addr_336:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_337:
addr_338:
addr_339:
    ; - proc tonum 1 1
addr_340:
    pop rax
    push rax
    push rax
addr_341:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_342
    jmp addr_280
addr_342:
    pop rax
    xor rax, 1
    push rax
addr_343:
    pop rbx
    test rbx, rbx
    jz addr_345
addr_344:
addr_344_0:
    pop rax
    push rax
    push rax
addr_344_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_344_2
    jmp addr_76
addr_344_2:
    push str_0
addr_344_3:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_344_4
    jmp addr_76
addr_344_4:
    pop rax
addr_344_5:
    mov qword rax, -1
    push rax
addr_344_6:
    mov rax, 60
    pop rdi
    syscall
addr_344_7:
addr_345:
    push mem+42
addr_346:
    mov qword rax, 10
    push rax
addr_347:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_348:
    pop rax
addr_349:
    pop rax
    push rax
    push rax
addr_350:
    pop rax
    push rax
    push rax
addr_351:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_352
    jmp addr_136
addr_352:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_353:
    pop rax
    push rax
    push rax
addr_354:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_355:
    mov qword rax, 98
    push rax
addr_356:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_357:
    pop rbx
    test rbx, rbx
    jz addr_359
addr_358:
addr_358_0:
    push mem+42
addr_358_1:
    mov qword rax, 2
    push rax
addr_358_2:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_358_3:
    pop rax
addr_358_4:
addr_359:
    pop rax
addr_360:
    mov qword rax, 0
    push rax
addr_361:
addr_362:
    push mem+42
addr_363:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_364:
    pop rax
    pop rbx
    imul rax, rbx
    push rax
addr_365:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_366:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_367:
    mov qword rax, 48
    push rax
addr_368:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_369:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_370:
    pop rax
    pop rbx
    push rax
    push rbx
addr_371:
    mov qword rax, 1
    push rax
addr_372:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_373:
    pop rax
    pop rbx
    push rax
    push rbx
addr_374:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_375:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_376:
    pop rbx
    test rbx, rbx
    jz addr_377
    jmp addr_361
addr_377:
    pop rax
    pop rbx
    push rax
    push rbx
addr_378:
    pop rax
addr_379:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_380:
addr_381:
addr_382:
addr_383:
    ; - proc split 3 2
addr_384:
    pop rax
    pop rbx
    push rax
    push rbx
addr_385:
    push mem+43
addr_386:
    pop rax
    pop rbx
    push rax
    push rbx
addr_387:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_388:
    pop rax
addr_389:
    push mem+44
addr_390:
    pop rax
    pop rbx
    push rax
    push rbx
addr_391:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_392:
    pop rax
addr_393:
    push mem+44
addr_394:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_395:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_396
    jmp addr_246
addr_396:
addr_397:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_398:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_399:
    push mem+43
addr_400:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_401:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_402:
    pop rbx
    test rbx, rbx
    jz addr_404
addr_403:
addr_403_0:
    pop rax
addr_403_1:
    mov qword rax, 1
    push rax
addr_403_2:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_403_3:
    push mem+44
addr_403_4:
   pop rax
   xor rbx, rbx
   mov rbx, [rax]
   push rbx
addr_403_5:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_403_6:
addr_404:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_405:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_406:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_407:
    pop rax
    pop rbx
    push rax
    push rbx
addr_408:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_409:
    pop rax
addr_410:
    pop rax
    pop rbx
    push rax
    push rbx
addr_411:
    mov qword rax, 1
    push rax
addr_412:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_413:
    pop rax
    pop rbx
    push rax
    push rbx
addr_414:
    mov qword rax, 1
    push rax
addr_415:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_416:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_417:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_418:
    mov qword rax, 0
    push rax
addr_419:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_420:
    pop rbx
    test rbx, rbx
    jz addr_421
    jmp addr_396
addr_421:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_422:
addr_423:
addr_424:
addr_425:
addr_426:
    ; - proc copy 3 0
addr_427:
    push mem+52
addr_428:
    pop rax
    pop rbx
    push rax
    push rbx
addr_429:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_430:
    pop rax
addr_431:
addr_432:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_433:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_434:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_435:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_436:
    pop rax
addr_437:
    pop rax
    pop rbx
    push rax
    push rbx
addr_438:
    mov qword rax, 1
    push rax
addr_439:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_440:
    pop rax
    pop rbx
    push rax
    push rbx
addr_441:
    mov qword rax, 1
    push rax
addr_442:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_443:
    push mem+52
addr_444:
    push mem+52
addr_445:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_446:
    mov qword rax, 1
    push rax
addr_447:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_448:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_449:
    pop rax
addr_450:
    push mem+52
addr_451:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_452:
    mov qword rax, 0
    push rax
addr_453:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_454:
    pop rbx
    test rbx, rbx
    jz addr_455
    jmp addr_431
addr_455:
    pop rax
addr_456:
    pop rax
addr_457:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_458:
addr_459:
    ; - proc zero 2 0
addr_460:
    push mem+52
addr_461:
    pop rax
    pop rbx
    push rax
    push rbx
addr_462:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_463:
    pop rax
addr_464:
addr_465:
    pop rax
    push rax
    push rax
addr_466:
    mov qword rax, 0
    push rax
addr_467:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_468:
    pop rax
addr_469:
    mov qword rax, 1
    push rax
addr_470:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_471:
    push mem+52
addr_472:
    push mem+52
addr_473:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_474:
    mov qword rax, 1
    push rax
addr_475:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_476:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_477:
    pop rax
addr_478:
    push mem+52
addr_479:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_480:
    mov qword rax, 0
    push rax
addr_481:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_482:
    pop rbx
    test rbx, rbx
    jz addr_483
    jmp addr_464
addr_483:
    pop rax
addr_484:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_485:
addr_486:
addr_487:
addr_488:
addr_489:
addr_490:
addr_491:
addr_492:
addr_493:
addr_494:
    ; - proc level 2 0
addr_495:
    push mem+68
addr_496:
    mov qword rax, 0
    push rax
addr_497:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_498:
    pop rax
    pop rbx
    push rax
    push rbx
addr_499:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_500:
    pop rax
addr_501:
    push mem+68
addr_502:
    mov qword rax, 8
    push rax
addr_503:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_504:
    pop rax
    pop rbx
    push rax
    push rbx
addr_505:
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
addr_506:
    pop rax
addr_507:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_508:
addr_509:
    ; - proc msg 2 0
addr_510:
    push mem+68
addr_511:
    mov qword rax, 13
    push rax
addr_512:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_513:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_514
    jmp addr_246
addr_514:
    pop rax
    pop rbx
    push rax
    push rbx
addr_515:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_516
    jmp addr_204
addr_516:
    pop rax
addr_517:
    pop rax
addr_518:
    push mem+68
addr_519:
    mov qword rax, 9
    push rax
addr_520:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_521:
    pop rax
    pop rbx
    push rax
    push rbx
addr_522:
    mov qword rax, 3
    push rax
addr_523:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_524
    jmp addr_427
addr_524:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_525:
addr_526:
    ; - proc cat 1 0
addr_527:
    push mem+68
addr_528:
    mov qword rax, 13
    push rax
addr_529:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_530:
    pop rax
    pop rbx
    push rax
    push rbx
addr_531:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_532
    jmp addr_267
addr_532:
    pop rax
addr_533:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_534:
addr_535:
    ; - proc log 0 0
addr_536:
    push mem+68
addr_537:
    mov qword rax, 8
    push rax
addr_538:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_539:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_540:
    pop rbx
    test rbx, rbx
    jz addr_542
addr_541:
addr_541_0:
    push str_1
addr_541_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_541_2
    jmp addr_50
addr_541_2:
    push str_2
addr_541_3:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_541_4
    jmp addr_50
addr_541_4:
    push mem+68
addr_541_5:
    mov qword rax, 9
    push rax
addr_541_6:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_541_7:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_541_8
    jmp addr_50
addr_541_8:
    push str_3
addr_541_9:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_541_10
    jmp addr_50
addr_541_10:
    push mem+68
addr_541_11:
    mov qword rax, 13
    push rax
addr_541_12:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_541_13:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_541_14
    jmp addr_50
addr_541_14:
    push str_4
addr_541_15:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_541_16
    jmp addr_76
addr_541_16:
    mov qword rax, 0
    push rax
addr_541_17:
    mov qword rax, 0
    push rax
addr_541_18:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_541_19:
    mov rax, 60
    pop rdi
    syscall
addr_541_20:
addr_542:
    push str_5
addr_543:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_544
    jmp addr_50
addr_544:
    push mem+68
addr_545:
    mov qword rax, 9
    push rax
addr_546:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_547:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_548
    jmp addr_50
addr_548:
    push str_6
addr_549:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_550
    jmp addr_50
addr_550:
    push mem+68
addr_551:
    mov qword rax, 13
    push rax
addr_552:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_553:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_554
    jmp addr_76
addr_554:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_555:
addr_556:
addr_557:
addr_558:
    ; - enum
addr_559:
addr_560:
addr_561:
addr_562:
    ; - proc fork 0 1
addr_563:
    mov qword rax, 57
    push rax
addr_564:
    pop rax
    syscall
    push rax
addr_565:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_566:
addr_567:
    ; - proc deverr 0 0
addr_568:
    push str_7
addr_569:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_570
    jmp addr_76
addr_570:
    mov qword rax, -1
    push rax
addr_571:
    mov rax, 60
    pop rdi
    syscall
addr_572:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_573:
addr_574:
    ; - proc execcmd 1 0
addr_575:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_576
    jmp addr_563
addr_576:
    pop rax
    push rax
    push rax
addr_577:
    mov qword rax, 0
    push rax
addr_578:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_579:
    pop rbx
    test rbx, rbx
    jz addr_581
addr_580:
addr_580_0:
    mov qword rax, 1
    push rax
addr_580_1:
    mov qword rax, 0
    push rax
addr_580_2:
    mov qword rax, 0
    push rax
addr_580_3:
    push str_8
addr_580_4:
    mov qword rax, -100
    push rax
addr_580_5:
    mov qword rax, 257
    push rax
addr_580_6:
    pop rax
    pop rdi
    pop rsi
    pop rdx
    pop r10
    syscall
    push rax
addr_580_7:
    pop rax
    push rax
    push rax
addr_580_8:
    mov qword rax, 0
    push rax
addr_580_9:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_580_10:
    pop rbx
    test rbx, rbx
    jz addr_580_12
addr_580_11:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_580_12
    jmp addr_568
addr_580_12:
    mov qword rax, 33
    push rax
addr_580_13:
    pop rax
    pop rdi
    pop rsi
    syscall
    push rax
addr_580_14:
    mov qword rax, 0
    push rax
addr_580_15:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_580_16:
    pop rbx
    test rbx, rbx
    jz addr_580_18
addr_580_17:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_580_18
    jmp addr_568
addr_580_18:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_580_19:
    mov rax, [args_ptr]
    mov rax, [rax]
    add rax, 2
    shl rax, 3
    mov rbx, [args_ptr]
    add rbx, rax
    push rbx
addr_580_20:
    pop rax
    pop rbx
    push rax
    push rbx
addr_580_21:
    pop rax
    push rax
    push rax
addr_580_22:
   pop rax
   xor rbx, rbx
   mov rbx, [rax]
   push rbx
addr_580_23:
    mov qword rax, 59
    push rax
addr_580_24:
    pop rax
    pop rdi
    pop rsi
    pop rdx
    syscall
    push rax
addr_580_25:
    pop rax
addr_580_26:
    pop rax
addr_580_27:
    pop rax
addr_580_28:
    mov qword rax, -1
    push rax
addr_580_29:
    mov rax, 60
    pop rdi
    syscall
addr_580_30:
addr_581:
    pop rax
    push rax
    push rax
addr_582:
    mov qword rax, 0
    push rax
addr_583:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_584:
    pop rbx
    test rbx, rbx
    jz addr_586
addr_585:
addr_585_0:
    mov qword rax, 0
    push rax
addr_585_1:
    mov qword rax, 0
    push rax
addr_585_2:
    push mem+132
addr_585_3:
    mov qword rax, -1
    push rax
addr_585_4:
    mov qword rax, 61
    push rax
addr_585_5:
    pop rax
    pop rdi
    pop rsi
    pop rdx
    pop r10
    syscall
    push rax
addr_585_6:
    mov qword rax, 0
    push rax
addr_585_7:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_585_8:
    pop rbx
    test rbx, rbx
    jz addr_585_10
addr_585_9:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_585_10
    jmp addr_568
addr_585_10:
    pop rax
addr_585_11:
    pop rax
addr_585_12:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_585_13:
addr_586:
    mov qword rax, 0
    push rax
addr_587:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_588:
    pop rbx
    test rbx, rbx
    jz addr_590
addr_589:
addr_589_0:
    push str_9
addr_589_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_589_2
    jmp addr_76
addr_589_2:
addr_590:
    pop rax
addr_591:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_592:
addr_593:
    ; - proc execcmdecho 1 0
addr_594:
    mov qword rax, 0
    push rax
addr_595:
    mov qword rax, 1
    push rax
addr_596:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_597
    jmp addr_495
addr_597:
    push str_10
addr_598:
    push str_11
addr_599:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_600
    jmp addr_510
addr_600:
    pop rax
    push rax
    push rax
addr_601:
addr_602:
    pop rax
    push rax
    push rax
addr_603:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_604:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_605
    jmp addr_527
addr_605:
    mov qword rax, 8
    push rax
addr_606:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_607:
    pop rax
    push rax
    push rax
addr_608:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_609:
    mov qword rax, 0
    push rax
addr_610:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_611:
    pop rax
    push rax
    push rax
addr_612:
    pop rbx
    test rbx, rbx
    jz addr_614
addr_613:
addr_613_0:
    push str_12
addr_613_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_613_2
    jmp addr_527
addr_613_2:
addr_614:
    pop rbx
    test rbx, rbx
    jz addr_615
    jmp addr_601
addr_615:
    pop rax
addr_616:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_617
    jmp addr_536
addr_617:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_618
    jmp addr_575
addr_618:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_619:
addr_620:
    ; - proc args 1 1
addr_621:
    pop rax
    push rax
    push rax
addr_622:
    mov rax, [args_ptr]
    mov rax, [rax]
    push rax
addr_623:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_624:
    mov qword rax, 0
    push rax
addr_625:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_626:
    pop rax
    xor rax, 1
    push rax
addr_627:
    pop rbx
    test rbx, rbx
    jz addr_629
addr_628:
addr_628_0:
    pop rax
    push rax
    push rax
addr_628_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_628_2
    jmp addr_81
addr_628_2:
    push str_13
addr_628_3:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_628_4
    jmp addr_81
addr_628_4:
    pop rax
addr_628_5:
    mov qword rax, -1
    push rax
addr_628_6:
    mov rax, 60
    pop rdi
    syscall
addr_628_7:
addr_629:
    mov qword rax, 8
    push rax
addr_630:
    pop rax
    pop rbx
    imul rax, rbx
    push rax
addr_631:
    mov rax, [args_ptr]
    add rax, 8
    push rax
addr_632:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_633:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_634:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_635:
addr_636:
    ; - proc open 4 1
addr_637:
    mov qword rax, 257
    push rax
addr_638:
    pop rax
    pop rdi
    pop rsi
    pop rdx
    pop r10
    syscall
    push rax
addr_639:
    pop rax
    push rax
    push rax
addr_640:
    mov qword rax, 0
    push rax
addr_641:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_642:
    pop rbx
    test rbx, rbx
    jz addr_644
addr_643:
addr_643_0:
    push str_14
addr_643_1:
    pop rax
addr_643_2:
    pop rax
addr_643_3:
    mov qword rax, -1
    push rax
addr_643_4:
    mov rax, 60
    pop rdi
    syscall
addr_643_5:
addr_644:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_645:
addr_646:
    ; - proc write 3 0
addr_647:
    mov qword rax, 1
    push rax
addr_648:
    pop rax
    pop rdi
    pop rsi
    pop rdx
    syscall
    push rax
addr_649:
    mov qword rax, 0
    push rax
addr_650:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_651:
    pop rbx
    test rbx, rbx
    jz addr_653
addr_652:
addr_652_0:
    push str_15
addr_652_1:
    pop rax
addr_652_2:
    mov qword rax, -1
    push rax
addr_652_3:
    mov rax, 60
    pop rdi
    syscall
addr_652_4:
addr_653:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_654:
addr_655:
    ; - proc read 3 1
addr_656:
    mov qword rax, 0
    push rax
addr_657:
    pop rax
    pop rdi
    pop rsi
    pop rdx
    syscall
    push rax
addr_658:
    pop rax
    push rax
    push rax
addr_659:
    mov qword rax, 0
    push rax
addr_660:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_661:
    pop rbx
    test rbx, rbx
    jz addr_663
addr_662:
addr_662_0:
    push str_16
addr_662_1:
    pop rax
addr_662_2:
    pop rax
addr_662_3:
    mov qword rax, -1
    push rax
addr_662_4:
    mov rax, 60
    pop rdi
    syscall
addr_662_5:
addr_663:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_664:
addr_665:
    ; - proc close 1 0
addr_666:
    mov qword rax, 3
    push rax
addr_667:
    pop rax
    pop rdi
    syscall
    push rax
addr_668:
    mov qword rax, 0
    push rax
addr_669:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_670:
    pop rbx
    test rbx, rbx
    jz addr_672
addr_671:
addr_671_0:
    push str_17
addr_671_1:
    pop rax
addr_671_2:
    mov qword rax, -1
    push rax
addr_671_3:
    mov rax, 60
    pop rdi
    syscall
addr_671_4:
addr_672:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_673:
addr_674:
addr_675:
addr_676:
addr_677:
addr_678:
addr_679:
addr_680:
addr_681:
addr_682:
    ; - proc new 3 1
addr_683:
    pop rax
    pop rbx
    push rax
    push rbx
addr_684:
    push mem+140
addr_685:
    pop rax
    pop rbx
    push rax
    push rbx
addr_686:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_687:
    pop rax
addr_688:
    pop rax
    pop rbx
    push rax
    push rbx
addr_689:
    push mem+156
addr_690:
    pop rax
    pop rbx
    push rax
    push rbx
addr_691:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_692:
    pop rax
addr_693:
    mov qword rax, 16
    push rax
addr_694:
    pop rbx
    pop rax
    sub rax, rbx
    push rax
addr_695:
    push mem+156
addr_696:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_697:
    mov qword rax, 0
    push rax
addr_698:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_699:
    pop rax
    pop rbx
    push rax
    push rbx
addr_700:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_701:
    pop rax
addr_702:
    push mem+156
addr_703:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_704:
    mov qword rax, 8
    push rax
addr_705:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_706:
    push mem+140
addr_707:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_708:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_709:
    pop rax
addr_710:
    push mem+156
addr_711:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_712:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_713:
addr_714:
    ; - proc curentryaddr 1 2
addr_715:
    push mem+156
addr_716:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_717:
    mov qword rax, 16
    push rax
addr_718:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_719:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_720:
    push mem+156
addr_721:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_722:
    mov qword rax, 8
    push rax
addr_723:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_724:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_725:
    mov qword rax, 8
    push rax
addr_726:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_727:
    pop rax
    pop rbx
    imul rax, rbx
    push rax
addr_728:
    pop rax
    push rax
    push rax
addr_729:
    push mem+156
addr_730:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_731:
    mov qword rax, 0
    push rax
addr_732:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_733:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
addr_734:
    pop rbx
    test rbx, rbx
    jz addr_736
addr_735:
addr_735_0:
    push str_18
addr_735_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_735_2
    jmp addr_76
addr_735_2:
    pop rax
addr_735_3:
    pop rax
addr_735_4:
    pop rax
addr_735_5:
    mov qword rax, -1
    push rax
addr_735_6:
    mov rax, 60
    pop rdi
    syscall
addr_735_7:
addr_736:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_737:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_738:
addr_739:
    ; - proc put 3 1
addr_740:
    push mem+148
addr_741:
    pop rax
    pop rbx
    push rax
    push rbx
addr_742:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_743:
    pop rax
addr_744:
    push mem+140
addr_745:
    pop rax
    pop rbx
    push rax
    push rbx
addr_746:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_747:
    pop rax
addr_748:
    push mem+156
addr_749:
    pop rax
    pop rbx
    push rax
    push rbx
addr_750:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_751:
    pop rax
addr_752:
    push mem+156
addr_753:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_754:
    mov qword rax, 8
    push rax
addr_755:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_756:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_757:
    push mem+140
addr_758:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_759:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_760
    jmp addr_136
addr_760:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_761:
    pop rbx
    test rbx, rbx
    jz addr_763
addr_762:
addr_762_0:
    push str_19
addr_762_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_762_2
    jmp addr_76
addr_762_2:
    push mem+140
addr_762_3:
   pop rax
   xor rbx, rbx
   mov rbx, [rax]
   push rbx
addr_762_4:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_762_5
    jmp addr_76
addr_762_5:
    mov qword rax, -1
    push rax
addr_762_6:
    mov rax, 60
    pop rdi
    syscall
addr_762_7:
addr_763:
    mov qword rax, -1
    push rax
addr_764:
addr_765:
    mov qword rax, 1
    push rax
addr_766:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_767:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_768
    jmp addr_715
addr_768:
    pop rax
    push rax
    push rax
addr_769:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_770:
    mov qword rax, 0
    push rax
addr_771:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_772:
    pop rax
    pop rbx
    push rax
    push rbx
addr_773:
    push mem+140
addr_774:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_775:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_776
    jmp addr_156
addr_776:
    pop rbx
    pop rax
    or rax, rbx
    push rax
addr_777:
    pop rax
    xor rax, 1
    push rax
addr_778:
    pop rbx
    test rbx, rbx
    jz addr_779
    jmp addr_764
addr_779:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_780
    jmp addr_715
addr_780:
    pop rax
    pop rbx
    push rax
    push rbx
addr_781:
    pop rax
addr_782:
    push mem+140
addr_783:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_784:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_785
    jmp addr_204
addr_785:
    pop rax
addr_786:
    push mem+156
addr_787:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_788:
    mov qword rax, 8
    push rax
addr_789:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_790:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_791:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_792:
    push mem+148
addr_793:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_794:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_795:
    pop rax
addr_796:
    push mem+156
addr_797:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_798:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_799:
addr_800:
    ; - proc print 1 0
addr_801:
    push mem+156
addr_802:
    pop rax
    pop rbx
    push rax
    push rbx
addr_803:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_804:
    pop rax
addr_805:
    mov qword rax, 0
    push rax
addr_806:
addr_807:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_808
    jmp addr_715
addr_808:
    pop rax
    push rax
    push rax
addr_809:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_810
    jmp addr_50
addr_810:
    push str_20
addr_811:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_812
    jmp addr_50
addr_812:
    push mem+156
addr_813:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_814:
    mov qword rax, 8
    push rax
addr_815:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_816:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_817:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_818:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_819:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_820
    jmp addr_81
addr_820:
    mov qword rax, 1
    push rax
addr_821:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_822:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_823
    jmp addr_715
addr_823:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_824:
    pop rbx
    test rbx, rbx
    jz addr_825
    jmp addr_806
addr_825:
    pop rax
addr_826:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_827:
addr_828:
    ; - proc get 2 2
addr_829:
    push mem+140
addr_830:
    pop rax
    pop rbx
    push rax
    push rbx
addr_831:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_832:
    pop rax
addr_833:
    push mem+156
addr_834:
    pop rax
    pop rbx
    push rax
    push rbx
addr_835:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_836:
    pop rax
addr_837:
    push mem+156
addr_838:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_839:
    mov qword rax, 8
    push rax
addr_840:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_841:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_842:
    push mem+140
addr_843:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_844:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_845
    jmp addr_136
addr_845:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
addr_846:
    pop rbx
    test rbx, rbx
    jz addr_848
addr_847:
addr_847_0:
    push str_21
addr_847_1:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_847_2
    jmp addr_76
addr_847_2:
    push mem+140
addr_847_3:
   pop rax
   xor rbx, rbx
   mov rbx, [rax]
   push rbx
addr_847_4:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_847_5
    jmp addr_76
addr_847_5:
    mov qword rax, -1
    push rax
addr_847_6:
    mov rax, 60
    pop rdi
    syscall
addr_847_7:
addr_848:
    mov qword rax, -1
    push rax
addr_849:
addr_850:
    mov qword rax, 1
    push rax
addr_851:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_852:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_853
    jmp addr_715
addr_853:
    pop rax
    push rax
    push rax
addr_854:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_855:
    mov qword rax, 0
    push rax
addr_856:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_857:
    pop rbx
    test rbx, rbx
    jz addr_859
addr_858:
addr_858_0:
    pop rax
addr_858_1:
    mov qword rax, 0
    push rax
addr_858_2:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_858_3:
addr_859:
    push mem+140
addr_860:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_861:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_862
    jmp addr_156
addr_862:
    pop rax
    xor rax, 1
    push rax
addr_863:
    pop rbx
    test rbx, rbx
    jz addr_864
    jmp addr_849
addr_864:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_865
    jmp addr_715
addr_865:
    push mem+156
addr_866:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_867:
    mov qword rax, 8
    push rax
addr_868:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_869:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_870:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_871:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_872:
    pop rax
    pop rbx
    push rax
    push rbx
addr_873:
    pop rax
addr_874:
    push mem+156
addr_875:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_876:
    pop rax
    pop rbx
    push rax
    push rbx
addr_877:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_878:
addr_879:
    ; - proc in 2 2
addr_880:
    push mem+140
addr_881:
    pop rax
    pop rbx
    push rax
    push rbx
addr_882:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_883:
    pop rax
addr_884:
    push mem+156
addr_885:
    pop rax
    pop rbx
    push rax
    push rbx
addr_886:
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
addr_887:
    pop rax
addr_888:
    push mem+156
addr_889:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_890:
    mov qword rax, 16
    push rax
addr_891:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_892:
    mov qword rax, -1
    push rax
addr_893:
addr_894:
    mov qword rax, 1
    push rax
addr_895:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_896:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_897
    jmp addr_715
addr_897:
    pop rax
    push rax
    push rax
addr_898:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_899:
    mov qword rax, 0
    push rax
addr_900:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_901:
    pop rbx
    test rbx, rbx
    jz addr_903
addr_902:
addr_902_0:
    pop rax
addr_902_1:
    pop rax
addr_902_2:
    mov qword rax, 0
    push rax
addr_902_3:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_902_4:
addr_903:
    push mem+140
addr_904:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_905:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_906
    jmp addr_156
addr_906:
    pop rax
    xor rax, 1
    push rax
addr_907:
    pop rbx
    test rbx, rbx
    jz addr_908
    jmp addr_893
addr_908:
    pop rax
addr_909:
    pop rax
addr_910:
    push mem+156
addr_911:
    pop rax
    xor rbx, rbx
    mov rbx, [rax]
    push rbx
addr_912:
    mov qword rax, 1
    push rax
addr_913:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_914:
addr_915:
addr_916:
addr_917:
addr_918:
addr_919:
    ; - proc collatz 1 1
addr_920:
    mov qword rax, 0
    push rax
addr_921:
addr_922:
    pop rax
    pop rbx
    push rax
    push rbx
addr_923:
    mov qword rax, 2
    push rax
addr_924:
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
addr_925:
    mov qword rax, 1
    push rax
addr_926:
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
addr_927:
    pop rbx
    test rbx, rbx
    jz addr_929
addr_928:
addr_928_0:
    mov qword rax, 2
    push rax
addr_928_1:
    pop rax
    pop rbx
    imul rax, rbx
    push rax
addr_928_2:
    mov qword rax, 1
    push rax
addr_928_3:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_928_4:
    mov qword rax, 3
    push rax
addr_928_5:
    pop rax
    pop rbx
    imul rax, rbx
    push rax
addr_928_6:
    mov qword rax, 1
    push rax
addr_928_7:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_928_8:
addr_929:
    pop rax
    push rax
    push rax
addr_930:
    push mem+164
addr_931:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_932:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_933:
    mov qword rax, 0
    push rax
addr_934:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_935:
    pop rbx
    test rbx, rbx
    jz addr_937
addr_936:
addr_936_0:
    pop rax
    push rax
    push rax
addr_936_1:
    push mem+164
addr_936_2:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_936_3:
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
addr_936_4:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_936_5:
    pop rax
    pop rbx
    push rax
    push rbx
addr_936_6:
    pop rax
addr_936_7:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_936_8:
addr_937:
    pop rax
    pop rbx
    push rax
    push rbx
addr_938:
    mov qword rax, 1
    push rax
addr_939:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_940:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_941:
    mov qword rax, 1
    push rax
addr_942:
    mov rcx, 0
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
addr_943:
    pop rbx
    test rbx, rbx
    jz addr_944
    jmp addr_921
addr_944:
    pop rax
addr_945:
    mov rax, [ret_stack_rsp]
    sub rax, 8
    mov qword [ret_stack_rsp], rax
    add rax, 8
    jmp qword [rax]
addr_946:
addr_947:
    ; - proc main 0 0
addr_948:
    mov qword rax, 2
    push rax
addr_949:
addr_950:
    mov qword rax, 1
    push rax
addr_951:
    pop rax
    pop rbx
    add rax, rbx
    push rax
addr_952:
    pop rax
    push rax
    push rax
addr_953:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_954
    jmp addr_920
addr_954:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
addr_955:
    mov rax, [ret_stack_rsp]
    add rax, 8
    mov qword [ret_stack_rsp], rax
    mov qword [rax], addr_956
    jmp addr_