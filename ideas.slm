{Macro}
inc "compiler/node.slm"

macro proc lmao 1 1
  {do stuff}

  ret
end

{sim procs}
proc sims 1 1
  sim
    5 10 +
  end

  ret
end

{lambdas}
proc lambdas 1 1
  5

  lambda 1 2
    copy 1 +
  end

  ()
  
  (int.print)
  (int.print)

  ret
end

{templates}
temp increment
  copy read 1 + put disc
end

temp decrement
  copy read 1 - put disc
end

{int case}
proc cases 0 0
  0

  copy
  switch
    cas 1
      "lmao" (cstr.println) 0
      brk
    cas 2
      brk
    els
      (cstr.println) 0
      brk
  end
  disc

  ret
end

{string case}
proc cases 0 0
  "word"

  copy
  objswitch
  case "lol"
    "lmao" (cstr.println) 0
    brk
  case "word"
    brk
  else
    (cstr.println) 0
    brk
  end
  disc

  ret
end

{ifelse}
proc elses 0 0
  1 if
    "lol" (cstr.println)
  end

end