const p1 11100100b
const p2 01110000b
const vramts 8000h
const vramtm 9000h
const vramm1 9800h
const vramm15 9A1Fh
const vramm2 9C00h
const tile 0005h
const tilesize 017Fh
const spritesize 0040h
const floor 8800h
const speed 200
const gravity 100
const jumpv 128
const jumptime 6

class enemy
  prop x 2
  prop y 2
  prop yv 2
  prop obj 2

  gvar temp 2

  proc init 2 1
    covr enemy.obj .
    covr
    (sprite.get)
    1 (sprite.settile)
    put disc

    disc

    copy enemy.x . 20 putc disc
    copy enemy.y . 20 putc disc

    ret
  end

  proc phys 1 1
    copy enemy.yv .
    copy read gravity - put disc

    copy enemy.y . read
    covr enemy.yv . read -
    copy floor swap < if [
      covr enemy.yv . 0 put -
      disc floor
    ]
    covr enemy.y . swap
    put disc

    ret
  end

  proc update 1 1
    (enemy.phys)

    enemy.temp swap put disc

    enemy.temp read enemy.obj . read
    enemy.temp read enemy.y . readc
    enemy.temp read enemy.x . readc

    (sprite.setpos) disc
    
    enemy.temp read

    ret
  end
end

gvar enemy1 enemy.SIZE
gvar x 2
gvar y 2
gvar yv 2
gvar jump 1

proc dojump 0 0
  jump readc if [
    jump
    jump readc 1 -
    putc disc
    yv
    yv read jumpv +
    put disc

    ret
  ]
  jump 0 putc disc
  yv
  yv read gravity -
  put disc

  ret
end

proc moveleft 0 0
  x read speed < if [
    x x readc 168 + putc disc
  ]
  x
  x read speed -
  put disc
  
  ret
end

proc updateinput 0 0
  (joypad.dpad)
  (joypad.get)

  copy 1 && 1 != if [
    x
    x read speed +
    put disc
  ]
  copy 2 && 2 != if [
    (moveleft)
  ]
  disc

  (joypad.buttons)
  (joypad.get)
  copy 2 && 2 != if [
    (dojump)
  ]
  copy 2 && if [
    jump 0 putc disc
    yv
    yv read gravity -
    put disc
  ]
  disc

  ret
end
  
proc updatevel 0 0
  y
  y read yv read -
  copy floor swap < if [
    yv 0 put disc
    jump jumptime putc disc
    disc floor
  ]
  put disc
  
  ret
end

proc updatedge 0 0
  x
  x readc
  copy 168 swap < if [
    168 -
  ]
  putc disc

  ret
end

proc main 0 0
  enemy1 1 (enemy.init) disc
  
  (lcd.init)

  (lcd.vblank)

  lcd.LCDCF_OFF
  (lcd.mode)
  
  0
  do
    copy vramtm + spritesize -
    covr spritesize < if [
      disc copy vramts +
    ]
    covr tiles + readc
    putc disc

    1 +

    copy tilesize <
  end
  disc
  
  0
  do
    copy vramm1 +
    covr tilem + readc
    putc disc
    
    1 +

    copy vramm2 vramm1 - <
  end
  disc

  lcd.LCDCF_ON
  lcd.LCDCF_BGON +
  lcd.LCDCF_OBJON +
  (lcd.mode)

  lcd.rBGP
  p1
  putc disc
  
  lcd.rOBP1
  p2
  putc disc
  
  0 (sprite.get)
  3 (sprite.settile)
  x 84 putc disc
  y 144 putc disc

  do
    (lcd.vblank)
    enemy1
    (enemy.update)
    disc
    (updateinput)
    (updatevel)
    (updatedge)

    y readc
    x readc
    (sprite.setpos)
    1
  end

  disc

  ret
end
