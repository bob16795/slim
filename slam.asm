format ELF64
section '.text' executable
public _start
; headptr_isnull:
; headcstr_len:
; headcstr_print:
; headcstr_cr:
; headcstr_println:
; headcstr_eq:
; headcstr_cpy:
; headcstr_last:
; headcstr_clear:
; headcstr_cat:
; headcstr_isnum:
; headcstr_int:
; headcstr_split:
; headcstr_iter:
proc_cstr_len:
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
.blockstart_1: ; do
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_cstr_print:
    pop rax
    push rax
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_len
.blockend_0: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    push qword 1
    pop rax
    pop rdi
    pop rsi
    pop rdx
    syscall
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_cstr_cr:
    push qword 1
    push str_0
    push qword 1
    push qword 1
    pop rax
    pop rdi
    pop rsi
    pop rdx
    syscall
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_cstr_println:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_cr
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_cstr_eq:
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
.blockstart_0: ; do
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    add rsp, 8
    add rsp, 8
    add rsp, 8
    push qword 1
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    add rsp, 8
    add rsp, 8
    add rsp, 8
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_cstr_cpy:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_0: ; do
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_cstr_last:
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
.blockstart_0: ; do
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_cstr_clear:
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
.blockstart_1: ; do
    pop rax
    push rax
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_cstr_cat:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    push rax
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_len
.blockend_0: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_cpy
.blockend_1: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_cstr_isnum:
    mov rax, [loc_stack_rsp]
    add rax, 1
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 1
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 48
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 1
    push rax
    push qword 57
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    pop rax
    push rax
    push rax
    pop rax
    push rax
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_len
.blockend_0: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 98
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 1
    push rax
    push qword 49
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
.blockend_1: ; if
    pop rax
    push rax
    push rax
    push qword 104
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 1
    push rax
    push qword 102
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
.blockend_2: ; if
    add rsp, 8
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 45
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockend_3: ; if
.blockstart_4: ; do
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 1
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    add rsp, 8
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 98
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 104
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_cstr_len
.blockend_6: ; call
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_5: ; if
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_4
.blockend_4: ; do
    add rsp, 8
    push qword 1
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_cstr_int:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 10
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    pop rax
    push rax
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_isnum
.blockend_0: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    pop rax
    push rax
    push rax
    pop rax
    push rax
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_len
.blockend_2: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 98
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 2
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
.blockend_3: ; if
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 104
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
.blockend_4: ; if
    add rsp, 8
    push qword 0
.blockstart_5: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 70
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 65
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    push qword 65
    push qword 10
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockend_6: ; if
    push qword 48
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 98
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 104
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rbx
    test rbx, rbx
    jnz .blockstart_5
.blockend_5: ; do
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_cstr_split:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_clear
.blockend_0: ; call
.blockstart_1: ; do
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_cstr_iter:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push qword 0
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headint_gettmp:
; headint_inctmpidx:
; headint_cstr:
; headint_cstrhex:
; headint_print:
; headint_printhex:
; headheapentry_isentry:
; headheapentry_setfree:
; headheapentry_create:
; headheap_newpage:
; headheap_init:
; headheap_empty:
; headheap_alloc:
; headheap_zalloc:
; headheap_realloc:
; headheap_free:
; headmem_cpy:
; headmem_eq:
; headmem_zero:
; headmem_set:
; headmem_mov:
; heados_fork:
; heados_execcmd:
; heados_execcmdloud:
; heados_execcmdecho:
; heados_execcmdecholoud:
; heados_args:
; heados_env:
; heados_cwd:
; heados_existsf:
; heados_openf:
; heados_writef:
; heados_readf:
; heados_closef:
proc_os_fork:
    push qword 57
    pop rax
    syscall
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_os_execcmd:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_os_fork
.blockend_0: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    push qword 1
    push qword 0
    push qword 0
    push str_1
    push qword -100
    push qword 257
    pop rax
    pop rdi
    pop rsi
    pop rdx
    pop r10
    syscall
    push rax
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    push str_2
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_println
.blockend_3: ; call
    push qword -1
    mov rax, 60
    pop rdi
    syscall
.blockend_2: ; if
    push qword 33
    pop rax
    pop rdi
    pop rsi
    syscall
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    push str_3
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_cstr_println
.blockend_5: ; call
    push qword -1
    mov rax, 60
    pop rdi
    syscall
.blockend_4: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    mov rax, [args_ptr]
    mov rax, [rax]
    add rax, 2
    shl rax, 3
    mov rbx, [args_ptr]
    add rbx, rax
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 59
    pop rax
    pop rdi
    pop rsi
    pop rdx
    syscall
    push rax
    add rsp, 8
    add rsp, 8
    add rsp, 8
    push qword -1
    mov rax, 60
    pop rdi
    syscall
.blockend_1: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    push qword 0
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword -1
    push qword 61
    pop rax
    pop rdi
    pop rsi
    pop rdx
    pop r10
    syscall
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    push str_4
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_cstr_println
.blockend_8: ; call
    push qword -1
    mov rax, 60
    pop rdi
    syscall
.blockend_7: ; if
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_6: ; if
    add rsp, 8
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_os_execcmdloud:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_os_fork
.blockend_0: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    mov rax, [args_ptr]
    mov rax, [rax]
    add rax, 2
    shl rax, 3
    mov rbx, [args_ptr]
    add rbx, rax
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 59
    pop rax
    pop rdi
    pop rsi
    pop rdx
    syscall
    push rax
    add rsp, 8
    add rsp, 8
    add rsp, 8
    push qword -1
    mov rax, 60
    pop rdi
    syscall
.blockend_1: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    push qword 0
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword -1
    push qword 61
    pop rax
    pop rdi
    pop rsi
    pop rdx
    pop r10
    syscall
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    push str_5
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_println
.blockend_4: ; call
    push qword -1
    mov rax, 60
    pop rdi
    syscall
.blockend_3: ; if
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    push str_6
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_cstr_println
.blockend_6: ; call
.blockend_5: ; if
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_os_execcmdecho:
    push str_7
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    pop rax
    push rax
    push rax
.blockstart_1: ; do
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    push str_8
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_print
.blockend_4: ; call
.blockend_3: ; if
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    add rsp, 8
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_cstr_cr
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_os_execcmd
.blockend_6: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_os_execcmdecholoud:
    push str_9
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    pop rax
    push rax
    push rax
.blockstart_1: ; do
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    push str_10
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_print
.blockend_4: ; call
.blockend_3: ; if
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    add rsp, 8
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_cstr_cr
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_os_execcmdloud
.blockend_6: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_os_args:
    pop rax
    push rax
    push rax
    mov rax, [args_ptr]
    mov rax, [rax]
    push rax
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [args_ptr]
    add rax, 8
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_os_env:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 64
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [args_ptr]
    mov rax, [rax]
    add rax, 2
    shl rax, 3
    mov rbx, [args_ptr]
    add rbx, rax
    push rbx
.blockstart_0: ; do
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 61
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_split
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_eq
.blockend_2: ; call
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    add rsp, 8
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_os_openf:
    push qword 257
    pop rax
    pop rdi
    pop rsi
    pop rdx
    pop r10
    syscall
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_os_writef:
    push qword 1
    pop rax
    pop rdi
    pop rsi
    pop rdx
    syscall
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push str_11
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_println
.blockend_1: ; call
    push qword -1
    mov rax, 60
    pop rdi
    syscall
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_os_readf:
    push qword 0
    pop rax
    pop rdi
    pop rsi
    pop rdx
    syscall
    push rax
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push str_12
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_println
.blockend_1: ; call
    add rsp, 8
    push qword -1
    mov rax, 60
    pop rdi
    syscall
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_os_closef:
    push qword 3
    pop rax
    pop rdi
    syscall
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push str_13
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_println
.blockend_1: ; call
    push qword -1
    mov rax, 60
    pop rdi
    syscall
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_os_existsf:
    mov rax, [loc_stack_rsp]
    add rax, 144
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 4
    pop rax
    pop rdi
    pop rsi
    syscall
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    xor rax, 1
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_os_cwd:
    push str_14
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_os_env
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_mem_cpy:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
.blockstart_1: ; do
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_mem_eq:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockstart_0: ; do
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
    add rsp, 8
    push qword 1
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_mem_zero:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockstart_0: ; do
    pop rax
    push rax
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_mem_set:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 1
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
.blockstart_0: ; do
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_mem_mov:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_alloc
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_mem_cpy
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_mem_cpy
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_heap_free
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_heapentry_isentry:
    pop rax
    push rax
    push rax
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    and rax, rbx
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_heapentry_setfree:
    pop rax
    push rax
    push rax
    push mem+48; heap_allocstart
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 1
    pop rax
    not rax
    push rax
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_heapentry_create:
    pop rax
    push rax
    push rax
    push mem+48; heap_allocstart
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_heap_newpage:
    push mem+56; heap_endaddr
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 640000
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    push mem+56; heap_endaddr
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 12
    pop rax
    pop rdi
    syscall
    push rax
    pop rax
    push rax
    push rax
    push mem+56; heap_endaddr
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push str_15
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_println
.blockend_1: ; call
    push qword 1
    mov rax, 60
    pop rdi
    syscall
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_heap_init:
    push mem+64; heap_isinit
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    push mem+64; heap_isinit
    push qword 1
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    push mem+40; heap_startaddr
    push qword 0
    push qword 12
    pop rax
    pop rdi
    syscall
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+56; heap_endaddr
    push mem+40; heap_startaddr
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+48; heap_allocstart
    push mem+40; heap_startaddr
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_heap_newpage
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_heap_empty:
    push mem+64; heap_isinit
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push qword 1
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    push mem+40; heap_startaddr
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rbx
    pop rax
    sub rax, rbx
    push rax
.blockstart_1: ; do
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_heapentry_isentry
.blockend_2: ; call
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    pop rax
    push rax
    push rax
    push mem+56; heap_endaddr
    pop rax
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    add rsp, 8
    push qword 1
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_heap_freeall:
    push mem+40; heap_startaddr
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rbx
    pop rax
    sub rax, rbx
    push rax
.blockstart_0: ; do
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_heapentry_isentry
.blockend_1: ; call
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    pop rax
    push rax
    push rax
    push qword 17
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_heap_free
.blockend_3: ; call
.blockend_2: ; if
    pop rax
    push rax
    push rax
    push mem+56; heap_endaddr
    pop rax
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_heap_alloc:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_init
.blockend_0: ; call
    push qword 17
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    push qword 64
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 0
    push mem+48; heap_allocstart
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 64
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 64
    pop rbx
    pop rax
    sub rax, rbx
    push rax
.blockstart_1: ; do
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    push mem+56; heap_endaddr
    pop rax
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_heap_newpage
.blockend_3: ; call
.blockend_2: ; if
    pop rax
    push rax
    push rax
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_heapentry_isentry
.blockend_4: ; call
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    pop rax
    push rax
    push rax
    push qword 9
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    push qword 0
    push qword 64
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 64
    pop rbx
    pop rax
    sub rax, rbx
    push rax
.blockend_5: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    push rax
    push rax
    push qword 9
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    pop rax
    push rax
    push rax
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_heapentry_create
.blockend_6: ; call
    push qword 17
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_heap_zalloc:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_init
.blockend_0: ; call
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_heap_alloc
.blockend_1: ; call
    pop rax
    push rax
    push rax
    pop rax
    push rax
    push rax
    push qword 17
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    push qword 9
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_mem_zero
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_heap_free:
    push qword 17
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    push rax
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heapentry_isentry
.blockend_0: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_heapentry_setfree
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_heap_realloc:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 17
    pop rbx
    pop rax
    sub rax, rbx
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heapentry_isentry
.blockend_0: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    push str_16
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_println
.blockend_2: ; call
.blockend_1: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 17
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    push qword 9
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_heap_free
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_heap_alloc
.blockend_4: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_mem_cpy
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headstr_new:
; headstr_print:
; headstr_len:
; headstr_cat:
; headstr_catc:
; headstr_sput:
; headstr_free:
; headstr_ceq:
proc_str_new:
    push qword 64
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 64
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_str_print:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    push qword 1
    pop rax
    pop rdi
    pop rsi
    pop rdx
    syscall
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_str_len:
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_str_endaddr:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_str_len
.blockend_0: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_str_cat:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    pop rax
    push rax
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_str_len
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_len
.blockend_1: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    pop rax
    push rax
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_str_len
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_str_len
.blockend_4: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_heap_realloc
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_2: ; if
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_str_endaddr
.blockend_6: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    pop rax
    push rax
    push rax
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_heap_free
.blockend_7: ; call
    pop rax
    push rax
    push rax
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_str_len
.blockend_8: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_mem_cpy
.blockend_9: ; call
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_str_len
.blockend_10: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_str_len
.blockend_11: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_str_catc:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    pop rax
    push rax
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_len
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_len
.blockend_1: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    pop rax
    push rax
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_len
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_str_len
.blockend_4: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_heap_realloc
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_2: ; if
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_str_endaddr
.blockend_6: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    pop rax
    push rax
    push rax
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_cstr_len
.blockend_7: ; call
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_mem_cpy
.blockend_8: ; call
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_cstr_len
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_str_len
.blockend_10: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_str_sput:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_heap_realloc
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_mem_cpy
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_str_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_str_ceq:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_str_len
.blockend_0: ; call
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_len
.blockend_1: ; call
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    add rsp, 8
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    push rax
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_len
.blockend_3: ; call
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_mem_eq
.blockend_4: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_int_gettmp:
    push mem+8; int_tmpresult
    push qword 30
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+0; int_tmpidx
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_int_inctmpidx:
    push mem+0; int_tmpidx
    push mem+0; int_tmpidx
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_int_cstr:
.blockstart_0: ; do
    push qword 10
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_int_gettmp
.blockend_1: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_int_inctmpidx
.blockend_2: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_int_gettmp
.blockend_3: ; call
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+0; int_tmpidx
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_int_cstrhex:
.blockstart_0: ; do
    push qword 16
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
    pop rax
    push rax
    push rax
    push qword 9
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    push qword 97
    push qword 10
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockend_1: ; if
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockend_2: ; if
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_int_gettmp
.blockend_3: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_int_inctmpidx
.blockend_4: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_int_gettmp
.blockend_5: ; call
    push qword 36
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_int_inctmpidx
.blockend_6: ; call
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_int_gettmp
.blockend_7: ; call
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+0; int_tmpidx
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_int_print:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_int_cstr
.blockend_0: ; call
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_print
.blockend_1: ; call
    push mem+0; int_tmpidx
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_int_printhex:
.blockstart_0: ; do
    push qword 16
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
    pop rax
    push rax
    push rax
    push qword 9
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    push qword 97
    push qword 10
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockend_1: ; if
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockend_2: ; if
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_int_gettmp
.blockend_3: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_int_inctmpidx
.blockend_4: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_int_gettmp
.blockend_5: ; call
    push qword 120
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_int_inctmpidx
.blockend_6: ; call
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_int_gettmp
.blockend_7: ; call
    push qword 48
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_int_inctmpidx
.blockend_8: ; call
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_int_gettmp
.blockend_9: ; call
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_cstr_print
.blockend_10: ; call
    push mem+0; int_tmpidx
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headfilepos_print:
; headfilepos_advance:
proc_filepos_print:
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    push str_17
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_print
.blockend_1: ; call
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_int_print
.blockend_2: ; call
    push str_18
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_print
.blockend_3: ; call
    pop rax
    push rax
    push rax
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_int_print
.blockend_4: ; call
    push str_19
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_cstr_print
.blockend_5: ; call
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    pop rax
    push rax
    push rax
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_str_print
.blockend_7: ; call
.blockend_6: ; if
    add rsp, 8
    push str_20
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_cstr_print
.blockend_8: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_filepos_advance:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headslmtoken_name:
; headslmtoken_print:
proc_slmtoken_name:
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_21
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    push str_22
.blockend_0: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    push str_23
.blockend_1: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    add rsp, 8
    push str_24
.blockend_2: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    add rsp, 8
    push str_25
.blockend_3: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 4
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    add rsp, 8
    push str_26
.blockend_4: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 5
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    add rsp, 8
    push str_27
.blockend_5: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 6
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    add rsp, 8
    push str_28
.blockend_6: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 7
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    add rsp, 8
    push str_29
.blockend_7: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_8: ; if
    jz .blockend_8
    add rsp, 8
    push str_30
.blockend_8: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 9
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
    add rsp, 8
    push str_31
.blockend_9: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_10: ; if
    jz .blockend_10
    add rsp, 8
    push str_32
.blockend_10: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 11
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_11: ; if
    jz .blockend_11
    add rsp, 8
    push str_33
.blockend_11: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 12
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_12: ; if
    jz .blockend_12
    add rsp, 8
    push str_34
.blockend_12: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 13
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_13: ; if
    jz .blockend_13
    add rsp, 8
    push str_35
.blockend_13: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 14
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_14: ; if
    jz .blockend_14
    add rsp, 8
    push str_36
.blockend_14: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 15
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_15: ; if
    jz .blockend_15
    add rsp, 8
    push str_37
.blockend_15: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 16
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_16: ; if
    jz .blockend_16
    add rsp, 8
    push str_38
.blockend_16: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 17
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_17: ; if
    jz .blockend_17
    add rsp, 8
    push str_39
.blockend_17: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 18
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_18: ; if
    jz .blockend_18
    add rsp, 8
    push str_40
.blockend_18: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 19
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_19: ; if
    jz .blockend_19
    add rsp, 8
    push str_41
.blockend_19: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 20
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_20: ; if
    jz .blockend_20
    add rsp, 8
    push str_42
.blockend_20: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 21
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_21: ; if
    jz .blockend_21
    add rsp, 8
    push str_43
.blockend_21: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 22
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_22: ; if
    jz .blockend_22
    add rsp, 8
    push str_44
.blockend_22: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 23
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_23: ; if
    jz .blockend_23
    add rsp, 8
    push str_45
.blockend_23: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 24
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_24: ; if
    jz .blockend_24
    add rsp, 8
    push str_46
.blockend_24: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 25
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_25: ; if
    jz .blockend_25
    add rsp, 8
    push str_47
.blockend_25: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 26
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_26: ; if
    jz .blockend_26
    add rsp, 8
    push str_48
.blockend_26: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 27
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_27: ; if
    jz .blockend_27
    add rsp, 8
    push str_49
.blockend_27: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 28
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_28: ; if
    jz .blockend_28
    add rsp, 8
    push str_50
.blockend_28: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 29
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_29: ; if
    jz .blockend_29
    add rsp, 8
    push str_51
.blockend_29: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 30
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_30: ; if
    jz .blockend_30
    add rsp, 8
    push str_52
.blockend_30: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 31
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_31: ; if
    jz .blockend_31
    add rsp, 8
    push str_53
.blockend_31: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 32
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_32: ; if
    jz .blockend_32
    add rsp, 8
    push str_54
.blockend_32: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 33
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_33: ; if
    jz .blockend_33
    add rsp, 8
    push str_55
.blockend_33: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 34
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_34: ; if
    jz .blockend_34
    add rsp, 8
    push str_56
.blockend_34: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 35
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_35: ; if
    jz .blockend_35
    add rsp, 8
    push str_57
.blockend_35: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 36
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_36: ; if
    jz .blockend_36
    add rsp, 8
    push str_58
.blockend_36: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 37
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_37: ; if
    jz .blockend_37
    add rsp, 8
    push str_59
.blockend_37: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 38
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_38: ; if
    jz .blockend_38
    add rsp, 8
    push str_60
.blockend_38: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 39
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_39: ; if
    jz .blockend_39
    add rsp, 8
    push str_61
.blockend_39: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 40
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_40: ; if
    jz .blockend_40
    add rsp, 8
    push str_62
.blockend_40: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 41
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_41: ; if
    jz .blockend_41
    add rsp, 8
    push str_63
.blockend_41: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 42
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_42: ; if
    jz .blockend_42
    add rsp, 8
    push str_64
.blockend_42: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 43
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_43: ; if
    jz .blockend_43
    add rsp, 8
    push str_65
.blockend_43: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 44
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_44: ; if
    jz .blockend_44
    add rsp, 8
    push str_66
.blockend_44: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 45
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_45: ; if
    jz .blockend_45
    add rsp, 8
    push str_67
.blockend_45: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 46
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_46: ; if
    jz .blockend_46
    add rsp, 8
    push str_68
.blockend_46: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 47
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_47: ; if
    jz .blockend_47
    add rsp, 8
    push str_69
.blockend_47: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 48
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_48: ; if
    jz .blockend_48
    add rsp, 8
    push str_70
.blockend_48: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 49
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_49: ; if
    jz .blockend_49
    add rsp, 8
    push str_71
.blockend_49: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 50
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_50: ; if
    jz .blockend_50
    add rsp, 8
    push str_72
.blockend_50: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 51
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_51: ; if
    jz .blockend_51
    add rsp, 8
    push str_73
.blockend_51: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 52
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_52: ; if
    jz .blockend_52
    add rsp, 8
    push str_74
.blockend_52: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 53
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_53: ; if
    jz .blockend_53
    add rsp, 8
    push str_75
.blockend_53: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 54
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_54: ; if
    jz .blockend_54
    add rsp, 8
    push str_76
.blockend_54: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 55
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_55: ; if
    jz .blockend_55
    add rsp, 8
    push str_77
.blockend_55: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 56
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_56: ; if
    jz .blockend_56
    add rsp, 8
    push str_78
.blockend_56: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 57
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_57: ; if
    jz .blockend_57
    add rsp, 8
    push str_79
.blockend_57: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 58
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_58: ; if
    jz .blockend_58
    add rsp, 8
    push str_80
.blockend_58: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 59
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_59: ; if
    jz .blockend_59
    add rsp, 8
    push str_81
.blockend_59: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 60
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_60: ; if
    jz .blockend_60
    add rsp, 8
    push str_82
.blockend_60: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 61
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_61: ; if
    jz .blockend_61
    add rsp, 8
    push str_83
.blockend_61: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 62
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_62: ; if
    jz .blockend_62
    add rsp, 8
    push str_84
.blockend_62: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 63
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_63: ; if
    jz .blockend_63
    add rsp, 8
    push str_85
.blockend_63: ; if
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_slmtoken_print:
    push str_86
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    pop rax
    push rax
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_slmtoken_name
.blockend_1: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    pop rax
    push rax
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_print
.blockend_3: ; call
.blockend_2: ; if
    add rsp, 8
    push str_87
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_print
.blockend_4: ; call
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    pop rax
    push rax
    push rax
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_str_print
.blockend_6: ; call
.blockend_5: ; if
    add rsp, 8
    push str_88
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_cstr_print
.blockend_7: ; call
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_filepos_print
.blockend_8: ; call
    push str_89
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_cstr_print
.blockend_9: ; call
    pop rax
    push rax
    push rax
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_filepos_print
.blockend_10: ; call
    push str_90
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_cstr_print
.blockend_11: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_filestream_free:
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_os_closef
.blockend_0: ; call
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_heap_free
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_filestream_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 1041
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 0
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 0
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 0
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 47
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    push qword -100
.blockend_1: ; if
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_os_openf
.blockend_2: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_heap_free
.blockend_4: ; call
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 512
    push qword 2
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_os_readf
.blockend_5: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_filestream_readchar:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 512
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 528
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 512
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_mem_cpy
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 528
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 512
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_mem_zero
.blockend_2: ; call
    push qword 512
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 528
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_os_readf
.blockend_3: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 512
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headdlist_new:
; headdlist_free:
; headdlist_len:
; headdlist_getptr:
; headdlist_pop:
; headdlist_append:
; headdlist_last:
proc_dlist_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 16
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 16
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_dlist_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_dlist_len:
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_dlist_getptr:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_dlist_pop:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_dlist_getptr
.blockend_1: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_dlist_append:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_heap_realloc
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_mem_cpy
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_dlist_last:
    pop rax
    push rax
    push rax
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_dlist_getptr
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headlexer_new:
; headlexer_free:
; headlexer_advance:
; headlexer_isbadword:
; headlexer_matchword:
; headlexer_gettoken:
; headlexer_run:
proc_lexer_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    push str_91
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_println
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_str_new
.blockend_2: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push str_92
    push qword 2
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_mem_eq
.blockend_3: ; call
    pop rax
    xor rax, 1
    push rax
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_93
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_os_env
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_str_catc
.blockend_6: ; call
    push str_94
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_str_catc
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_4: ; if
    pop rax
    push rax
    push rax
    push str_95
    push qword 2
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_mem_eq
.blockend_8: ; call
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_96
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_os_env
.blockend_10: ; call
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_str_catc
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockend_9: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_str_catc
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 170
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_heap_zalloc
.blockend_13: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_filestream_new
.blockend_14: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_str_new
.blockend_15: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_lexer_free:
    pop rax
    push rax
    push rax
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_str_free
.blockend_0: ; call
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_filestream_free
.blockend_1: ; call
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_heap_free
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_lexer_advance:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_filepos_advance
.blockend_0: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_filestream_readchar
.blockend_1: ; call
    pop rax
    push rax
    push rax
    push qword 92
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_filestream_readchar
.blockend_3: ; call
    pop rax
    push rax
    push rax
    push qword 110
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    add rsp, 8
    push qword 10
.blockend_4: ; if
.blockend_2: ; if
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_lexer_isbadword:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 39
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 34
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 96
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 40
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 123
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    push qword 1
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 39
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 2
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 39
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 34
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 2
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 34
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 96
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 2
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 96
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_5: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 40
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 2
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 41
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_6: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 123
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 2
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 125
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_7: ; if
    push qword 1
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_lexer_matchword:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_str_ceq
.blockend_0: ; call
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_lexer_gettoken:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_97
    push qword 22
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_lexer_matchword
.blockend_0: ; call
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    push str_98
    push qword 19
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_lexer_matchword
.blockend_2: ; call
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    push str_99
    push qword 13
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_lexer_matchword
.blockend_4: ; call
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_5: ; if
    push str_100
    push qword 36
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_lexer_matchword
.blockend_6: ; call
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_7: ; if
    push str_101
    push qword 5
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_lexer_matchword
.blockend_8: ; call
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_9: ; if
    push str_102
    push qword 25
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_lexer_matchword
.blockend_10: ; call
    pop rbx
    test rbx, rbx
.blockstart_11: ; if
    jz .blockend_11
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_11: ; if
    push str_103
    push qword 4
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_lexer_matchword
.blockend_12: ; call
    pop rbx
    test rbx, rbx
.blockstart_13: ; if
    jz .blockend_13
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_13: ; if
    push str_104
    push qword 10
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_lexer_matchword
.blockend_14: ; call
    pop rbx
    test rbx, rbx
.blockstart_15: ; if
    jz .blockend_15
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_15: ; if
    push str_105
    push qword 29
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_lexer_matchword
.blockend_16: ; call
    pop rbx
    test rbx, rbx
.blockstart_17: ; if
    jz .blockend_17
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_17: ; if
    push str_106
    push qword 28
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_lexer_matchword
.blockend_18: ; call
    pop rbx
    test rbx, rbx
.blockstart_19: ; if
    jz .blockend_19
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_19: ; if
    push str_107
    push qword 24
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_lexer_matchword
.blockend_20: ; call
    pop rbx
    test rbx, rbx
.blockstart_21: ; if
    jz .blockend_21
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_21: ; if
    push str_108
    push qword 27
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_lexer_matchword
.blockend_22: ; call
    pop rbx
    test rbx, rbx
.blockstart_23: ; if
    jz .blockend_23
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_23: ; if
    push str_109
    push qword 31
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_lexer_matchword
.blockend_24: ; call
    pop rbx
    test rbx, rbx
.blockstart_25: ; if
    jz .blockend_25
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_25: ; if
    push str_110
    push qword 30
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_lexer_matchword
.blockend_26: ; call
    pop rbx
    test rbx, rbx
.blockstart_27: ; if
    jz .blockend_27
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_27: ; if
    push str_111
    push qword 7
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_lexer_matchword
.blockend_28: ; call
    pop rbx
    test rbx, rbx
.blockstart_29: ; if
    jz .blockend_29
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_29: ; if
    push str_112
    push qword 16
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_lexer_matchword
.blockend_30: ; call
    pop rbx
    test rbx, rbx
.blockstart_31: ; if
    jz .blockend_31
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_31: ; if
    push str_113
    push qword 14
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_lexer_matchword
.blockend_32: ; call
    pop rbx
    test rbx, rbx
.blockstart_33: ; if
    jz .blockend_33
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_33: ; if
    push str_114
    push qword 12
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_lexer_matchword
.blockend_34: ; call
    pop rbx
    test rbx, rbx
.blockstart_35: ; if
    jz .blockend_35
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_35: ; if
    push str_115
    push qword 11
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_lexer_matchword
.blockend_36: ; call
    pop rbx
    test rbx, rbx
.blockstart_37: ; if
    jz .blockend_37
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_37: ; if
    push str_116
    push qword 55
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_lexer_matchword
.blockend_38: ; call
    pop rbx
    test rbx, rbx
.blockstart_39: ; if
    jz .blockend_39
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_39: ; if
    push str_117
    push qword 56
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_lexer_matchword
.blockend_40: ; call
    pop rbx
    test rbx, rbx
.blockstart_41: ; if
    jz .blockend_41
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_41: ; if
    push str_118
    push qword 54
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_lexer_matchword
.blockend_42: ; call
    pop rbx
    test rbx, rbx
.blockstart_43: ; if
    jz .blockend_43
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_43: ; if
    push str_119
    push qword 57
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_lexer_matchword
.blockend_44: ; call
    pop rbx
    test rbx, rbx
.blockstart_45: ; if
    jz .blockend_45
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_45: ; if
    push str_120
    push qword 58
.blockstart_46: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_46
    jmp proc_lexer_matchword
.blockend_46: ; call
    pop rbx
    test rbx, rbx
.blockstart_47: ; if
    jz .blockend_47
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_47: ; if
    push str_121
    push qword 59
.blockstart_48: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_48
    jmp proc_lexer_matchword
.blockend_48: ; call
    pop rbx
    test rbx, rbx
.blockstart_49: ; if
    jz .blockend_49
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_49: ; if
    push str_122
    push qword 60
.blockstart_50: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_50
    jmp proc_lexer_matchword
.blockend_50: ; call
    pop rbx
    test rbx, rbx
.blockstart_51: ; if
    jz .blockend_51
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_51: ; if
    push str_123
    push qword 61
.blockstart_52: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_52
    jmp proc_lexer_matchword
.blockend_52: ; call
    pop rbx
    test rbx, rbx
.blockstart_53: ; if
    jz .blockend_53
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_53: ; if
    push str_124
    push qword 62
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_lexer_matchword
.blockend_54: ; call
    pop rbx
    test rbx, rbx
.blockstart_55: ; if
    jz .blockend_55
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_55: ; if
    push str_125
    push qword 63
.blockstart_56: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_56
    jmp proc_lexer_matchword
.blockend_56: ; call
    pop rbx
    test rbx, rbx
.blockstart_57: ; if
    jz .blockend_57
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_57: ; if
    push str_126
    push qword 47
.blockstart_58: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_58
    jmp proc_lexer_matchword
.blockend_58: ; call
    pop rbx
    test rbx, rbx
.blockstart_59: ; if
    jz .blockend_59
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_59: ; if
    push str_127
    push qword 26
.blockstart_60: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_60
    jmp proc_lexer_matchword
.blockend_60: ; call
    pop rbx
    test rbx, rbx
.blockstart_61: ; if
    jz .blockend_61
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_61: ; if
    push str_128
    push qword 6
.blockstart_62: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_62
    jmp proc_lexer_matchword
.blockend_62: ; call
    pop rbx
    test rbx, rbx
.blockstart_63: ; if
    jz .blockend_63
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_63: ; if
    push str_129
    push qword 17
.blockstart_64: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_64
    jmp proc_lexer_matchword
.blockend_64: ; call
    pop rbx
    test rbx, rbx
.blockstart_65: ; if
    jz .blockend_65
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_65: ; if
    push str_130
    push qword 21
.blockstart_66: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_66
    jmp proc_lexer_matchword
.blockend_66: ; call
    pop rbx
    test rbx, rbx
.blockstart_67: ; if
    jz .blockend_67
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_67: ; if
    push str_131
    push qword 20
.blockstart_68: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_68
    jmp proc_lexer_matchword
.blockend_68: ; call
    pop rbx
    test rbx, rbx
.blockstart_69: ; if
    jz .blockend_69
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_69: ; if
    push str_132
    push qword 18
.blockstart_70: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_70
    jmp proc_lexer_matchword
.blockend_70: ; call
    pop rbx
    test rbx, rbx
.blockstart_71: ; if
    jz .blockend_71
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_71: ; if
    push str_133
    push qword 1
.blockstart_72: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_72
    jmp proc_lexer_matchword
.blockend_72: ; call
    pop rbx
    test rbx, rbx
.blockstart_73: ; if
    jz .blockend_73
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_73: ; if
    push str_134
    push qword 8
.blockstart_74: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_74
    jmp proc_lexer_matchword
.blockend_74: ; call
    pop rbx
    test rbx, rbx
.blockstart_75: ; if
    jz .blockend_75
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_75: ; if
    push str_135
    push qword 9
.blockstart_76: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_76
    jmp proc_lexer_matchword
.blockend_76: ; call
    pop rbx
    test rbx, rbx
.blockstart_77: ; if
    jz .blockend_77
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_77: ; if
    push str_136
    push qword 2
.blockstart_78: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_78
    jmp proc_lexer_matchword
.blockend_78: ; call
    pop rbx
    test rbx, rbx
.blockstart_79: ; if
    jz .blockend_79
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_79: ; if
    push str_137
    push qword 3
.blockstart_80: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_80
    jmp proc_lexer_matchword
.blockend_80: ; call
    pop rbx
    test rbx, rbx
.blockstart_81: ; if
    jz .blockend_81
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_81: ; if
    push str_138
    push qword 15
.blockstart_82: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_82
    jmp proc_lexer_matchword
.blockend_82: ; call
    pop rbx
    test rbx, rbx
.blockstart_83: ; if
    jz .blockend_83
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_83: ; if
    push str_139
    push qword 35
.blockstart_84: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_84
    jmp proc_lexer_matchword
.blockend_84: ; call
    pop rbx
    test rbx, rbx
.blockstart_85: ; if
    jz .blockend_85
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_85: ; if
    push str_140
    push qword 43
.blockstart_86: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_86
    jmp proc_lexer_matchword
.blockend_86: ; call
    pop rbx
    test rbx, rbx
.blockstart_87: ; if
    jz .blockend_87
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_87: ; if
    push str_141
    push qword 44
.blockstart_88: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_88
    jmp proc_lexer_matchword
.blockend_88: ; call
    pop rbx
    test rbx, rbx
.blockstart_89: ; if
    jz .blockend_89
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_89: ; if
    push str_142
    push qword 39
.blockstart_90: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_90
    jmp proc_lexer_matchword
.blockend_90: ; call
    pop rbx
    test rbx, rbx
.blockstart_91: ; if
    jz .blockend_91
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_91: ; if
    push str_143
    push qword 40
.blockstart_92: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_92
    jmp proc_lexer_matchword
.blockend_92: ; call
    pop rbx
    test rbx, rbx
.blockstart_93: ; if
    jz .blockend_93
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_93: ; if
    push str_144
    push qword 42
.blockstart_94: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_94
    jmp proc_lexer_matchword
.blockend_94: ; call
    pop rbx
    test rbx, rbx
.blockstart_95: ; if
    jz .blockend_95
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_95: ; if
    push str_145
    push qword 46
.blockstart_96: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_96
    jmp proc_lexer_matchword
.blockend_96: ; call
    pop rbx
    test rbx, rbx
.blockstart_97: ; if
    jz .blockend_97
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_97: ; if
    push str_146
    push qword 45
.blockstart_98: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_98
    jmp proc_lexer_matchword
.blockend_98: ; call
    pop rbx
    test rbx, rbx
.blockstart_99: ; if
    jz .blockend_99
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_99: ; if
    push str_147
    push qword 23
.blockstart_100: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_100
    jmp proc_lexer_matchword
.blockend_100: ; call
    pop rbx
    test rbx, rbx
.blockstart_101: ; if
    jz .blockend_101
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_101: ; if
    push str_148
    push qword 37
.blockstart_102: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_102
    jmp proc_lexer_matchword
.blockend_102: ; call
    pop rbx
    test rbx, rbx
.blockstart_103: ; if
    jz .blockend_103
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_103: ; if
    push str_149
    push qword 38
.blockstart_104: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_104
    jmp proc_lexer_matchword
.blockend_104: ; call
    pop rbx
    test rbx, rbx
.blockstart_105: ; if
    jz .blockend_105
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_105: ; if
    push str_150
    push qword 32
.blockstart_106: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_106
    jmp proc_lexer_matchword
.blockend_106: ; call
    pop rbx
    test rbx, rbx
.blockstart_107: ; if
    jz .blockend_107
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_107: ; if
    push str_151
    push qword 33
.blockstart_108: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_108
    jmp proc_lexer_matchword
.blockend_108: ; call
    pop rbx
    test rbx, rbx
.blockstart_109: ; if
    jz .blockend_109
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_109: ; if
    push str_152
    push qword 34
.blockstart_110: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_110
    jmp proc_lexer_matchword
.blockend_110: ; call
    pop rbx
    test rbx, rbx
.blockstart_111: ; if
    jz .blockend_111
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_111: ; if
    push str_153
    push qword 41
.blockstart_112: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_112
    jmp proc_lexer_matchword
.blockend_112: ; call
    pop rbx
    test rbx, rbx
.blockstart_113: ; if
    jz .blockend_113
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_113: ; if
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_114: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_114
    jmp proc_cstr_isnum
.blockend_114: ; call
    pop rbx
    test rbx, rbx
.blockstart_115: ; if
    jz .blockend_115
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 48
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_115: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 123
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_116: ; if
    jz .blockend_116
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 53
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_116: ; if
    pop rax
    push rax
    push rax
    push qword 34
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_117: ; if
    jz .blockend_117
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 49
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_118: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_118
    jmp proc_str_sput
.blockend_118: ; call
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_117: ; if
    pop rax
    push rax
    push rax
    push qword 96
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_119: ; if
    jz .blockend_119
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 50
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_120: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_120
    jmp proc_str_sput
.blockend_120: ; call
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_119: ; if
    pop rax
    push rax
    push rax
    push qword 39
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_121: ; if
    jz .blockend_121
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 48
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
.blockstart_122: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_122
    jmp proc_int_cstr
.blockend_122: ; call
    pop rax
    push rax
    push rax
.blockstart_123: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_123
    jmp proc_cstr_len
.blockend_123: ; call
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_124: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_124
    jmp proc_str_sput
.blockend_124: ; call
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_121: ; if
    pop rax
    push rax
    push rax
    push qword 40
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_125: ; if
    jz .blockend_125
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 52
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 2
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_126: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_126
    jmp proc_str_sput
.blockend_126: ; call
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_125: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_lexer_run:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push qword 80
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_dlist_new
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockstart_1: ; do
.blockstart_2: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_lexer_advance
.blockend_3: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 9
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 13
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 32
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rbx
    test rbx, rbx
    jnz .blockstart_2
.blockend_2: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 32
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_mem_cpy
.blockend_4: ; call
.blockstart_5: ; do
.blockstart_6: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_lexer_advance
.blockend_7: ; call
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_str_catc
.blockend_8: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 9
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 13
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 32
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    xor rax, 1
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rbx
    test rbx, rbx
    jnz .blockstart_6
.blockend_6: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_lexer_isbadword
.blockend_9: ; call
    pop rbx
    test rbx, rbx
    jnz .blockstart_5
.blockend_5: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_10: ; if
    jz .blockend_10
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
.blockend_10: ; if
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 51
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_str_new
.blockend_11: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_str_sput
.blockend_12: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 32
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_mem_cpy
.blockend_13: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 32
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_mem_cpy
.blockend_14: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_lexer_gettoken
.blockend_15: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 82
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_16: ; if
    jz .blockend_16
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 90
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_dlist_append
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_16: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_lexer_free
.blockend_18: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headerror_new:
; headerror_name:
; headerror_eval:
proc_error_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 73
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 65
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 32
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_mem_cpy
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 33
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 32
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_mem_cpy
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_error_name:
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push str_154
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    add rsp, 8
    push str_155
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    add rsp, 8
    push str_156
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    add rsp, 8
    add rsp, 8
    push str_157
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 4
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    add rsp, 8
    add rsp, 8
    push str_158
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    add rsp, 8
    add rsp, 8
    push str_159
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 5
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    add rsp, 8
    add rsp, 8
    push str_160
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_5: ; if
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_error_eval:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_error_name
.blockend_0: ; call
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_print
.blockend_1: ; call
    push str_161
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 65
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_print
.blockend_3: ; call
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_cr
.blockend_4: ; call
    push str_162
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_cstr_print
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_filepos_print
.blockend_6: ; call
    push str_163
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_cstr_print
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 33
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_filepos_print
.blockend_8: ; call
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_cstr_cr
.blockend_9: ; call
    push qword 1
    mov rax, 60
    pop rdi
    syscall
; headnodedata_free:
; headnodedata_print:
; headcalldata_new:
; headcalldata_free:
; headcalldata_print:
; headasmdata_new:
; headasmdata_free:
; headasmdata_print:
; headincdata_new:
; headincdata_free:
; headincdata_print:
; headofdata_new:
; headofdata_free:
; headofdata_print:
; headcommentdata_new:
; headcommentdata_free:
; headcommentdata_print:
; headintrdata_new:
; headintrdata_free:
; headintrdata_print:
; headvardata_new:
; headvardata_free:
; headvardata_print:
; headdefdata_new:
; headdefdata_free:
; headdefdata_print:
; headpropdata_new:
; headpropdata_free:
; headpropdata_print:
; headconstdata_new:
; headconstdata_free:
; headconstdata_print:
; headfiledata_new:
; headfiledata_free:
; headfiledata_print:
; headfiledata_append:
; headblockdata_new:
; headblockdata_free:
; headblockdata_print:
; headblockdata_append:
; headslmnode_new:
; headslmnode_free:
; headslmnode_print:
proc_nodedata_free:
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_calldata_free
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    add rsp, 8
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_asmdata_free
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    add rsp, 8
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_incdata_free
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    pop rax
    push rax
    push rax
    push qword 4
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    add rsp, 8
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_ofdata_free
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_6: ; if
    pop rax
    push rax
    push rax
    push qword 5
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_8: ; if
    jz .blockend_8
    add rsp, 8
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_commentdata_free
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_8: ; if
    pop rax
    push rax
    push rax
    push qword 6
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_10: ; if
    jz .blockend_10
    add rsp, 8
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_intrdata_free
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_10: ; if
    pop rax
    push rax
    push rax
    push qword 7
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_12: ; if
    jz .blockend_12
    add rsp, 8
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_vardata_free
.blockend_13: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_12: ; if
    pop rax
    push rax
    push rax
    push qword 8
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_14: ; if
    jz .blockend_14
    add rsp, 8
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_defdata_free
.blockend_15: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_14: ; if
    pop rax
    push rax
    push rax
    push qword 9
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_16: ; if
    jz .blockend_16
    add rsp, 8
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_propdata_free
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_16: ; if
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_18: ; if
    jz .blockend_18
    add rsp, 8
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_constdata_free
.blockend_19: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_18: ; if
    pop rax
    push rax
    push rax
    push qword 11
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_20: ; if
    jz .blockend_20
    add rsp, 8
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_filedata_free
.blockend_21: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_20: ; if
    pop rax
    push rax
    push rax
    push qword 12
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_22: ; if
    jz .blockend_22
    add rsp, 8
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_blockdata_free
.blockend_23: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_22: ; if
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_nodedata_print:
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_calldata_print
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    add rsp, 8
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_asmdata_print
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    add rsp, 8
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_incdata_print
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    pop rax
    push rax
    push rax
    push qword 4
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    add rsp, 8
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_ofdata_print
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_6: ; if
    pop rax
    push rax
    push rax
    push qword 5
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_8: ; if
    jz .blockend_8
    add rsp, 8
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_commentdata_print
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_8: ; if
    pop rax
    push rax
    push rax
    push qword 6
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_10: ; if
    jz .blockend_10
    add rsp, 8
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_intrdata_print
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_10: ; if
    pop rax
    push rax
    push rax
    push qword 7
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_12: ; if
    jz .blockend_12
    add rsp, 8
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_vardata_print
.blockend_13: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_12: ; if
    pop rax
    push rax
    push rax
    push qword 8
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_14: ; if
    jz .blockend_14
    add rsp, 8
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_defdata_print
.blockend_15: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_14: ; if
    pop rax
    push rax
    push rax
    push qword 9
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_16: ; if
    jz .blockend_16
    add rsp, 8
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_propdata_print
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_16: ; if
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_18: ; if
    jz .blockend_18
    add rsp, 8
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_constdata_print
.blockend_19: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_18: ; if
    pop rax
    push rax
    push rax
    push qword 11
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_20: ; if
    jz .blockend_20
    add rsp, 8
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_filedata_print
.blockend_21: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_20: ; if
    pop rax
    push rax
    push rax
    push qword 12
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_22: ; if
    jz .blockend_22
    add rsp, 8
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_blockdata_print
.blockend_23: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_22: ; if
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_calldata_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_calldata_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_calldata_print:
    push str_164
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_print
.blockend_1: ; call
    push str_165
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_asmdata_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 2
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_asmdata_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_asmdata_print:
    push str_166
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_print
.blockend_1: ; call
    push str_167
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_incdata_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_incdata_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_incdata_print:
    push str_168
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_print
.blockend_1: ; call
    push str_169
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_ofdata_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 4
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_ofdata_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_ofdata_print:
    push str_170
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_print
.blockend_1: ; call
    push str_171
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_commentdata_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 8
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 5
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_commentdata_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_commentdata_print:
    push str_172
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_intrdata_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 6
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_intrdata_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_intrdata_print:
    push str_173
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_int_print
.blockend_1: ; call
    push str_174
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_vardata_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 32
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 7
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_vardata_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_vardata_print:
    push str_175
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_print
.blockend_1: ; call
    push str_176
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    pop rax
    push rax
    push rax
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_str_print
.blockend_3: ; call
    push str_177
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_print
.blockend_4: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_defdata_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 32
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 8
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_defdata_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_defdata_print:
    push str_178
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_print
.blockend_1: ; call
    push str_179
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    pop rax
    push rax
    push rax
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_str_print
.blockend_3: ; call
    push str_180
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_print
.blockend_4: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_propdata_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 32
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 9
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_propdata_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_propdata_print:
    push str_181
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_print
.blockend_1: ; call
    push str_182
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    pop rax
    push rax
    push rax
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_str_print
.blockend_3: ; call
    push str_183
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_print
.blockend_4: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_constdata_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 24
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 10
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_constdata_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_constdata_print:
    push str_184
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_print
.blockend_1: ; call
    push str_185
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_int_print
.blockend_3: ; call
    push str_186
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_print
.blockend_4: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_filedata_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 24
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 11
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_filedata_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_filedata_print:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push str_187
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    push qword 0
.blockstart_2: ; do
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_slmnode_print
.blockend_3: ; call
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_2
.blockend_2: ; do
    add rsp, 8
    push str_188
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_print
.blockend_4: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_filedata_append:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 2
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_realloc
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_blockdata_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 56
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 12
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 32
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_blockdata_free:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_blockdata_print:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push str_189
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_int_print
.blockend_1: ; call
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    push str_190
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_print
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push str_191
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_println
.blockend_4: ; call
    push qword 0
.blockstart_5: ; do
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 56
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_slmnode_print
.blockend_6: ; call
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_5
.blockend_5: ; do
    add rsp, 8
    push str_192
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_cstr_print
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_blockdata_append:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 2
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    push qword 56
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_realloc
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 56
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_slmnode_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 74
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 32
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_mem_cpy
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 32
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_mem_cpy
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_slmnode_free:
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_nodedata_free
.blockend_0: ; call
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_heap_free
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_slmnode_print:
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_nodedata_print
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headparserresult_register:
; headparserresult_success:
; headparserresult_failure:
; headparser_new:
; headparser_free:
; headparser_advance:
; headparser_run:
; headparser_runinside:
; headparser_subintr:
; headparser_asserttype:
; headparser_inblock:
; headparser_setuperr:
; headparser_parseintr:
; headparser_parsenum:
; headparser_parsestring:
; headparser_parsesstring:
; headparser_parseword:
; headparser_parsecall:
; headparser_parseinc:
; headparser_parseasm:
; headparser_parseof:
; headparser_parseprop:
; headparser_parseconst:
; headparser_parsevar:
; headparser_parsecomment:
; headparser_parseif:
; headparser_parsesim:
; headparser_parsedo:
; headparser_parseproc:
; headparser_parselambda:
; headparser_parsenamed:
; headparser_parseenum:
; headparser_parseclass:
; headparser_parsefile:
; headparser_parseinside:
proc_parserresult_register:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_heap_free
.blockend_3: ; call
.blockend_2: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_1: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parserresult_success:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parserresult_failure:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 24
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword -1
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_free:
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_dlist_free
.blockend_0: ; call
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_heap_free
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_advance:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    push qword 0
.blockend_0: ; if
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_dlist_len
.blockend_1: ; call
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_dlist_getptr
.blockend_3: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_2: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_run:
    push str_193
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_dlist_len
.blockend_1: ; call
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_int_cstr
.blockend_2: ; call
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_print
.blockend_3: ; call
    push str_194
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_println
.blockend_4: ; call
    push mem+65; parser_running
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_parser_parsefile
.blockend_5: ; call
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_error_eval
.blockend_7: ; call
.blockend_6: ; if
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_heap_free
.blockend_8: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_parser_advance
.blockend_9: ; call
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_10: ; if
    jz .blockend_10
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_slmtoken_print
.blockend_11: ; call
    add rsp, 8
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_cstr_cr
.blockend_12: ; call
    push qword 1
    mov rax, 60
    pop rdi
    syscall
.blockend_10: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_parser_free
.blockend_13: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_runinside:
    push str_195
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_println
.blockend_0: ; call
    push qword 1
    mov rax, 60
    pop rdi
    syscall
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_subintr:
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_intrdata_new
.blockend_1: ; call
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_slmnode_new
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_asserttype:
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_parser_advance
.blockend_0: ; call
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_setuperr:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_dlist_getptr
.blockend_0: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockend_1: ; if
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_error_new
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parseintr:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_advance
.blockend_1: ; call
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push qword 2
    push qword 29
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_parser_subintr
.blockend_3: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_parserresult_success
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    add rsp, 8
    push qword 14
    push qword 30
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_parser_subintr
.blockend_6: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_parserresult_success
.blockend_8: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_7: ; if
    add rsp, 8
    push qword 7
    push qword 31
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_parser_subintr
.blockend_9: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_10: ; if
    jz .blockend_10
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_parserresult_success
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_10: ; if
    add rsp, 8
    push qword 19
    push qword 39
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_parser_subintr
.blockend_12: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_13: ; if
    jz .blockend_13
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_parserresult_success
.blockend_14: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_13: ; if
    add rsp, 8
    push qword 22
    push qword 40
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_parser_subintr
.blockend_15: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_16: ; if
    jz .blockend_16
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_parserresult_success
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_16: ; if
    add rsp, 8
    push qword 21
    push qword 42
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_parser_subintr
.blockend_18: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_19: ; if
    jz .blockend_19
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_parserresult_success
.blockend_20: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_19: ; if
    add rsp, 8
    push qword 20
    push qword 41
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_parser_subintr
.blockend_21: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_22: ; if
    jz .blockend_22
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_parserresult_success
.blockend_23: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_22: ; if
    add rsp, 8
    push qword 3
    push qword 24
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_parser_subintr
.blockend_24: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_25: ; if
    jz .blockend_25
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_parserresult_success
.blockend_26: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_25: ; if
    add rsp, 8
    push qword 4
    push qword 25
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_parser_subintr
.blockend_27: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_28: ; if
    jz .blockend_28
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_parserresult_success
.blockend_29: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_28: ; if
    add rsp, 8
    push qword 5
    push qword 26
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_parser_subintr
.blockend_30: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_31: ; if
    jz .blockend_31
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_parserresult_success
.blockend_32: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_31: ; if
    add rsp, 8
    push qword 6
    push qword 27
.blockstart_33: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_33
    jmp proc_parser_subintr
.blockend_33: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_34: ; if
    jz .blockend_34
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_parserresult_success
.blockend_35: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_34: ; if
    add rsp, 8
    push qword 15
    push qword 28
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_parser_subintr
.blockend_36: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_37: ; if
    jz .blockend_37
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_parserresult_success
.blockend_38: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_37: ; if
    add rsp, 8
    push qword 16
    push qword 32
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_parser_subintr
.blockend_39: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_40: ; if
    jz .blockend_40
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_parserresult_success
.blockend_41: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_40: ; if
    add rsp, 8
    push qword 17
    push qword 33
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_parser_subintr
.blockend_42: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_43: ; if
    jz .blockend_43
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_parserresult_success
.blockend_44: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_43: ; if
    add rsp, 8
    push qword 18
    push qword 34
.blockstart_45: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_45
    jmp proc_parser_subintr
.blockend_45: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_46: ; if
    jz .blockend_46
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_47: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_47
    jmp proc_parserresult_success
.blockend_47: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_46: ; if
    add rsp, 8
    push qword 24
    push qword 35
.blockstart_48: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_48
    jmp proc_parser_subintr
.blockend_48: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_49: ; if
    jz .blockend_49
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_50: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_50
    jmp proc_parserresult_success
.blockend_50: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_49: ; if
    add rsp, 8
    push qword 12
    push qword 37
.blockstart_51: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_51
    jmp proc_parser_subintr
.blockend_51: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_52: ; if
    jz .blockend_52
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_53: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_53
    jmp proc_parserresult_success
.blockend_53: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_52: ; if
    add rsp, 8
    push qword 13
    push qword 38
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_parser_subintr
.blockend_54: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_55: ; if
    jz .blockend_55
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_56: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_56
    jmp proc_parserresult_success
.blockend_56: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_55: ; if
    add rsp, 8
    push qword 8
    push qword 43
.blockstart_57: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_57
    jmp proc_parser_subintr
.blockend_57: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_58: ; if
    jz .blockend_58
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_59: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_59
    jmp proc_parserresult_success
.blockend_59: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_58: ; if
    add rsp, 8
    push qword 9
    push qword 44
.blockstart_60: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_60
    jmp proc_parser_subintr
.blockend_60: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_61: ; if
    jz .blockend_61
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_62: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_62
    jmp proc_parserresult_success
.blockend_62: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_61: ; if
    add rsp, 8
    push qword 10
    push qword 45
.blockstart_63: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_63
    jmp proc_parser_subintr
.blockend_63: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_64: ; if
    jz .blockend_64
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_65: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_65
    jmp proc_parserresult_success
.blockend_65: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_64: ; if
    add rsp, 8
    push qword 11
    push qword 46
.blockstart_66: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_66
    jmp proc_parser_subintr
.blockend_66: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_67: ; if
    jz .blockend_67
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_68: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_68
    jmp proc_parserresult_success
.blockend_68: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_67: ; if
    add rsp, 8
    push qword 23
    push qword 9
.blockstart_69: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_69
    jmp proc_parser_subintr
.blockend_69: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_70: ; if
    jz .blockend_70
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_71: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_71
    jmp proc_parserresult_success
.blockend_71: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_70: ; if
    add rsp, 8
    push qword 0
    push qword 8
.blockstart_72: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_72
    jmp proc_parser_subintr
.blockend_72: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_73: ; if
    jz .blockend_73
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_74: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_74
    jmp proc_parserresult_success
.blockend_74: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_73: ; if
    add rsp, 8
    push qword 26
    push qword 56
.blockstart_75: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_75
    jmp proc_parser_subintr
.blockend_75: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_76: ; if
    jz .blockend_76
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_77: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_77
    jmp proc_parserresult_success
.blockend_77: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_76: ; if
    add rsp, 8
    push qword 27
    push qword 55
.blockstart_78: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_78
    jmp proc_parser_subintr
.blockend_78: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_79: ; if
    jz .blockend_79
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_80: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_80
    jmp proc_parserresult_success
.blockend_80: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_79: ; if
    add rsp, 8
    push qword 28
    push qword 54
.blockstart_81: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_81
    jmp proc_parser_subintr
.blockend_81: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_82: ; if
    jz .blockend_82
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_83: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_83
    jmp proc_parserresult_success
.blockend_83: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_82: ; if
    add rsp, 8
    push qword 25
    push qword 16
.blockstart_84: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_84
    jmp proc_parser_subintr
.blockend_84: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_85: ; if
    jz .blockend_85
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_86: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_86
    jmp proc_parserresult_success
.blockend_86: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_85: ; if
    add rsp, 8
    push qword 29
    push qword 57
.blockstart_87: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_87
    jmp proc_parser_subintr
.blockend_87: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_88: ; if
    jz .blockend_88
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_89: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_89
    jmp proc_parserresult_success
.blockend_89: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_88: ; if
    add rsp, 8
    push qword 30
    push qword 58
.blockstart_90: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_90
    jmp proc_parser_subintr
.blockend_90: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_91: ; if
    jz .blockend_91
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_92: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_92
    jmp proc_parserresult_success
.blockend_92: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_91: ; if
    add rsp, 8
    push qword 31
    push qword 59
.blockstart_93: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_93
    jmp proc_parser_subintr
.blockend_93: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_94: ; if
    jz .blockend_94
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_95: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_95
    jmp proc_parserresult_success
.blockend_95: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_94: ; if
    add rsp, 8
    push qword 32
    push qword 60
.blockstart_96: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_96
    jmp proc_parser_subintr
.blockend_96: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_97: ; if
    jz .blockend_97
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_98: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_98
    jmp proc_parserresult_success
.blockend_98: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_97: ; if
    add rsp, 8
    push qword 33
    push qword 61
.blockstart_99: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_99
    jmp proc_parser_subintr
.blockend_99: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_100: ; if
    jz .blockend_100
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_101: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_101
    jmp proc_parserresult_success
.blockend_101: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_100: ; if
    add rsp, 8
    push qword 34
    push qword 62
.blockstart_102: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_102
    jmp proc_parser_subintr
.blockend_102: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_103: ; if
    jz .blockend_103
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_104: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_104
    jmp proc_parserresult_success
.blockend_104: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_103: ; if
    add rsp, 8
    push qword 35
    push qword 63
.blockstart_105: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_105
    jmp proc_parser_subintr
.blockend_105: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_106: ; if
    jz .blockend_106
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_107: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_107
    jmp proc_parserresult_success
.blockend_107: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_106: ; if
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parsenum:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 48
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    add rsp, 8
    push qword 0
.blockend_3: ; if
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_dlist_getptr
.blockend_4: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_constdata_new
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_slmnode_new
.blockend_6: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parserresult_success
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parsestring:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 49
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    add rsp, 8
    push qword 0
.blockend_3: ; if
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_dlist_getptr
.blockend_4: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_constdata_new
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_slmnode_new
.blockend_6: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parserresult_success
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parsesstring:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 50
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    add rsp, 8
    push qword 0
.blockend_3: ; if
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_dlist_getptr
.blockend_4: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 2
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_constdata_new
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_slmnode_new
.blockend_6: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parserresult_success
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parseword:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 51
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    add rsp, 8
    push qword 0
.blockend_3: ; if
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_dlist_getptr
.blockend_4: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_constdata_new
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_slmnode_new
.blockend_6: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parserresult_success
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parsecall:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 52
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    add rsp, 8
    push qword 0
.blockend_3: ; if
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_dlist_getptr
.blockend_4: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_calldata_new
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_slmnode_new
.blockend_6: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parserresult_success
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parseinc:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 1
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push qword 49
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_parser_asserttype
.blockend_3: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_196
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_parser_setuperr
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_parserresult_failure
.blockend_6: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    add rsp, 8
    push qword 0
.blockend_7: ; if
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_dlist_getptr
.blockend_8: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_incdata_new
.blockend_9: ; call
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_slmnode_new
.blockend_10: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_parserresult_success
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parseasm:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 18
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push qword 49
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_parser_asserttype
.blockend_3: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_197
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_parser_setuperr
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_parserresult_failure
.blockend_6: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    add rsp, 8
    push qword 0
.blockend_7: ; if
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_dlist_getptr
.blockend_8: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_asmdata_new
.blockend_9: ; call
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_slmnode_new
.blockend_10: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_parserresult_success
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parseof:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 15
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push qword 51
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_parser_asserttype
.blockend_3: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_198
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_parser_setuperr
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_parserresult_failure
.blockend_6: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    add rsp, 8
    push qword 0
.blockend_7: ; if
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_dlist_getptr
.blockend_8: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_ofdata_new
.blockend_9: ; call
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_slmnode_new
.blockend_10: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_parserresult_success
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parseprop:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 7
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push qword 51
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_parser_asserttype
.blockend_3: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_199
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_parser_setuperr
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_parserresult_failure
.blockend_6: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 51
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parser_asserttype
.blockend_7: ; call
    pop rbx
    test rbx, rbx
.blockstart_8: ; if
    jz .blockend_8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
    add rsp, 8
    push qword 0
.blockend_9: ; if
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_dlist_getptr
.blockend_10: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 3
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_propdata_new
.blockend_11: ; call
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_slmnode_new
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_parserresult_success
.blockend_13: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_8: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_14: ; if
    jz .blockend_14
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_15: ; if
    jz .blockend_15
    add rsp, 8
    push qword 0
.blockend_15: ; if
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_dlist_getptr
.blockend_16: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_propdata_new
.blockend_17: ; call
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_slmnode_new
.blockend_18: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_parserresult_success
.blockend_19: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_14: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_200
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_parser_setuperr
.blockend_20: ; call
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_parserresult_failure
.blockend_21: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parseconst:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 36
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push qword 51
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_parser_asserttype
.blockend_3: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_201
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_parser_setuperr
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_parserresult_failure
.blockend_6: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 51
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parser_asserttype
.blockend_7: ; call
    pop rbx
    test rbx, rbx
.blockstart_8: ; if
    jz .blockend_8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_dlist_getptr
.blockend_9: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 3
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_defdata_new
.blockend_10: ; call
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_slmnode_new
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_parserresult_success
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_8: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_13: ; if
    jz .blockend_13
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_dlist_getptr
.blockend_14: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_defdata_new
.blockend_15: ; call
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_slmnode_new
.blockend_16: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_parserresult_success
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_13: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_202
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_parser_setuperr
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_parserresult_failure
.blockend_19: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parsevar:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 6
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push qword 51
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_parser_asserttype
.blockend_3: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_203
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_parser_setuperr
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_parserresult_failure
.blockend_6: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 51
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parser_asserttype
.blockend_7: ; call
    pop rbx
    test rbx, rbx
.blockstart_8: ; if
    jz .blockend_8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_dlist_getptr
.blockend_9: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 3
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_vardata_new
.blockend_10: ; call
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_slmnode_new
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_parserresult_success
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_8: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_13: ; if
    jz .blockend_13
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_dlist_getptr
.blockend_14: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_vardata_new
.blockend_15: ; call
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_slmnode_new
.blockend_16: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_parserresult_success
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_13: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_204
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_parser_setuperr
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_parserresult_failure
.blockend_19: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parsecomment:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 53
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_dlist_getptr
.blockend_3: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_commentdata_new
.blockend_4: ; call
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_slmnode_new
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_parserresult_success
.blockend_6: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parseif:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 2
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_dlist_getptr
.blockend_3: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    push qword 0
    push qword 0
    push qword 6
    push qword 0
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_blockdata_new
.blockend_4: ; call
.blockstart_5: ; do
    push qword 0
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parser_parsenum
.blockend_7: ; call
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_parserresult_register
.blockend_8: ; call
.blockend_6: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_parser_parsecall
.blockend_10: ; call
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_parserresult_register
.blockend_11: ; call
.blockend_9: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_12: ; if
    jz .blockend_12
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_parser_parsecomment
.blockend_13: ; call
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_parserresult_register
.blockend_14: ; call
.blockend_12: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_15: ; if
    jz .blockend_15
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_parser_parseintr
.blockend_16: ; call
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_parserresult_register
.blockend_17: ; call
.blockend_15: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_18: ; if
    jz .blockend_18
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_parser_parseword
.blockend_19: ; call
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_parserresult_register
.blockend_20: ; call
.blockend_18: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_21: ; if
    jz .blockend_21
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_parser_parseif
.blockend_22: ; call
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_parserresult_register
.blockend_23: ; call
.blockend_21: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_24: ; if
    jz .blockend_24
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_parser_parselambda
.blockend_25: ; call
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_parserresult_register
.blockend_26: ; call
.blockend_24: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_27: ; if
    jz .blockend_27
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_parser_parsesim
.blockend_28: ; call
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_parserresult_register
.blockend_29: ; call
.blockend_27: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_30: ; if
    jz .blockend_30
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_parser_parsedo
.blockend_31: ; call
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_parserresult_register
.blockend_32: ; call
.blockend_30: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_33: ; if
    jz .blockend_33
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_parser_parsestring
.blockend_34: ; call
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_parserresult_register
.blockend_35: ; call
.blockend_33: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_36: ; if
    jz .blockend_36
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_parser_parsesstring
.blockend_37: ; call
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_parserresult_register
.blockend_38: ; call
.blockend_36: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_39: ; if
    jz .blockend_39
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_parser_parseasm
.blockend_40: ; call
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_parserresult_register
.blockend_41: ; call
.blockend_39: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_42: ; if
    jz .blockend_42
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_parser_parsevar
.blockend_43: ; call
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_parserresult_register
.blockend_44: ; call
.blockend_42: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_45: ; if
    jz .blockend_45
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_46: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_46
    jmp proc_error_eval
.blockend_46: ; call
.blockend_45: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_47: ; if
    jz .blockend_47
.blockstart_48: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_48
    jmp proc_blockdata_append
.blockend_48: ; call
    push qword 1
.blockend_47: ; if
    pop rbx
    test rbx, rbx
    jnz .blockstart_5
.blockend_5: ; do
    push qword 47
.blockstart_49: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_49
    jmp proc_parser_asserttype
.blockend_49: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_50: ; if
    jz .blockend_50
    add rsp, 8
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_205
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_51: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_51
    jmp proc_parser_setuperr
.blockend_51: ; call
.blockstart_52: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_52
    jmp proc_parserresult_failure
.blockend_52: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_50: ; if
.blockstart_53: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_53
    jmp proc_slmnode_new
.blockend_53: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_parserresult_success
.blockend_54: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parsesim:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 17
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_dlist_getptr
.blockend_3: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    push qword 0
    push qword 0
    push qword 7
    push qword 0
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_blockdata_new
.blockend_4: ; call
.blockstart_5: ; do
    push qword 0
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parser_parsenum
.blockend_7: ; call
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_parserresult_register
.blockend_8: ; call
.blockend_6: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_parser_parsecall
.blockend_10: ; call
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_parserresult_register
.blockend_11: ; call
.blockend_9: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_12: ; if
    jz .blockend_12
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_parser_parsecomment
.blockend_13: ; call
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_parserresult_register
.blockend_14: ; call
.blockend_12: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_15: ; if
    jz .blockend_15
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_parser_parseintr
.blockend_16: ; call
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_parserresult_register
.blockend_17: ; call
.blockend_15: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_18: ; if
    jz .blockend_18
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_parser_parseword
.blockend_19: ; call
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_parserresult_register
.blockend_20: ; call
.blockend_18: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_21: ; if
    jz .blockend_21
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_parser_parseif
.blockend_22: ; call
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_parserresult_register
.blockend_23: ; call
.blockend_21: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_24: ; if
    jz .blockend_24
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_parser_parselambda
.blockend_25: ; call
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_parserresult_register
.blockend_26: ; call
.blockend_24: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_27: ; if
    jz .blockend_27
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_parser_parsesim
.blockend_28: ; call
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_parserresult_register
.blockend_29: ; call
.blockend_27: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_30: ; if
    jz .blockend_30
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_parser_parsedo
.blockend_31: ; call
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_parserresult_register
.blockend_32: ; call
.blockend_30: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_33: ; if
    jz .blockend_33
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_parser_parsestring
.blockend_34: ; call
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_parserresult_register
.blockend_35: ; call
.blockend_33: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_36: ; if
    jz .blockend_36
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_parser_parsesstring
.blockend_37: ; call
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_parserresult_register
.blockend_38: ; call
.blockend_36: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_39: ; if
    jz .blockend_39
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_parser_parseasm
.blockend_40: ; call
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_parserresult_register
.blockend_41: ; call
.blockend_39: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_42: ; if
    jz .blockend_42
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_parser_parsevar
.blockend_43: ; call
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_parserresult_register
.blockend_44: ; call
.blockend_42: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_45: ; if
    jz .blockend_45
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_46: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_46
    jmp proc_error_eval
.blockend_46: ; call
.blockend_45: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_47: ; if
    jz .blockend_47
.blockstart_48: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_48
    jmp proc_blockdata_append
.blockend_48: ; call
    push qword 1
.blockend_47: ; if
    pop rbx
    test rbx, rbx
    jnz .blockstart_5
.blockend_5: ; do
    push qword 47
.blockstart_49: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_49
    jmp proc_parser_asserttype
.blockend_49: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_50: ; if
    jz .blockend_50
    add rsp, 8
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_206
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_51: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_51
    jmp proc_parser_setuperr
.blockend_51: ; call
.blockstart_52: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_52
    jmp proc_parserresult_failure
.blockend_52: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_50: ; if
.blockstart_53: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_53
    jmp proc_slmnode_new
.blockend_53: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_parserresult_success
.blockend_54: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parsedo:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 3
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_dlist_getptr
.blockend_3: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    push qword 0
    push qword 0
    push qword 5
    push qword 0
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_blockdata_new
.blockend_4: ; call
.blockstart_5: ; do
    push qword 0
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parser_parsenum
.blockend_7: ; call
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_parserresult_register
.blockend_8: ; call
.blockend_6: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_parser_parsecall
.blockend_10: ; call
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_parserresult_register
.blockend_11: ; call
.blockend_9: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_12: ; if
    jz .blockend_12
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_parser_parsecomment
.blockend_13: ; call
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_parserresult_register
.blockend_14: ; call
.blockend_12: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_15: ; if
    jz .blockend_15
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_parser_parseintr
.blockend_16: ; call
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_parserresult_register
.blockend_17: ; call
.blockend_15: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_18: ; if
    jz .blockend_18
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_parser_parseword
.blockend_19: ; call
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_parserresult_register
.blockend_20: ; call
.blockend_18: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_21: ; if
    jz .blockend_21
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_parser_parseif
.blockend_22: ; call
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_parserresult_register
.blockend_23: ; call
.blockend_21: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_24: ; if
    jz .blockend_24
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_parser_parselambda
.blockend_25: ; call
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_parserresult_register
.blockend_26: ; call
.blockend_24: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_27: ; if
    jz .blockend_27
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_parser_parsesim
.blockend_28: ; call
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_parserresult_register
.blockend_29: ; call
.blockend_27: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_30: ; if
    jz .blockend_30
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_parser_parsedo
.blockend_31: ; call
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_parserresult_register
.blockend_32: ; call
.blockend_30: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_33: ; if
    jz .blockend_33
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_parser_parsestring
.blockend_34: ; call
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_parserresult_register
.blockend_35: ; call
.blockend_33: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_36: ; if
    jz .blockend_36
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_parser_parsesstring
.blockend_37: ; call
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_parserresult_register
.blockend_38: ; call
.blockend_36: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_39: ; if
    jz .blockend_39
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_parser_parseasm
.blockend_40: ; call
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_parserresult_register
.blockend_41: ; call
.blockend_39: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_42: ; if
    jz .blockend_42
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_parser_parsevar
.blockend_43: ; call
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_parserresult_register
.blockend_44: ; call
.blockend_42: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_45: ; if
    jz .blockend_45
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_46: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_46
    jmp proc_error_eval
.blockend_46: ; call
.blockend_45: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_47: ; if
    jz .blockend_47
.blockstart_48: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_48
    jmp proc_blockdata_append
.blockend_48: ; call
    push qword 1
.blockend_47: ; if
    pop rbx
    test rbx, rbx
    jnz .blockstart_5
.blockend_5: ; do
    push qword 47
.blockstart_49: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_49
    jmp proc_parser_asserttype
.blockend_49: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_50: ; if
    jz .blockend_50
    add rsp, 8
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_207
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_51: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_51
    jmp proc_parser_setuperr
.blockend_51: ; call
.blockstart_52: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_52
    jmp proc_parserresult_failure
.blockend_52: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_50: ; if
.blockstart_53: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_53
    jmp proc_slmnode_new
.blockend_53: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_parserresult_success
.blockend_54: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parseproc:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_advance
.blockend_1: ; call
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 14
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push qword 10
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_parser_advance
.blockend_4: ; call
    add rsp, 8
.blockend_3: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_5: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 13
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push qword 20
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parser_advance
.blockend_7: ; call
    add rsp, 8
.blockend_6: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_8: ; if
    jz .blockend_8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_8: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 11
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_parser_advance
.blockend_10: ; call
    add rsp, 8
.blockend_9: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_11: ; if
    jz .blockend_11
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_11: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 12
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_12: ; if
    jz .blockend_12
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_parser_advance
.blockend_13: ; call
    add rsp, 8
.blockend_12: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_14: ; if
    jz .blockend_14
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_14: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 4
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_15: ; if
    jz .blockend_15
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_15: ; if
    push qword 51
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_parser_asserttype
.blockend_16: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_17: ; if
    jz .blockend_17
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_208
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_parser_setuperr
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_parserresult_failure
.blockend_19: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_17: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 48
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_parser_asserttype
.blockend_20: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_21: ; if
    jz .blockend_21
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_209
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_parser_setuperr
.blockend_22: ; call
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_parserresult_failure
.blockend_23: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_21: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 48
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_parser_asserttype
.blockend_24: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_25: ; if
    jz .blockend_25
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_210
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_parser_setuperr
.blockend_26: ; call
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_parserresult_failure
.blockend_27: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_25: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_dlist_getptr
.blockend_28: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_blockdata_new
.blockend_29: ; call
    pop rax
    push rax
    push rax
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    xor rax, 1
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 11
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rax
    xor rax, 1
    push rax
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_30: ; if
    jz .blockend_30
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_slmnode_new
.blockend_31: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_parserresult_success
.blockend_32: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_30: ; if
.blockstart_33: ; do
    push qword 0
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_34: ; if
    jz .blockend_34
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_parser_parsenamed
.blockend_35: ; call
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_parserresult_register
.blockend_36: ; call
.blockend_34: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_37: ; if
    jz .blockend_37
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_parser_parsenum
.blockend_38: ; call
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_parserresult_register
.blockend_39: ; call
.blockend_37: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_40: ; if
    jz .blockend_40
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_parser_parsecall
.blockend_41: ; call
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_parserresult_register
.blockend_42: ; call
.blockend_40: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_43: ; if
    jz .blockend_43
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_parser_parsecomment
.blockend_44: ; call
.blockstart_45: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_45
    jmp proc_parserresult_register
.blockend_45: ; call
.blockend_43: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_46: ; if
    jz .blockend_46
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_47: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_47
    jmp proc_parser_parseintr
.blockend_47: ; call
.blockstart_48: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_48
    jmp proc_parserresult_register
.blockend_48: ; call
.blockend_46: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_49: ; if
    jz .blockend_49
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_50: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_50
    jmp proc_parser_parseword
.blockend_50: ; call
.blockstart_51: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_51
    jmp proc_parserresult_register
.blockend_51: ; call
.blockend_49: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_52: ; if
    jz .blockend_52
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_53: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_53
    jmp proc_parser_parseif
.blockend_53: ; call
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_parserresult_register
.blockend_54: ; call
.blockend_52: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_55: ; if
    jz .blockend_55
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_56: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_56
    jmp proc_parser_parselambda
.blockend_56: ; call
.blockstart_57: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_57
    jmp proc_parserresult_register
.blockend_57: ; call
.blockend_55: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_58: ; if
    jz .blockend_58
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_59: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_59
    jmp proc_parser_parsesim
.blockend_59: ; call
.blockstart_60: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_60
    jmp proc_parserresult_register
.blockend_60: ; call
.blockend_58: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_61: ; if
    jz .blockend_61
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_62: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_62
    jmp proc_parser_parsedo
.blockend_62: ; call
.blockstart_63: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_63
    jmp proc_parserresult_register
.blockend_63: ; call
.blockend_61: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_64: ; if
    jz .blockend_64
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_65: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_65
    jmp proc_parser_parsestring
.blockend_65: ; call
.blockstart_66: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_66
    jmp proc_parserresult_register
.blockend_66: ; call
.blockend_64: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_67: ; if
    jz .blockend_67
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_68: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_68
    jmp proc_parser_parsesstring
.blockend_68: ; call
.blockstart_69: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_69
    jmp proc_parserresult_register
.blockend_69: ; call
.blockend_67: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_70: ; if
    jz .blockend_70
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_71: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_71
    jmp proc_parser_parseasm
.blockend_71: ; call
.blockstart_72: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_72
    jmp proc_parserresult_register
.blockend_72: ; call
.blockend_70: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_73: ; if
    jz .blockend_73
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_74: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_74
    jmp proc_parser_parsevar
.blockend_74: ; call
.blockstart_75: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_75
    jmp proc_parserresult_register
.blockend_75: ; call
.blockend_73: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_76: ; if
    jz .blockend_76
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_77: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_77
    jmp proc_error_eval
.blockend_77: ; call
.blockend_76: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_78: ; if
    jz .blockend_78
.blockstart_79: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_79
    jmp proc_blockdata_append
.blockend_79: ; call
    push qword 1
.blockend_78: ; if
    pop rbx
    test rbx, rbx
    jnz .blockstart_33
.blockend_33: ; do
    push qword 47
.blockstart_80: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_80
    jmp proc_parser_asserttype
.blockend_80: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_81: ; if
    jz .blockend_81
    add rsp, 8
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_211
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_82: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_82
    jmp proc_parser_setuperr
.blockend_82: ; call
.blockstart_83: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_83
    jmp proc_parserresult_failure
.blockend_83: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_81: ; if
.blockstart_84: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_84
    jmp proc_slmnode_new
.blockend_84: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_85: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_85
    jmp proc_parserresult_success
.blockend_85: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parselambda:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 22
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push qword 48
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_parser_asserttype
.blockend_3: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_212
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_parser_setuperr
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_parserresult_failure
.blockend_6: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 48
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parser_asserttype
.blockend_7: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_8: ; if
    jz .blockend_8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_213
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_parser_setuperr
.blockend_9: ; call
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_parserresult_failure
.blockend_10: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_8: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_dlist_getptr
.blockend_11: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 0
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_blockdata_new
.blockend_12: ; call
.blockstart_13: ; do
    push qword 0
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_14: ; if
    jz .blockend_14
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_parser_parsenum
.blockend_15: ; call
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_parserresult_register
.blockend_16: ; call
.blockend_14: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_17: ; if
    jz .blockend_17
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_parser_parsecall
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_parserresult_register
.blockend_19: ; call
.blockend_17: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_20: ; if
    jz .blockend_20
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_parser_parsecomment
.blockend_21: ; call
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_parserresult_register
.blockend_22: ; call
.blockend_20: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_23: ; if
    jz .blockend_23
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_parser_parseintr
.blockend_24: ; call
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_parserresult_register
.blockend_25: ; call
.blockend_23: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_26: ; if
    jz .blockend_26
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_parser_parseword
.blockend_27: ; call
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_parserresult_register
.blockend_28: ; call
.blockend_26: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_29: ; if
    jz .blockend_29
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_parser_parseif
.blockend_30: ; call
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_parserresult_register
.blockend_31: ; call
.blockend_29: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_32: ; if
    jz .blockend_32
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_33: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_33
    jmp proc_parser_parselambda
.blockend_33: ; call
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_parserresult_register
.blockend_34: ; call
.blockend_32: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_35: ; if
    jz .blockend_35
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_parser_parsesim
.blockend_36: ; call
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_parserresult_register
.blockend_37: ; call
.blockend_35: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_38: ; if
    jz .blockend_38
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_parser_parsedo
.blockend_39: ; call
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_parserresult_register
.blockend_40: ; call
.blockend_38: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_41: ; if
    jz .blockend_41
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_parser_parsestring
.blockend_42: ; call
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_parserresult_register
.blockend_43: ; call
.blockend_41: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_44: ; if
    jz .blockend_44
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_45: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_45
    jmp proc_parser_parsesstring
.blockend_45: ; call
.blockstart_46: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_46
    jmp proc_parserresult_register
.blockend_46: ; call
.blockend_44: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_47: ; if
    jz .blockend_47
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_48: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_48
    jmp proc_parser_parseasm
.blockend_48: ; call
.blockstart_49: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_49
    jmp proc_parserresult_register
.blockend_49: ; call
.blockend_47: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_50: ; if
    jz .blockend_50
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_51: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_51
    jmp proc_parser_parsevar
.blockend_51: ; call
.blockstart_52: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_52
    jmp proc_parserresult_register
.blockend_52: ; call
.blockend_50: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_53: ; if
    jz .blockend_53
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_error_eval
.blockend_54: ; call
.blockend_53: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_55: ; if
    jz .blockend_55
.blockstart_56: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_56
    jmp proc_blockdata_append
.blockend_56: ; call
    push qword 1
.blockend_55: ; if
    pop rbx
    test rbx, rbx
    jnz .blockstart_13
.blockend_13: ; do
    push qword 47
.blockstart_57: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_57
    jmp proc_parser_asserttype
.blockend_57: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_58: ; if
    jz .blockend_58
    add rsp, 8
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_214
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_59: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_59
    jmp proc_parser_setuperr
.blockend_59: ; call
.blockstart_60: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_60
    jmp proc_parserresult_failure
.blockend_60: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_58: ; if
.blockstart_61: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_61
    jmp proc_slmnode_new
.blockend_61: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_62: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_62
    jmp proc_parserresult_success
.blockend_62: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parsenamed:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 51
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 23
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_parser_asserttype
.blockend_3: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_dlist_getptr
.blockend_5: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 0
    push qword 3
    push qword 0
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_blockdata_new
.blockend_6: ; call
.blockstart_7: ; do
    push qword 0
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_8: ; if
    jz .blockend_8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_parser_parsenum
.blockend_9: ; call
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_parserresult_register
.blockend_10: ; call
.blockend_8: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_11: ; if
    jz .blockend_11
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_parser_parsecall
.blockend_12: ; call
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_parserresult_register
.blockend_13: ; call
.blockend_11: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_14: ; if
    jz .blockend_14
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_parser_parsecomment
.blockend_15: ; call
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_parserresult_register
.blockend_16: ; call
.blockend_14: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_17: ; if
    jz .blockend_17
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_parser_parseintr
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_parserresult_register
.blockend_19: ; call
.blockend_17: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_20: ; if
    jz .blockend_20
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_parser_parseword
.blockend_21: ; call
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_parserresult_register
.blockend_22: ; call
.blockend_20: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_23: ; if
    jz .blockend_23
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_parser_parseif
.blockend_24: ; call
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_parserresult_register
.blockend_25: ; call
.blockend_23: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_26: ; if
    jz .blockend_26
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_parser_parselambda
.blockend_27: ; call
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_parserresult_register
.blockend_28: ; call
.blockend_26: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_29: ; if
    jz .blockend_29
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_parser_parsesim
.blockend_30: ; call
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_parserresult_register
.blockend_31: ; call
.blockend_29: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_32: ; if
    jz .blockend_32
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_33: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_33
    jmp proc_parser_parsedo
.blockend_33: ; call
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_parserresult_register
.blockend_34: ; call
.blockend_32: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_35: ; if
    jz .blockend_35
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_parser_parsestring
.blockend_36: ; call
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_parserresult_register
.blockend_37: ; call
.blockend_35: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_38: ; if
    jz .blockend_38
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_parser_parsesstring
.blockend_39: ; call
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_parserresult_register
.blockend_40: ; call
.blockend_38: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_41: ; if
    jz .blockend_41
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_parser_parseasm
.blockend_42: ; call
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_parserresult_register
.blockend_43: ; call
.blockend_41: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_44: ; if
    jz .blockend_44
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_45: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_45
    jmp proc_parser_parsevar
.blockend_45: ; call
.blockstart_46: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_46
    jmp proc_parserresult_register
.blockend_46: ; call
.blockend_44: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_47: ; if
    jz .blockend_47
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_48: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_48
    jmp proc_error_eval
.blockend_48: ; call
.blockend_47: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_49: ; if
    jz .blockend_49
.blockstart_50: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_50
    jmp proc_blockdata_append
.blockend_50: ; call
    push qword 1
.blockend_49: ; if
    pop rbx
    test rbx, rbx
    jnz .blockstart_7
.blockend_7: ; do
    push qword 47
.blockstart_51: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_51
    jmp proc_parser_asserttype
.blockend_51: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_52: ; if
    jz .blockend_52
    add rsp, 8
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_215
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_53: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_53
    jmp proc_parser_setuperr
.blockend_53: ; call
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_parserresult_failure
.blockend_54: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_52: ; if
.blockstart_55: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_55
    jmp proc_slmnode_new
.blockend_55: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_56: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_56
    jmp proc_parserresult_success
.blockend_56: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parseenum:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 10
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_dlist_getptr
.blockend_3: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    push qword 0
    push qword 0
    push qword 4
    push qword 0
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_blockdata_new
.blockend_4: ; call
.blockstart_5: ; do
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_parser_parseword
.blockend_6: ; call
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    add rsp, 8
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_parser_parsenum
.blockend_8: ; call
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockend_7: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_blockdata_append
.blockend_10: ; call
    push qword 1
.blockend_9: ; if
    pop rbx
    test rbx, rbx
    jnz .blockstart_5
.blockend_5: ; do
    push qword 47
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_parser_asserttype
.blockend_11: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_12: ; if
    jz .blockend_12
    add rsp, 8
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_216
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_parser_setuperr
.blockend_13: ; call
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_parserresult_failure
.blockend_14: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_12: ; if
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_slmnode_new
.blockend_15: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_parserresult_success
.blockend_16: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parseclass:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 5
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_parser_asserttype
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push qword 51
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_parser_asserttype
.blockend_3: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_217
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_parser_setuperr
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_parserresult_failure
.blockend_6: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_dlist_getptr
.blockend_7: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 0
    push qword 0
    push qword 0
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_blockdata_new
.blockend_8: ; call
.blockstart_9: ; do
    push qword 0
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_10: ; if
    jz .blockend_10
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_parser_parseproc
.blockend_11: ; call
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_parserresult_register
.blockend_12: ; call
.blockend_10: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_13: ; if
    jz .blockend_13
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_parser_parsecomment
.blockend_14: ; call
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_parserresult_register
.blockend_15: ; call
.blockend_13: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_16: ; if
    jz .blockend_16
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_parser_parseenum
.blockend_17: ; call
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_parserresult_register
.blockend_18: ; call
.blockend_16: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_19: ; if
    jz .blockend_19
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_parser_parseof
.blockend_20: ; call
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_parserresult_register
.blockend_21: ; call
.blockend_19: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_22: ; if
    jz .blockend_22
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_parser_parseprop
.blockend_23: ; call
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_parserresult_register
.blockend_24: ; call
.blockend_22: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_25: ; if
    jz .blockend_25
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_parser_parseconst
.blockend_26: ; call
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_parserresult_register
.blockend_27: ; call
.blockend_25: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_28: ; if
    jz .blockend_28
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_parser_parsevar
.blockend_29: ; call
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_parserresult_register
.blockend_30: ; call
.blockend_28: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_31: ; if
    jz .blockend_31
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_parser_parseasm
.blockend_32: ; call
.blockstart_33: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_33
    jmp proc_parserresult_register
.blockend_33: ; call
.blockend_31: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_34: ; if
    jz .blockend_34
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_error_eval
.blockend_35: ; call
.blockend_34: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_36: ; if
    jz .blockend_36
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_blockdata_append
.blockend_37: ; call
    push qword 1
.blockend_36: ; if
    pop rbx
    test rbx, rbx
    jnz .blockstart_9
.blockend_9: ; do
    push qword 47
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_parser_asserttype
.blockend_38: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_39: ; if
    jz .blockend_39
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_218
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_parser_setuperr
.blockend_40: ; call
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_parserresult_failure
.blockend_41: ; call
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_39: ; if
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_dlist_getptr
.blockend_42: ; call
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_slmnode_new
.blockend_43: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_parserresult_success
.blockend_44: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_parser_parsefile:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_dlist_getptr
.blockend_1: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_dlist_getptr
.blockend_2: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_filedata_new
.blockend_3: ; call
.blockstart_4: ; do
    push qword 0
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_parser_parsecomment
.blockend_6: ; call
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_parserresult_register
.blockend_7: ; call
.blockend_5: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_8: ; if
    jz .blockend_8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_parser_parseinc
.blockend_9: ; call
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_parserresult_register
.blockend_10: ; call
.blockend_8: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_11: ; if
    jz .blockend_11
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_parser_parseclass
.blockend_12: ; call
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_parserresult_register
.blockend_13: ; call
.blockend_11: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_14: ; if
    jz .blockend_14
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_parser_parseproc
.blockend_15: ; call
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_parserresult_register
.blockend_16: ; call
.blockend_14: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_17: ; if
    jz .blockend_17
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_parser_parseenum
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_parserresult_register
.blockend_19: ; call
.blockend_17: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_20: ; if
    jz .blockend_20
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_parser_parseconst
.blockend_21: ; call
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_parserresult_register
.blockend_22: ; call
.blockend_20: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_23: ; if
    jz .blockend_23
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_parser_parsevar
.blockend_24: ; call
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_parserresult_register
.blockend_25: ; call
.blockend_23: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_26: ; if
    jz .blockend_26
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_parser_parseasm
.blockend_27: ; call
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_parserresult_register
.blockend_28: ; call
.blockend_26: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_29: ; if
    jz .blockend_29
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_error_eval
.blockend_30: ; call
.blockend_29: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_31: ; if
    jz .blockend_31
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_filedata_append
.blockend_32: ; call
    push qword 1
.blockend_31: ; if
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_4
.blockend_4: ; do
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push mem+65; parser_running
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
.blockstart_33: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_33
    jmp proc_dlist_getptr
.blockend_33: ; call
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_slmnode_new
.blockend_34: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_parserresult_success
.blockend_35: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headwriter_new:
; headwriter_free:
; headwriter_write:
; headwriter_getlen:
; headwriter_addstr:
; headwriter_mem:
; headwriter_getescape:
; headwriter_writeheader:
; headwriter_writefooter:
; headwriter_writestring:
; headwriter_writestrings:
proc_writer_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 32
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 511
    push qword 65
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword -100
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_os_openf
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 8
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_dlist_new
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_writer_free:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_dlist_free
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_heap_free
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_writer_write:
    pop rax
    push rax
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_len
.blockend_0: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    push mem+73; writer_current
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_os_writef
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_writer_getlen:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 0
.blockstart_0: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 39
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_1: ; if
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_writer_addstr:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+73; writer_current
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_dlist_append
.blockend_0: ; call
    push mem+73; writer_current
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+73; writer_current
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_dlist_len
.blockend_1: ; call
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_int_cstr
.blockend_2: ; call
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_writer_write
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_writer_mem:
    push mem+73; writer_current
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_writer_getescape:
    pop rax
    push rax
    push rax
    push qword 101
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    push qword 27
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 110
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    push qword 10
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    pop rax
    push rax
    push rax
    push qword 114
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    add rsp, 8
    push qword 13
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    pop rax
    push rax
    push rax
    push qword 116
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    add rsp, 8
    push qword 9
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    pop rax
    push rax
    push rax
    push qword 48
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_writer_writeheader:
    push str_219
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_writer_write
.blockend_0: ; call
    push str_220
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_writer_write
.blockend_1: ; call
    push str_221
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_writer_write
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_writer_writefooter:
    push str_222
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_writer_write
.blockend_0: ; call
    push str_223
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_writer_write
.blockend_1: ; call
    push str_224
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_writer_write
.blockend_2: ; call
    push str_225
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_writer_write
.blockend_3: ; call
    push str_226
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_writer_write
.blockend_4: ; call
    push str_227
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_writer_write
.blockend_5: ; call
    push str_228
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_writer_write
.blockend_6: ; call
    push str_229
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_writer_write
.blockend_7: ; call
    push str_230
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_write
.blockend_8: ; call
    push str_231
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_writer_write
.blockend_9: ; call
    push str_232
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_writer_write
.blockend_10: ; call
    push str_233
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_writer_write
.blockend_11: ; call
    push str_234
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_writer_write
.blockend_12: ; call
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_writer_writestrings
.blockend_13: ; call
    push str_235
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_writer_write
.blockend_14: ; call
    push str_236
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_writer_write
.blockend_15: ; call
    push str_237
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_writer_write
.blockend_16: ; call
    push str_238
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    push str_239
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_writer_write
.blockend_18: ; call
    push str_240
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_writer_write
.blockend_19: ; call
    push str_241
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_writer_write
.blockend_20: ; call
    push mem+73; writer_current
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_int_cstr
.blockend_21: ; call
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_writer_write
.blockend_22: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_writer_writestring:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 1
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    push qword 0
.blockstart_0: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_int_cstr
.blockend_1: ; call
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_writer_write
.blockend_2: ; call
    push str_242
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_writer_write
.blockend_3: ; call
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_writer_writestrings:
    push mem+73; writer_current
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_dlist_len
.blockend_0: ; call
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    push qword 0
.blockstart_2: ; do
    push mem+73; writer_current
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_dlist_getptr
.blockend_3: ; call
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    push str_243
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_writer_write
.blockend_5: ; call
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_int_cstr
.blockend_6: ; call
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_writer_write
.blockend_7: ; call
    push str_244
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_write
.blockend_8: ; call
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_writer_writestring
.blockend_9: ; call
    push str_245
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_writer_write
.blockend_10: ; call
.blockend_4: ; if
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+73; writer_current
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_dlist_len
.blockend_11: ; call
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_2
.blockend_2: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headllentry_new:
; headllentry_free:
; headllentry_last:
; headllentry_pop:
; headllentry_getptr:
; headllentry_append:
; headllentry_print:
; headllist_new:
; headllist_free:
; headllist_last:
; headllist_pop:
; headllist_len:
; headllist_foreach:
; headllist_getptr:
; headllist_append:
; headllist_print:
proc_llentry_new:
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_llentry_free:
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    pop rax
    push rax
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_llentry_free
.blockend_1: ; call
.blockend_0: ; if
    add rsp, 8
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_heap_free
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_llentry_last:
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_llentry_last
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_llentry_pop:
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_llentry_pop
.blockend_1: ; call
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_2: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_llentry_getptr:
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_llentry_getptr
.blockend_1: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_llentry_append:
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_llist_new:
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_llist_free:
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    pop rax
    push rax
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_llentry_free
.blockend_1: ; call
.blockend_0: ; if
    add rsp, 8
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_heap_free
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_llist_last:
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_llentry_last
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_llist_pop:
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_llentry_pop
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_llist_len:
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_1: ; do
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_llist_foreach:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
.blockstart_1: ; do
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    pop rcx
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp qword rcx
.blockend_2: ; call
    add rsp, 8
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_llist_getptr:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_llentry_getptr
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_llist_append:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_llist_last
.blockend_0: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_llentry_new
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_mem_cpy
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_llentry_new
.blockend_4: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_llist_last
.blockend_5: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_llentry_append
.blockend_6: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_llist_last
.blockend_7: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_mem_cpy
.blockend_8: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_hash_get:
    push mem+81; hash_result
    push qword 7
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
.blockstart_0: ; do
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push mem+81; hash_result
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 31
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+81; hash_result
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    pop rax
    push rax
    push rax
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
    add rsp, 8
    push mem+81; hash_result
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headmap_new:
; headmap_free:
; headmap_valsize:
; headmap_append:
; headmap_foreach:
; headmap_getptr:
; headmap_in:
; headmap_len:
proc_map_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 24
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_map_free:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 0
.blockstart_0: ; do
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    pop rax
    push rax
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_llist_free
.blockend_2: ; call
.blockend_1: ; if
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_heap_free
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_map_valsize:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_map_append:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_mem_cpy
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_map_valsize
.blockend_2: ; call
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_mem_cpy
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_hash_get
.blockend_4: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_llist_new
.blockend_6: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_llist_append
.blockend_7: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_heap_free
.blockend_8: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_5: ; if
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_9: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_mem_eq
.blockend_10: ; call
    pop rbx
    test rbx, rbx
.blockstart_11: ; if
    jz .blockend_11
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_mem_cpy
.blockend_12: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_heap_free
.blockend_13: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_11: ; if
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_9
.blockend_9: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_llist_append
.blockend_14: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_heap_free
.blockend_15: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_map_foreach:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 0
.blockstart_0: ; do
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_llist_foreach
.blockend_2: ; call
.blockend_1: ; if
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_0
.blockend_0: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_map_getptr:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_hash_get
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_2: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_mem_eq
.blockend_3: ; call
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_2
.blockend_2: ; do
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_map_in:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_hash_get
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_2: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_mem_eq
.blockend_3: ; call
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    add rsp, 8
    push qword 1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_2
.blockend_2: ; do
    add rsp, 8
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headsimasm_appendch:
; headsimasm_addsetrax:
; headsimasm_addsyscall:
; headsimasm_addpushreg:
; headsimasm_addpopreg:
; headsimasm_addop:
; headsimasm_start:
; headsimasm_stop:
; headsimulator_new:
; headsimulator_free:
; headsimulator_run:
; headsimulator_runproc:
; headsimulator_asmintr:
; headsimulator_asmconst:
; headsimulator_asmblock:
; headsimulator_asmnode:
; headsimulator_asmproc:
proc_simasm_appendch:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 1
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_246
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_str_catc
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simasm_addsetrax:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 72
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_simasm_appendch
.blockend_0: ; call
    push qword 184
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_simasm_appendch
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_simasm_appendch
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_simasm_appendch
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 2
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_simasm_appendch
.blockend_4: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 3
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_simasm_appendch
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 4
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_simasm_appendch
.blockend_6: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 5
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_simasm_appendch
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 6
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_simasm_appendch
.blockend_8: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 7
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_simasm_appendch
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simasm_addpushreg:
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_simasm_appendch
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simasm_addpopreg:
    push qword 88
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_simasm_appendch
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simasm_addop:
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 72
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_simasm_appendch
.blockend_0: ; call
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_simasm_appendch
.blockend_1: ; call
    push qword 216
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_simasm_appendch
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simasm_addsyscall:
    push qword 15
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_simasm_appendch
.blockend_0: ; call
    push qword 5
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_simasm_appendch
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simasm_start:
    push qword 85
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_simasm_appendch
.blockend_0: ; call
    push qword 72
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_simasm_appendch
.blockend_1: ; call
    push qword 137
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_simasm_appendch
.blockend_2: ; call
    push qword 229
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_simasm_appendch
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simasm_stop:
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_simasm_addsetrax
.blockend_0: ; call
    push qword 88
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_simasm_appendch
.blockend_1: ; call
    push qword 93
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_simasm_appendch
.blockend_2: ; call
    push qword 195
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_simasm_appendch
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simulator_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 16
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_alloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 255
    push qword 24
    push qword 128
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_map_new
.blockend_1: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push qword 0
.blockstart_3: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_simulator_asmproc
.blockend_4: ; call
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_3
.blockend_3: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simulator_run:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push qword 128
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_247
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_cpy
.blockend_1: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_map_in
.blockend_2: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_map_getptr
.blockend_4: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_heap_free
.blockend_5: ; call
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_simulator_runproc
.blockend_6: ; call
    mov rax, 60
    pop rdi
    syscall
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_heap_free
.blockend_7: ; call
    push str_248
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_cstr_println
.blockend_8: ; call
    push qword 1
    mov rax, 60
    pop rdi
    syscall
proc_simulator_callc:
    pop rax
    call rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simulator_runproc:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 0
    push qword -1
    push qword 2
    push qword 32
    pop rax
    pop rbx
    or rax, rbx
    push rax
    push qword 2
    push qword 4
    pop rax
    pop rbx
    or rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_str_len
.blockend_0: ; call
    push qword 0
    push qword 9
    pop rax
    pop rdi
    pop rsi
    pop rdx
    pop r10
    pop r8
    pop r9
    syscall
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    push str_249
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_println
.blockend_2: ; call
    push qword 1
    mov rax, 60
    pop rdi
    syscall
.blockend_1: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_str_len
.blockend_3: ; call
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_mem_cpy
.blockend_4: ; call
    push str_250
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_cstr_println
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_simulator_callc
.blockend_6: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simulator_asmblock:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simulator_asmintr:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_simasm_stop
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_simasm_addpopreg
.blockend_3: ; call
    push qword 0
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_simasm_addpushreg
.blockend_4: ; call
    push qword 0
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_simasm_addpushreg
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    pop rax
    push rax
    push rax
    push qword 14
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_simasm_addpopreg
.blockend_7: ; call
    push qword 3
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_simasm_addpopreg
.blockend_8: ; call
    push qword 3
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_simasm_addpushreg
.blockend_9: ; call
    push qword 0
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_simasm_addpushreg
.blockend_10: ; call
    push qword 3
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_simasm_addpushreg
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_6: ; if
    pop rax
    push rax
    push rax
    push qword 15
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_12: ; if
    jz .blockend_12
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_simasm_addpopreg
.blockend_13: ; call
    push qword 3
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_simasm_addpopreg
.blockend_14: ; call
    push qword 0
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_simasm_addpushreg
.blockend_15: ; call
    push qword 3
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_simasm_addpushreg
.blockend_16: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_12: ; if
    pop rax
    push rax
    push rax
    push qword 7
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_17: ; if
    jz .blockend_17
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_simasm_addpopreg
.blockend_18: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_17: ; if
    pop rax
    push rax
    push rax
    push qword 4
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_19: ; if
    jz .blockend_19
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_simasm_addpopreg
.blockend_20: ; call
    push qword 72
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_simasm_appendch
.blockend_21: ; call
    push qword 49
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_simasm_appendch
.blockend_22: ; call
    push qword 219
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_simasm_appendch
.blockend_23: ; call
    push qword 138
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_simasm_appendch
.blockend_24: ; call
    push qword 24
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_simasm_appendch
.blockend_25: ; call
    push qword 3
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_simasm_addpushreg
.blockend_26: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_19: ; if
    pop rax
    push rax
    push rax
    push qword 8
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_27: ; if
    jz .blockend_27
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_simasm_addpopreg
.blockend_28: ; call
    push qword 3
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_simasm_addpopreg
.blockend_29: ; call
    push qword 72
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_simasm_appendch
.blockend_30: ; call
    push qword 49
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_simasm_appendch
.blockend_31: ; call
    push qword 201
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_simasm_appendch
.blockend_32: ; call
    push qword 186
.blockstart_33: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_33
    jmp proc_simasm_appendch
.blockend_33: ; call
    push qword 1
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_simasm_appendch
.blockend_34: ; call
    push qword 0
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_simasm_appendch
.blockend_35: ; call
    push qword 0
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_simasm_appendch
.blockend_36: ; call
    push qword 0
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_simasm_appendch
.blockend_37: ; call
    push qword 72
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_simasm_appendch
.blockend_38: ; call
    push qword 57
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_simasm_appendch
.blockend_39: ; call
    push qword 216
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_simasm_appendch
.blockend_40: ; call
    push qword 72
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_simasm_appendch
.blockend_41: ; call
    push qword 15
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_simasm_appendch
.blockend_42: ; call
    push qword 68
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_simasm_appendch
.blockend_43: ; call
    push qword 202
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_simasm_appendch
.blockend_44: ; call
    push qword 1
.blockstart_45: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_45
    jmp proc_simasm_addpushreg
.blockend_45: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_27: ; if
    pop rax
    push rax
    push rax
    push qword 16
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_46: ; if
    jz .blockend_46
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 3
.blockstart_47: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_47
    jmp proc_simasm_addpopreg
.blockend_47: ; call
    push qword 0
.blockstart_48: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_48
    jmp proc_simasm_addpopreg
.blockend_48: ; call
    push qword 1
.blockstart_49: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_49
    jmp proc_simasm_addop
.blockend_49: ; call
    push qword 0
.blockstart_50: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_50
    jmp proc_simasm_addpushreg
.blockend_50: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_46: ; if
    pop rax
    push rax
    push rax
    push qword 17
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_51: ; if
    jz .blockend_51
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 3
.blockstart_52: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_52
    jmp proc_simasm_addpopreg
.blockend_52: ; call
    push qword 0
.blockstart_53: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_53
    jmp proc_simasm_addpopreg
.blockend_53: ; call
    push qword 41
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_simasm_addop
.blockend_54: ; call
    push qword 0
.blockstart_55: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_55
    jmp proc_simasm_addpushreg
.blockend_55: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_51: ; if
    pop rax
    push rax
    push rax
    push qword 18
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_56: ; if
    jz .blockend_56
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 3
.blockstart_57: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_57
    jmp proc_simasm_addpopreg
.blockend_57: ; call
    push qword 0
.blockstart_58: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_58
    jmp proc_simasm_addpopreg
.blockend_58: ; call
    push qword 72
.blockstart_59: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_59
    jmp proc_simasm_appendch
.blockend_59: ; call
    push qword 15
.blockstart_60: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_60
    jmp proc_simasm_appendch
.blockend_60: ; call
    push qword 175
.blockstart_61: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_61
    jmp proc_simasm_appendch
.blockend_61: ; call
    push qword 195
.blockstart_62: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_62
    jmp proc_simasm_appendch
.blockend_62: ; call
    push qword 0
.blockstart_63: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_63
    jmp proc_simasm_addpushreg
.blockend_63: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_56: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 4
    push str_251
.blockstart_64: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_64
    jmp proc_error_new
.blockend_64: ; call
.blockstart_65: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_65
    jmp proc_error_eval
.blockend_65: ; call
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simulator_callthing:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push str_252
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_println
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    jmp rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simulator_asmconst:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_int
.blockend_1: ; call
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_simasm_addsetrax
.blockend_2: ; call
    push qword 0
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_simasm_addpushreg
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_simasm_addsetrax
.blockend_5: ; call
    push qword 0
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_simasm_addpushreg
.blockend_6: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push str_253
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_cstr_eq
.blockend_8: ; call
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_simasm_addpopreg
.blockend_10: ; call
    push qword 6
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_simasm_addpopreg
.blockend_11: ; call
    push qword 1
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_simasm_addsetrax
.blockend_12: ; call
    push qword 72
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_simasm_appendch
.blockend_13: ; call
    push qword 137
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_simasm_appendch
.blockend_14: ; call
    push qword 199
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_simasm_appendch
.blockend_15: ; call
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_simasm_addsyscall
.blockend_16: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_9: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_simasm_addsetrax
.blockend_17: ; call
    push qword 0
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_simasm_addpushreg
.blockend_18: ; call
    push proc_simulator_callthing
    pop rax
    push rax
    push rax
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_int_print
.blockend_19: ; call
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_simasm_addsetrax
.blockend_20: ; call
    push qword 232
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_simasm_appendch
.blockend_21: ; call
    push qword 0
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_simasm_appendch
.blockend_22: ; call
    push qword 0
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_simasm_appendch
.blockend_23: ; call
    push qword 0
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_simasm_appendch
.blockend_24: ; call
    push qword 0
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_simasm_appendch
.blockend_25: ; call
    push qword 255
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_simasm_appendch
.blockend_26: ; call
    push qword 224
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_simasm_appendch
.blockend_27: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_7: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 4
    push str_254
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_error_new
.blockend_28: ; call
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_error_eval
.blockend_29: ; call
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simulator_asmnode:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 6
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_simulator_asmintr
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_simulator_asmconst
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    pop rax
    push rax
    push rax
    push qword 12
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_simulator_asmblock
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 4
    push str_255
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_error_new
.blockend_6: ; call
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_error_eval
.blockend_7: ; call
    push qword 0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_simulator_asmproc:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    push qword 24
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_new
.blockend_1: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_simasm_start
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_str_free
.blockend_4: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_heap_free
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    push qword 0
.blockstart_6: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 56
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_simulator_asmnode
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_6
.blockend_6: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_simasm_stop
.blockend_8: ; call
    push qword 144
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_simasm_appendch
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    push qword 128
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_heap_zalloc
.blockend_10: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_cstr_cpy
.blockend_11: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_map_append
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_heap_free
.blockend_13: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headassembler_new:
; headassembler_internalname:
; headassembler_getconst:
; headassembler_addproctab:
; headassembler_addwordproc:
; headassembler_addprochead:
; headassembler_getfullname:
; headassembler_updatestack:
; headassembler_visitof:
; headassembler_visitword:
; headassembler_visitconst:
; headassembler_visitdef:
; headassembler_visitprop:
; headassembler_visitvar:
; headassembler_visitcall:
; headassembler_visitintr:
; headassembler_visitasm:
; headassembler_visitinc:
; headassembler_visitfile:
; headassembler_visitenum:
; headassembler_visitsim:
; headassembler_visitblock:
; headassembler_visitnode:
proc_assembler_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 145
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 104
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 256
    push qword 1
    push qword 64
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_map_new
.blockend_1: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 256
    push qword 8
    push qword 64
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_map_new
.blockend_2: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 256
    push qword 24
    push qword 64
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_map_new
.blockend_3: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 128
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 256
    push qword 8
    push qword 64
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_map_new
.blockend_4: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 136
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 256
    push qword 8
    push qword 64
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_map_new
.blockend_5: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_str_new
.blockend_6: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_internalname:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 2
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_str_new
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    push qword 0
.blockstart_1: ; do
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    pop rax
    push rax
    push rax
    push qword 47
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_256
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_str_catc
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    add rsp, 8
    push qword 0
.blockend_2: ; if
    pop rax
    push rax
    push rax
    push qword 37
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_257
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_str_catc
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    add rsp, 8
    push qword 0
.blockend_4: ; if
    pop rax
    push rax
    push rax
    push qword 46
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_258
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_str_catc
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    add rsp, 8
    push qword 0
.blockend_6: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_8: ; if
    jz .blockend_8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_str_catc
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    add rsp, 8
    push qword 0
.blockend_8: ; if
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 1000
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_getconst:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    push qword 64
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_cpy
.blockend_1: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_map_in
.blockend_2: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_str_new
.blockend_4: ; call
    push str_259
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_str_catc
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_str_catc
.blockend_6: ; call
    push str_260
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_str_catc
.blockend_7: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_error_new
.blockend_8: ; call
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_error_eval
.blockend_9: ; call
.blockend_3: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_map_getptr
.blockend_10: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_heap_free
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_updatestack:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 2
    push str_261
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_error_new
.blockend_2: ; call
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_error_eval
.blockend_3: ; call
.blockend_1: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_addproctab:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 72
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_len
.blockend_0: ; call
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_mem_eq
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push str_262
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_writer_write
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_writer_write
.blockend_4: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; do
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 95
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_5
.blockend_5: ; do
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_writer_write
.blockend_6: ; call
    push str_263
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_writer_write
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_write
.blockend_8: ; call
    push str_264
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_writer_write
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_addwordproc:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_map_getptr
.blockend_0: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 10
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_assembler_updatestack
.blockend_2: ; call
    push str_265
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_writer_write
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_writer_write
.blockend_4: ; call
    push str_266
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_writer_write
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_map_getptr
.blockend_6: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_assembler_updatestack
.blockend_7: ; call
    push str_267
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_write
.blockend_8: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_int_cstr
.blockend_9: ; call
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_writer_write
.blockend_10: ; call
    push str_268
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_writer_write
.blockend_11: ; call
    push str_269
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_writer_write
.blockend_12: ; call
    push str_270
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_writer_write
.blockend_13: ; call
    push str_271
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_writer_write
.blockend_14: ; call
    push str_272
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_writer_write
.blockend_15: ; call
    push str_273
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_writer_write
.blockend_16: ; call
    push str_274
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_int_cstr
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_writer_write
.blockend_19: ; call
    push str_275
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_writer_write
.blockend_20: ; call
    push str_276
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_writer_write
.blockend_21: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_writer_write
.blockend_22: ; call
    push str_277
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_writer_write
.blockend_23: ; call
    push str_278
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_writer_write
.blockend_24: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_int_cstr
.blockend_25: ; call
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_writer_write
.blockend_26: ; call
    push str_279
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_writer_write
.blockend_27: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_addprochead:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push qword 64
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_int
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 32
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_int
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 11
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    push str_280
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_writer_write
.blockend_4: ; call
.blockend_3: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 20
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    xor rax, 1
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 21
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rax
    xor rax, 1
    push rax
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 255
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_5: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_assembler_internalname
.blockend_7: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_str_catc
.blockend_8: ; call
    push str_281
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_str_catc
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 0
.blockend_6: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_assembler_internalname
.blockend_10: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_str_catc
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_mem_cpy
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_map_append
.blockend_13: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 11
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_14: ; if
    jz .blockend_14
    push str_282
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_writer_write
.blockend_15: ; call
.blockend_14: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_writer_write
.blockend_16: ; call
    push str_283
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_getfullname:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 64
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_cpy
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_284
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_cat
.blockend_3: ; call
    add rsp, 8
.blockend_1: ; if
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_cat
.blockend_4: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitof:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 4
    push str_285
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_error_new
.blockend_0: ; call
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_error_eval
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitword:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 48
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 48
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    push qword 64
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_new
.blockend_1: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_len
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_str_sput
.blockend_3: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_assembler_internalname
.blockend_4: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_mem_cpy
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_map_in
.blockend_6: ; call
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 0
    push qword 1
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_assembler_updatestack
.blockend_8: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_map_getptr
.blockend_9: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    push str_286
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_writer_write
.blockend_10: ; call
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_int_cstr
.blockend_11: ; call
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_writer_write
.blockend_12: ; call
    push str_287
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_writer_write
.blockend_13: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_7: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 136
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_map_in
.blockend_14: ; call
    pop rbx
    test rbx, rbx
.blockstart_15: ; if
    jz .blockend_15
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 0
    push qword 1
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_assembler_updatestack
.blockend_16: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_map_getptr
.blockend_17: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    push str_288
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_writer_write
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_int_cstr
.blockend_19: ; call
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_writer_write
.blockend_20: ; call
    push str_289
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_writer_write
.blockend_21: ; call
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_writer_write
.blockend_22: ; call
    push str_290
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_writer_write
.blockend_23: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_15: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 128
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_map_in
.blockend_24: ; call
    pop rbx
    test rbx, rbx
.blockstart_25: ; if
    jz .blockend_25
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 0
    push qword 1
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_assembler_updatestack
.blockend_26: ; call
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_map_getptr
.blockend_27: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    push str_291
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_writer_write
.blockend_28: ; call
    push str_292
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_writer_write
.blockend_29: ; call
    push str_293
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_writer_write
.blockend_30: ; call
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_int_cstr
.blockend_31: ; call
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_writer_write
.blockend_32: ; call
    push str_294
.blockstart_33: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_33
    jmp proc_writer_write
.blockend_33: ; call
    push str_295
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_writer_write
.blockend_34: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_25: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_map_in
.blockend_35: ; call
    pop rbx
    test rbx, rbx
.blockstart_36: ; if
    jz .blockend_36
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 48
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_assembler_addwordproc
.blockend_37: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_36: ; if
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 48
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 48
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_str_new
.blockend_38: ; call
    push str_296
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_str_catc
.blockend_39: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_str_catc
.blockend_40: ; call
    push str_297
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_str_catc
.blockend_41: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_error_new
.blockend_42: ; call
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_error_eval
.blockend_43: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitconst:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_assembler_updatestack
.blockend_1: ; call
    push str_298
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_writer_write
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_writer_write
.blockend_3: ; call
    push str_299
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_writer_write
.blockend_4: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_assembler_updatestack
.blockend_6: ; call
    push str_300
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_writer_write
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_addstr
.blockend_8: ; call
    push str_301
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_writer_write
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_5: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_10: ; if
    jz .blockend_10
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 2
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_assembler_updatestack
.blockend_11: ; call
    push str_302
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_writer_write
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_writer_getlen
.blockend_13: ; call
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_int_cstr
.blockend_14: ; call
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_writer_write
.blockend_15: ; call
    push str_303
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_writer_write
.blockend_16: ; call
    push str_304
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_writer_addstr
.blockend_18: ; call
    push str_305
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_writer_write
.blockend_19: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_10: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_20: ; if
    jz .blockend_20
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_assembler_visitword
.blockend_21: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_20: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    push str_306
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_error_new
.blockend_22: ; call
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_error_eval
.blockend_23: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitdef:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_assembler_getfullname
.blockend_1: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_int
.blockend_2: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_map_append
.blockend_3: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    push str_307
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_error_new
.blockend_4: ; call
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_error_eval
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitprop:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_assembler_getfullname
.blockend_1: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_map_append
.blockend_2: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_int
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_assembler_getfullname
.blockend_5: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_assembler_internalname
.blockend_6: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_assembler_getconst
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    push str_308
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_error_new
.blockend_8: ; call
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_error_eval
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitvar:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    push qword 64
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_heap_zalloc
.blockend_2: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_cpy
.blockend_3: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 128
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_map_append
.blockend_4: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push str_309
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_writer_write
.blockend_5: ; call
    push str_310
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_writer_write
.blockend_6: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_writer_write
.blockend_7: ; call
    push str_311
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_write
.blockend_8: ; call
    push str_312
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_writer_write
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_cstr_int
.blockend_10: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_11: ; if
    jz .blockend_11
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    push qword 64
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_heap_zalloc
.blockend_12: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_cstr_cpy
.blockend_13: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 128
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_map_append
.blockend_14: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_assembler_internalname
.blockend_15: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_assembler_getconst
.blockend_16: ; call
    push str_313
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    push str_314
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_writer_write
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_int_cstr
.blockend_19: ; call
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_writer_write
.blockend_20: ; call
    push str_315
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_writer_write
.blockend_21: ; call
    push str_316
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_writer_write
.blockend_22: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_assembler_internalname
.blockend_23: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_assembler_getconst
.blockend_24: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_11: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    push str_317
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_error_new
.blockend_25: ; call
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_error_eval
.blockend_26: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_27: ; if
    jz .blockend_27
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_assembler_getfullname
.blockend_28: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 136
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_writer_mem
.blockend_29: ; call
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_map_append
.blockend_30: ; call
    add rsp, 8
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_writer_mem
.blockend_31: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_cstr_int
.blockend_32: ; call
.blockstart_33: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_33
    jmp proc_writer_mem
.blockend_33: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_27: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_34: ; if
    jz .blockend_34
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_assembler_getfullname
.blockend_35: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 136
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_writer_mem
.blockend_36: ; call
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_map_append
.blockend_37: ; call
    add rsp, 8
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_writer_mem
.blockend_38: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_assembler_internalname
.blockend_39: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_assembler_getconst
.blockend_40: ; call
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_writer_mem
.blockend_41: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_34: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    push str_318
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_error_new
.blockend_42: ; call
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_error_eval
.blockend_43: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitcall:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    push qword 64
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    push str_319
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_writer_write
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_int_cstr
.blockend_3: ; call
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_writer_write
.blockend_4: ; call
    push str_320
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_writer_write
.blockend_5: ; call
    push str_321
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_writer_write
.blockend_6: ; call
    push str_322
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_writer_write
.blockend_7: ; call
    push str_323
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_write
.blockend_8: ; call
    push str_324
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_writer_write
.blockend_9: ; call
    push str_325
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_writer_write
.blockend_10: ; call
    push str_326
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_writer_write
.blockend_11: ; call
    push str_327
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_writer_write
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_int_cstr
.blockend_13: ; call
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_writer_write
.blockend_14: ; call
    push str_328
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_writer_write
.blockend_15: ; call
    push str_329
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_writer_write
.blockend_16: ; call
    push str_330
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_int_cstr
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_writer_write
.blockend_19: ; call
    push str_331
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_writer_write
.blockend_20: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_heap_free
.blockend_21: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_assembler_internalname
.blockend_22: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_cstr_cpy
.blockend_23: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_map_in
.blockend_24: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_25: ; if
    jz .blockend_25
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_str_new
.blockend_26: ; call
    push str_332
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_str_catc
.blockend_27: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_str_catc
.blockend_28: ; call
    push str_333
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_str_catc
.blockend_29: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_error_new
.blockend_30: ; call
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_error_eval
.blockend_31: ; call
.blockend_25: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_map_getptr
.blockend_32: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 10
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_33: ; if
    jz .blockend_33
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_assembler_updatestack
.blockend_34: ; call
    push str_334
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_writer_write
.blockend_35: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_writer_write
.blockend_36: ; call
    push str_335
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_writer_write
.blockend_37: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_heap_free
.blockend_38: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_heap_free
.blockend_39: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_33: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_assembler_updatestack
.blockend_40: ; call
    push str_336
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_writer_write
.blockend_41: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_int_cstr
.blockend_42: ; call
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_writer_write
.blockend_43: ; call
    push str_337
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_writer_write
.blockend_44: ; call
    push str_338
.blockstart_45: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_45
    jmp proc_writer_write
.blockend_45: ; call
    push str_339
.blockstart_46: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_46
    jmp proc_writer_write
.blockend_46: ; call
    push str_340
.blockstart_47: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_47
    jmp proc_writer_write
.blockend_47: ; call
    push str_341
.blockstart_48: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_48
    jmp proc_writer_write
.blockend_48: ; call
    push str_342
.blockstart_49: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_49
    jmp proc_writer_write
.blockend_49: ; call
    push str_343
.blockstart_50: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_50
    jmp proc_writer_write
.blockend_50: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_51: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_51
    jmp proc_int_cstr
.blockend_51: ; call
.blockstart_52: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_52
    jmp proc_writer_write
.blockend_52: ; call
    push str_344
.blockstart_53: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_53
    jmp proc_writer_write
.blockend_53: ; call
    push str_345
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_writer_write
.blockend_54: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_55: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_55
    jmp proc_writer_write
.blockend_55: ; call
    push str_346
.blockstart_56: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_56
    jmp proc_writer_write
.blockend_56: ; call
    push str_347
.blockstart_57: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_57
    jmp proc_writer_write
.blockend_57: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_58: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_58
    jmp proc_int_cstr
.blockend_58: ; call
.blockstart_59: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_59
    jmp proc_writer_write
.blockend_59: ; call
    push str_348
.blockstart_60: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_60
    jmp proc_writer_write
.blockend_60: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_61: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_61
    jmp proc_heap_free
.blockend_61: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_62: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_62
    jmp proc_heap_free
.blockend_62: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitintr:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 255
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 5
    push str_349
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_error_new
.blockend_2: ; call
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_error_eval
.blockend_3: ; call
.blockend_1: ; if
    push str_350
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_writer_write
.blockend_4: ; call
    push str_351
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_writer_write
.blockend_5: ; call
    push str_352
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_writer_write
.blockend_6: ; call
    push str_353
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_writer_write
.blockend_7: ; call
    push str_354
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_write
.blockend_8: ; call
    push str_355
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_writer_write
.blockend_9: ; call
    push str_356
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_writer_write
.blockend_10: ; call
    push str_357
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_writer_write
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_12: ; if
    jz .blockend_12
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 2
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_assembler_updatestack
.blockend_13: ; call
    push str_358
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_writer_write
.blockend_14: ; call
    push str_359
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_writer_write
.blockend_15: ; call
    push str_360
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_writer_write
.blockend_16: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_12: ; if
    pop rax
    push rax
    push rax
    push qword 7
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_17: ; if
    jz .blockend_17
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 0
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_assembler_updatestack
.blockend_18: ; call
    push str_361
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_writer_write
.blockend_19: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_17: ; if
    pop rax
    push rax
    push rax
    push qword 27
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_20: ; if
    jz .blockend_20
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_assembler_updatestack
.blockend_21: ; call
    push str_362
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_writer_write
.blockend_22: ; call
    push str_363
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_writer_write
.blockend_23: ; call
    push str_364
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_writer_write
.blockend_24: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_20: ; if
    pop rax
    push rax
    push rax
    push qword 26
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_25: ; if
    jz .blockend_25
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_assembler_updatestack
.blockend_26: ; call
    push str_365
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_writer_write
.blockend_27: ; call
    push str_366
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_writer_write
.blockend_28: ; call
    push str_367
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_writer_write
.blockend_29: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_25: ; if
    pop rax
    push rax
    push rax
    push qword 28
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_30: ; if
    jz .blockend_30
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_assembler_updatestack
.blockend_31: ; call
    push str_368
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_writer_write
.blockend_32: ; call
    push str_369
.blockstart_33: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_33
    jmp proc_writer_write
.blockend_33: ; call
    push str_370
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_writer_write
.blockend_34: ; call
    push str_371
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_writer_write
.blockend_35: ; call
    push str_372
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_writer_write
.blockend_36: ; call
    push str_373
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_writer_write
.blockend_37: ; call
    push str_374
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_writer_write
.blockend_38: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_30: ; if
    pop rax
    push rax
    push rax
    push qword 25
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_39: ; if
    jz .blockend_39
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 0
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_assembler_updatestack
.blockend_40: ; call
    push str_375
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_writer_write
.blockend_41: ; call
    push str_376
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_writer_write
.blockend_42: ; call
    push str_377
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_writer_write
.blockend_43: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_39: ; if
    pop rax
    push rax
    push rax
    push qword 15
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_44: ; if
    jz .blockend_44
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 2
.blockstart_45: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_45
    jmp proc_assembler_updatestack
.blockend_45: ; call
    push str_378
.blockstart_46: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_46
    jmp proc_writer_write
.blockend_46: ; call
    push str_379
.blockstart_47: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_47
    jmp proc_writer_write
.blockend_47: ; call
    push str_380
.blockstart_48: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_48
    jmp proc_writer_write
.blockend_48: ; call
    push str_381
.blockstart_49: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_49
    jmp proc_writer_write
.blockend_49: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_44: ; if
    pop rax
    push rax
    push rax
    push qword 14
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_50: ; if
    jz .blockend_50
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 3
.blockstart_51: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_51
    jmp proc_assembler_updatestack
.blockend_51: ; call
    push str_382
.blockstart_52: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_52
    jmp proc_writer_write
.blockend_52: ; call
    push str_383
.blockstart_53: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_53
    jmp proc_writer_write
.blockend_53: ; call
    push str_384
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_writer_write
.blockend_54: ; call
    push str_385
.blockstart_55: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_55
    jmp proc_writer_write
.blockend_55: ; call
    push str_386
.blockstart_56: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_56
    jmp proc_writer_write
.blockend_56: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_50: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_57: ; if
    jz .blockend_57
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 1
.blockstart_58: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_58
    jmp proc_assembler_updatestack
.blockend_58: ; call
    push str_387
.blockstart_59: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_59
    jmp proc_writer_write
.blockend_59: ; call
    push str_388
.blockstart_60: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_60
    jmp proc_writer_write
.blockend_60: ; call
    push str_389
.blockstart_61: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_61
    jmp proc_writer_write
.blockend_61: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_57: ; if
    pop rax
    push rax
    push rax
    push qword 4
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_62: ; if
    jz .blockend_62
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 1
.blockstart_63: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_63
    jmp proc_assembler_updatestack
.blockend_63: ; call
    push str_390
.blockstart_64: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_64
    jmp proc_writer_write
.blockend_64: ; call
    push str_391
.blockstart_65: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_65
    jmp proc_writer_write
.blockend_65: ; call
    push str_392
.blockstart_66: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_66
    jmp proc_writer_write
.blockend_66: ; call
    push str_393
.blockstart_67: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_67
    jmp proc_writer_write
.blockend_67: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_62: ; if
    pop rax
    push rax
    push rax
    push qword 5
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_68: ; if
    jz .blockend_68
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_69: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_69
    jmp proc_assembler_updatestack
.blockend_69: ; call
    push str_394
.blockstart_70: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_70
    jmp proc_writer_write
.blockend_70: ; call
    push str_395
.blockstart_71: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_71
    jmp proc_writer_write
.blockend_71: ; call
    push str_396
.blockstart_72: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_72
    jmp proc_writer_write
.blockend_72: ; call
    push str_397
.blockstart_73: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_73
    jmp proc_writer_write
.blockend_73: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_68: ; if
    pop rax
    push rax
    push rax
    push qword 6
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_74: ; if
    jz .blockend_74
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_75: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_75
    jmp proc_assembler_updatestack
.blockend_75: ; call
    push str_398
.blockstart_76: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_76
    jmp proc_writer_write
.blockend_76: ; call
    push str_399
.blockstart_77: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_77
    jmp proc_writer_write
.blockend_77: ; call
    push str_400
.blockstart_78: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_78
    jmp proc_writer_write
.blockend_78: ; call
    push str_401
.blockstart_79: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_79
    jmp proc_writer_write
.blockend_79: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_74: ; if
    pop rax
    push rax
    push rax
    push qword 8
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_80: ; if
    jz .blockend_80
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_81: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_81
    jmp proc_assembler_updatestack
.blockend_81: ; call
    push str_402
.blockstart_82: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_82
    jmp proc_writer_write
.blockend_82: ; call
    push str_403
.blockstart_83: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_83
    jmp proc_writer_write
.blockend_83: ; call
    push str_404
.blockstart_84: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_84
    jmp proc_writer_write
.blockend_84: ; call
    push str_405
.blockstart_85: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_85
    jmp proc_writer_write
.blockend_85: ; call
    push str_406
.blockstart_86: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_86
    jmp proc_writer_write
.blockend_86: ; call
    push str_407
.blockstart_87: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_87
    jmp proc_writer_write
.blockend_87: ; call
    push str_408
.blockstart_88: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_88
    jmp proc_writer_write
.blockend_88: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_80: ; if
    pop rax
    push rax
    push rax
    push qword 9
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_89: ; if
    jz .blockend_89
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_90: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_90
    jmp proc_assembler_updatestack
.blockend_90: ; call
    push str_409
.blockstart_91: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_91
    jmp proc_writer_write
.blockend_91: ; call
    push str_410
.blockstart_92: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_92
    jmp proc_writer_write
.blockend_92: ; call
    push str_411
.blockstart_93: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_93
    jmp proc_writer_write
.blockend_93: ; call
    push str_412
.blockstart_94: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_94
    jmp proc_writer_write
.blockend_94: ; call
    push str_413
.blockstart_95: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_95
    jmp proc_writer_write
.blockend_95: ; call
    push str_414
.blockstart_96: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_96
    jmp proc_writer_write
.blockend_96: ; call
    push str_415
.blockstart_97: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_97
    jmp proc_writer_write
.blockend_97: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_89: ; if
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_98: ; if
    jz .blockend_98
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_99: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_99
    jmp proc_assembler_updatestack
.blockend_99: ; call
    push str_416
.blockstart_100: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_100
    jmp proc_writer_write
.blockend_100: ; call
    push str_417
.blockstart_101: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_101
    jmp proc_writer_write
.blockend_101: ; call
    push str_418
.blockstart_102: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_102
    jmp proc_writer_write
.blockend_102: ; call
    push str_419
.blockstart_103: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_103
    jmp proc_writer_write
.blockend_103: ; call
    push str_420
.blockstart_104: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_104
    jmp proc_writer_write
.blockend_104: ; call
    push str_421
.blockstart_105: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_105
    jmp proc_writer_write
.blockend_105: ; call
    push str_422
.blockstart_106: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_106
    jmp proc_writer_write
.blockend_106: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_98: ; if
    pop rax
    push rax
    push rax
    push qword 11
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_107: ; if
    jz .blockend_107
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_108: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_108
    jmp proc_assembler_updatestack
.blockend_108: ; call
    push str_423
.blockstart_109: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_109
    jmp proc_writer_write
.blockend_109: ; call
    push str_424
.blockstart_110: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_110
    jmp proc_writer_write
.blockend_110: ; call
    push str_425
.blockstart_111: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_111
    jmp proc_writer_write
.blockend_111: ; call
    push str_426
.blockstart_112: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_112
    jmp proc_writer_write
.blockend_112: ; call
    push str_427
.blockstart_113: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_113
    jmp proc_writer_write
.blockend_113: ; call
    push str_428
.blockstart_114: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_114
    jmp proc_writer_write
.blockend_114: ; call
    push str_429
.blockstart_115: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_115
    jmp proc_writer_write
.blockend_115: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_107: ; if
    pop rax
    push rax
    push rax
    push qword 21
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_116: ; if
    jz .blockend_116
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 1
.blockstart_117: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_117
    jmp proc_assembler_updatestack
.blockend_117: ; call
    push str_430
.blockstart_118: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_118
    jmp proc_writer_write
.blockend_118: ; call
    push str_431
.blockstart_119: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_119
    jmp proc_writer_write
.blockend_119: ; call
    push str_432
.blockstart_120: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_120
    jmp proc_writer_write
.blockend_120: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_116: ; if
    pop rax
    push rax
    push rax
    push qword 20
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_121: ; if
    jz .blockend_121
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 1
.blockstart_122: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_122
    jmp proc_assembler_updatestack
.blockend_122: ; call
    push str_433
.blockstart_123: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_123
    jmp proc_writer_write
.blockend_123: ; call
    push str_434
.blockstart_124: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_124
    jmp proc_writer_write
.blockend_124: ; call
    push str_435
.blockstart_125: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_125
    jmp proc_writer_write
.blockend_125: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_121: ; if
    pop rax
    push rax
    push rax
    push qword 19
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_126: ; if
    jz .blockend_126
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_127: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_127
    jmp proc_assembler_updatestack
.blockend_127: ; call
    push str_436
.blockstart_128: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_128
    jmp proc_writer_write
.blockend_128: ; call
    push str_437
.blockstart_129: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_129
    jmp proc_writer_write
.blockend_129: ; call
    push str_438
.blockstart_130: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_130
    jmp proc_writer_write
.blockend_130: ; call
    push str_439
.blockstart_131: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_131
    jmp proc_writer_write
.blockend_131: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_126: ; if
    pop rax
    push rax
    push rax
    push qword 22
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_132: ; if
    jz .blockend_132
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_133: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_133
    jmp proc_assembler_updatestack
.blockend_133: ; call
    push str_440
.blockstart_134: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_134
    jmp proc_writer_write
.blockend_134: ; call
    push str_441
.blockstart_135: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_135
    jmp proc_writer_write
.blockend_135: ; call
    push str_442
.blockstart_136: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_136
    jmp proc_writer_write
.blockend_136: ; call
    push str_443
.blockstart_137: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_137
    jmp proc_writer_write
.blockend_137: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_132: ; if
    pop rax
    push rax
    push rax
    push qword 12
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_138: ; if
    jz .blockend_138
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_139: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_139
    jmp proc_assembler_updatestack
.blockend_139: ; call
    push str_444
.blockstart_140: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_140
    jmp proc_writer_write
.blockend_140: ; call
    push str_445
.blockstart_141: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_141
    jmp proc_writer_write
.blockend_141: ; call
    push str_446
.blockstart_142: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_142
    jmp proc_writer_write
.blockend_142: ; call
    push str_447
.blockstart_143: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_143
    jmp proc_writer_write
.blockend_143: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_138: ; if
    pop rax
    push rax
    push rax
    push qword 13
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_144: ; if
    jz .blockend_144
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_145: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_145
    jmp proc_assembler_updatestack
.blockend_145: ; call
    push str_448
.blockstart_146: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_146
    jmp proc_writer_write
.blockend_146: ; call
    push str_449
.blockstart_147: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_147
    jmp proc_writer_write
.blockend_147: ; call
    push str_450
.blockstart_148: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_148
    jmp proc_writer_write
.blockend_148: ; call
    push str_451
.blockstart_149: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_149
    jmp proc_writer_write
.blockend_149: ; call
    push str_452
.blockstart_150: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_150
    jmp proc_writer_write
.blockend_150: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_144: ; if
    pop rax
    push rax
    push rax
    push qword 16
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_151: ; if
    jz .blockend_151
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_152: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_152
    jmp proc_assembler_updatestack
.blockend_152: ; call
    push str_453
.blockstart_153: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_153
    jmp proc_writer_write
.blockend_153: ; call
    push str_454
.blockstart_154: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_154
    jmp proc_writer_write
.blockend_154: ; call
    push str_455
.blockstart_155: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_155
    jmp proc_writer_write
.blockend_155: ; call
    push str_456
.blockstart_156: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_156
    jmp proc_writer_write
.blockend_156: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_151: ; if
    pop rax
    push rax
    push rax
    push qword 17
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_157: ; if
    jz .blockend_157
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_158: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_158
    jmp proc_assembler_updatestack
.blockend_158: ; call
    push str_457
.blockstart_159: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_159
    jmp proc_writer_write
.blockend_159: ; call
    push str_458
.blockstart_160: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_160
    jmp proc_writer_write
.blockend_160: ; call
    push str_459
.blockstart_161: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_161
    jmp proc_writer_write
.blockend_161: ; call
    push str_460
.blockstart_162: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_162
    jmp proc_writer_write
.blockend_162: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_157: ; if
    pop rax
    push rax
    push rax
    push qword 18
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_163: ; if
    jz .blockend_163
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_164: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_164
    jmp proc_assembler_updatestack
.blockend_164: ; call
    push str_461
.blockstart_165: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_165
    jmp proc_writer_write
.blockend_165: ; call
    push str_462
.blockstart_166: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_166
    jmp proc_writer_write
.blockend_166: ; call
    push str_463
.blockstart_167: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_167
    jmp proc_writer_write
.blockend_167: ; call
    push str_464
.blockstart_168: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_168
    jmp proc_writer_write
.blockend_168: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_163: ; if
    pop rax
    push rax
    push rax
    push qword 24
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_169: ; if
    jz .blockend_169
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 2
.blockstart_170: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_170
    jmp proc_assembler_updatestack
.blockend_170: ; call
    push str_465
.blockstart_171: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_171
    jmp proc_writer_write
.blockend_171: ; call
    push str_466
.blockstart_172: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_172
    jmp proc_writer_write
.blockend_172: ; call
    push str_467
.blockstart_173: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_173
    jmp proc_writer_write
.blockend_173: ; call
    push str_468
.blockstart_174: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_174
    jmp proc_writer_write
.blockend_174: ; call
    push str_469
.blockstart_175: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_175
    jmp proc_writer_write
.blockend_175: ; call
    push str_470
.blockstart_176: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_176
    jmp proc_writer_write
.blockend_176: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_169: ; if
    pop rax
    push rax
    push rax
    push qword 29
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_177: ; if
    jz .blockend_177
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 1
.blockstart_178: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_178
    jmp proc_assembler_updatestack
.blockend_178: ; call
    push str_471
.blockstart_179: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_179
    jmp proc_writer_write
.blockend_179: ; call
    push str_472
.blockstart_180: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_180
    jmp proc_writer_write
.blockend_180: ; call
    push str_473
.blockstart_181: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_181
    jmp proc_writer_write
.blockend_181: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_177: ; if
    pop rax
    push rax
    push rax
    push qword 30
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_182: ; if
    jz .blockend_182
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_183: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_183
    jmp proc_assembler_updatestack
.blockend_183: ; call
    push str_474
.blockstart_184: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_184
    jmp proc_writer_write
.blockend_184: ; call
    push str_475
.blockstart_185: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_185
    jmp proc_writer_write
.blockend_185: ; call
    push str_476
.blockstart_186: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_186
    jmp proc_writer_write
.blockend_186: ; call
    push str_477
.blockstart_187: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_187
    jmp proc_writer_write
.blockend_187: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_182: ; if
    pop rax
    push rax
    push rax
    push qword 31
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_188: ; if
    jz .blockend_188
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 3
    push qword 1
.blockstart_189: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_189
    jmp proc_assembler_updatestack
.blockend_189: ; call
    push str_478
.blockstart_190: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_190
    jmp proc_writer_write
.blockend_190: ; call
    push str_479
.blockstart_191: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_191
    jmp proc_writer_write
.blockend_191: ; call
    push str_480
.blockstart_192: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_192
    jmp proc_writer_write
.blockend_192: ; call
    push str_481
.blockstart_193: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_193
    jmp proc_writer_write
.blockend_193: ; call
    push str_482
.blockstart_194: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_194
    jmp proc_writer_write
.blockend_194: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_188: ; if
    pop rax
    push rax
    push rax
    push qword 32
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_195: ; if
    jz .blockend_195
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 4
    push qword 1
.blockstart_196: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_196
    jmp proc_assembler_updatestack
.blockend_196: ; call
    push str_483
.blockstart_197: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_197
    jmp proc_writer_write
.blockend_197: ; call
    push str_484
.blockstart_198: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_198
    jmp proc_writer_write
.blockend_198: ; call
    push str_485
.blockstart_199: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_199
    jmp proc_writer_write
.blockend_199: ; call
    push str_486
.blockstart_200: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_200
    jmp proc_writer_write
.blockend_200: ; call
    push str_487
.blockstart_201: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_201
    jmp proc_writer_write
.blockend_201: ; call
    push str_488
.blockstart_202: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_202
    jmp proc_writer_write
.blockend_202: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_195: ; if
    pop rax
    push rax
    push rax
    push qword 33
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_203: ; if
    jz .blockend_203
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 5
    push qword 1
.blockstart_204: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_204
    jmp proc_assembler_updatestack
.blockend_204: ; call
    push str_489
.blockstart_205: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_205
    jmp proc_writer_write
.blockend_205: ; call
    push str_490
.blockstart_206: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_206
    jmp proc_writer_write
.blockend_206: ; call
    push str_491
.blockstart_207: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_207
    jmp proc_writer_write
.blockend_207: ; call
    push str_492
.blockstart_208: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_208
    jmp proc_writer_write
.blockend_208: ; call
    push str_493
.blockstart_209: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_209
    jmp proc_writer_write
.blockend_209: ; call
    push str_494
.blockstart_210: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_210
    jmp proc_writer_write
.blockend_210: ; call
    push str_495
.blockstart_211: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_211
    jmp proc_writer_write
.blockend_211: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_203: ; if
    pop rax
    push rax
    push rax
    push qword 34
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_212: ; if
    jz .blockend_212
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 6
    push qword 1
.blockstart_213: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_213
    jmp proc_assembler_updatestack
.blockend_213: ; call
    push str_496
.blockstart_214: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_214
    jmp proc_writer_write
.blockend_214: ; call
    push str_497
.blockstart_215: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_215
    jmp proc_writer_write
.blockend_215: ; call
    push str_498
.blockstart_216: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_216
    jmp proc_writer_write
.blockend_216: ; call
    push str_499
.blockstart_217: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_217
    jmp proc_writer_write
.blockend_217: ; call
    push str_500
.blockstart_218: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_218
    jmp proc_writer_write
.blockend_218: ; call
    push str_501
.blockstart_219: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_219
    jmp proc_writer_write
.blockend_219: ; call
    push str_502
.blockstart_220: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_220
    jmp proc_writer_write
.blockend_220: ; call
    push str_503
.blockstart_221: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_221
    jmp proc_writer_write
.blockend_221: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_212: ; if
    pop rax
    push rax
    push rax
    push qword 35
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_222: ; if
    jz .blockend_222
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 7
    push qword 1
.blockstart_223: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_223
    jmp proc_assembler_updatestack
.blockend_223: ; call
    push str_504
.blockstart_224: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_224
    jmp proc_writer_write
.blockend_224: ; call
    push str_505
.blockstart_225: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_225
    jmp proc_writer_write
.blockend_225: ; call
    push str_506
.blockstart_226: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_226
    jmp proc_writer_write
.blockend_226: ; call
    push str_507
.blockstart_227: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_227
    jmp proc_writer_write
.blockend_227: ; call
    push str_508
.blockstart_228: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_228
    jmp proc_writer_write
.blockend_228: ; call
    push str_509
.blockstart_229: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_229
    jmp proc_writer_write
.blockend_229: ; call
    push str_510
.blockstart_230: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_230
    jmp proc_writer_write
.blockend_230: ; call
    push str_511
.blockstart_231: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_231
    jmp proc_writer_write
.blockend_231: ; call
    push str_512
.blockstart_232: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_232
    jmp proc_writer_write
.blockend_232: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_222: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    push str_513
.blockstart_233: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_233
    jmp proc_error_new
.blockend_233: ; call
.blockstart_234: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_234
    jmp proc_error_eval
.blockend_234: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitasm:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push str_514
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_writer_write
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_writer_write
.blockend_1: ; call
    push str_515
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_writer_write
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitinc:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 32
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    push qword 64
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_cpy
.blockend_1: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 104
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_map_in
.blockend_2: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_heap_free
.blockend_4: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 104
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_516
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_map_append
.blockend_5: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_lexer_new
.blockend_6: ; call
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_lexer_run
.blockend_7: ; call
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_parser_new
.blockend_8: ; call
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_parser_run
.blockend_9: ; call
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_assembler_visitnode
.blockend_10: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 32
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_heap_free
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitfile:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push str_517
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_print
.blockend_1: ; call
    push str_518
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 32
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    push qword 0
.blockstart_4: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_assembler_visitnode
.blockend_5: ; call
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_4
.blockend_4: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitenum:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    push qword 0
.blockstart_1: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 56
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_int
.blockend_3: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_2: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_assembler_getfullname
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_map_append
.blockend_6: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_4: ; if
    add rsp, 8
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitblock:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 1
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_assembler_addprochead
.blockend_1: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 7
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 4
    push str_519
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_error_new
.blockend_4: ; call
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_error_eval
.blockend_5: ; call
.blockend_3: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_520
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_assembler_getfullname
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_map_in
.blockend_8: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_map_getptr
.blockend_10: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_9: ; if
    add rsp, 8
.blockend_6: ; if
    pop rax
    push rax
    push rax
    push qword 4
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_11: ; if
    jz .blockend_11
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_assembler_visitenum
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_11: ; if
    pop rax
    push rax
    push rax
    push qword 6
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_13: ; if
    jz .blockend_13
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 0
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_assembler_updatestack
.blockend_14: ; call
    push str_521
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_writer_write
.blockend_15: ; call
    push str_522
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_writer_write
.blockend_16: ; call
    push str_523
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_int_cstr
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_writer_write
.blockend_19: ; call
    push str_524
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_writer_write
.blockend_20: ; call
    push str_525
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_writer_write
.blockend_21: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_int_cstr
.blockend_22: ; call
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_writer_write
.blockend_23: ; call
    push str_526
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_writer_write
.blockend_24: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_13: ; if
    pop rax
    push rax
    push rax
    push qword 5
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_25: ; if
    jz .blockend_25
    push str_527
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_writer_write
.blockend_26: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_int_cstr
.blockend_27: ; call
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_writer_write
.blockend_28: ; call
    push str_528
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_writer_write
.blockend_29: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_25: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_30: ; if
    jz .blockend_30
    push str_529
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_writer_write
.blockend_31: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_int_cstr
.blockend_32: ; call
.blockstart_33: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_33
    jmp proc_writer_write
.blockend_33: ; call
    push str_530
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_writer_write
.blockend_34: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_int_cstr
.blockend_35: ; call
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_writer_write
.blockend_36: ; call
    push str_531
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_writer_write
.blockend_37: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_30: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_38: ; if
    jz .blockend_38
    push str_532
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_writer_write
.blockend_39: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_int_cstr
.blockend_40: ; call
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_writer_write
.blockend_41: ; call
    push str_533
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_writer_write
.blockend_42: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_int_cstr
.blockend_43: ; call
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_writer_write
.blockend_44: ; call
    push str_534
.blockstart_45: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_45
    jmp proc_writer_write
.blockend_45: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 49
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_38: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 33
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    push qword 0
.blockstart_46: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 56
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_47: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_47
    jmp proc_assembler_visitnode
.blockend_47: ; call
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_46
.blockend_46: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_48: ; if
    jz .blockend_48
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_535
.blockstart_49: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_49
    jmp proc_assembler_getfullname
.blockend_49: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_50: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_50
    jmp proc_map_append
.blockend_50: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_48: ; if
    pop rax
    push rax
    push rax
    push qword 6
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_51: ; if
    jz .blockend_51
    push str_536
.blockstart_52: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_52
    jmp proc_writer_write
.blockend_52: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_53: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_53
    jmp proc_int_cstr
.blockend_53: ; call
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_writer_write
.blockend_54: ; call
    push str_537
.blockstart_55: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_55
    jmp proc_writer_write
.blockend_55: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_56: ; if
    jz .blockend_56
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 33
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 255
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_57: ; if
    jz .blockend_57
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 5
    push str_538
.blockstart_58: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_58
    jmp proc_error_new
.blockend_58: ; call
.blockstart_59: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_59
    jmp proc_error_eval
.blockend_59: ; call
.blockend_57: ; if
.blockend_56: ; if
.blockend_51: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_60: ; if
    jz .blockend_60
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_61: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_61
    jmp proc_assembler_updatestack
.blockend_61: ; call
    push str_539
.blockstart_62: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_62
    jmp proc_writer_write
.blockend_62: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_63: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_63
    jmp proc_int_cstr
.blockend_63: ; call
.blockstart_64: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_64
    jmp proc_writer_write
.blockend_64: ; call
    push str_540
.blockstart_65: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_65
    jmp proc_writer_write
.blockend_65: ; call
    push str_541
.blockstart_66: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_66
    jmp proc_writer_write
.blockend_66: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_67: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_67
    jmp proc_int_cstr
.blockend_67: ; call
.blockstart_68: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_68
    jmp proc_writer_write
.blockend_68: ; call
    push str_542
.blockstart_69: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_69
    jmp proc_writer_write
.blockend_69: ; call
.blockend_60: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_70: ; if
    jz .blockend_70
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 49
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_71: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_71
    jmp proc_assembler_updatestack
.blockend_71: ; call
    push str_543
.blockstart_72: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_72
    jmp proc_writer_write
.blockend_72: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_73: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_73
    jmp proc_int_cstr
.blockend_73: ; call
.blockstart_74: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_74
    jmp proc_writer_write
.blockend_74: ; call
    push str_544
.blockstart_75: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_75
    jmp proc_writer_write
.blockend_75: ; call
    push str_545
.blockstart_76: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_76
    jmp proc_writer_write
.blockend_76: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_77: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_77
    jmp proc_int_cstr
.blockend_77: ; call
.blockstart_78: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_78
    jmp proc_writer_write
.blockend_78: ; call
    push str_546
.blockstart_79: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_79
    jmp proc_writer_write
.blockend_79: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_80: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_80
    jmp proc_constdata_new
.blockend_80: ; call
.blockstart_81: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_81
    jmp proc_slmnode_new
.blockend_81: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_82: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_82
    jmp proc_assembler_visitword
.blockend_82: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_83: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_83
    jmp proc_slmnode_free
.blockend_83: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_70: ; if
    pop rax
    push rax
    push rax
    push qword 5
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_84: ; if
    jz .blockend_84
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 0
.blockstart_85: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_85
    jmp proc_assembler_updatestack
.blockend_85: ; call
    push str_547
.blockstart_86: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_86
    jmp proc_writer_write
.blockend_86: ; call
    push str_548
.blockstart_87: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_87
    jmp proc_writer_write
.blockend_87: ; call
    push str_549
.blockstart_88: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_88
    jmp proc_writer_write
.blockend_88: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_89: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_89
    jmp proc_int_cstr
.blockend_89: ; call
.blockstart_90: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_90
    jmp proc_writer_write
.blockend_90: ; call
    push str_550
.blockstart_91: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_91
    jmp proc_writer_write
.blockend_91: ; call
    push str_551
.blockstart_92: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_92
    jmp proc_writer_write
.blockend_92: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_93: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_93
    jmp proc_int_cstr
.blockend_93: ; call
.blockstart_94: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_94
    jmp proc_writer_write
.blockend_94: ; call
    push str_552
.blockstart_95: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_95
    jmp proc_writer_write
.blockend_95: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 33
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 255
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_96: ; if
    jz .blockend_96
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 5
    push str_553
.blockstart_97: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_97
    jmp proc_error_new
.blockend_97: ; call
.blockstart_98: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_98
    jmp proc_error_eval
.blockend_98: ; call
.blockend_96: ; if
.blockend_84: ; if
    pop rax
    push rax
    push rax
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_99: ; if
    jz .blockend_99
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_100: ; if
    jz .blockend_100
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 5
    push str_554
.blockstart_101: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_101
    jmp proc_error_new
.blockend_101: ; call
.blockstart_102: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_102
    jmp proc_error_eval
.blockend_102: ; call
.blockend_100: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_99: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 33
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assembler_visitnode:
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_assembler_visitinc
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 5
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    add rsp, 8
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    pop rax
    push rax
    push rax
    push qword 11
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    add rsp, 8
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_assembler_visitfile
.blockend_4: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    pop rax
    push rax
    push rax
    push qword 12
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    add rsp, 8
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_assembler_visitblock
.blockend_6: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_5: ; if
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    add rsp, 8
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_assembler_visitconst
.blockend_8: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_7: ; if
    pop rax
    push rax
    push rax
    push qword 8
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
    add rsp, 8
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_assembler_visitdef
.blockend_10: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_9: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_11: ; if
    jz .blockend_11
    add rsp, 8
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_assembler_visitasm
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_11: ; if
    pop rax
    push rax
    push rax
    push qword 6
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_13: ; if
    jz .blockend_13
    add rsp, 8
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_assembler_visitintr
.blockend_14: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_13: ; if
    pop rax
    push rax
    push rax
    push qword 9
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_15: ; if
    jz .blockend_15
    add rsp, 8
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_assembler_visitprop
.blockend_16: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_15: ; if
    pop rax
    push rax
    push rax
    push qword 7
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_17: ; if
    jz .blockend_17
    add rsp, 8
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_assembler_visitvar
.blockend_18: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_17: ; if
    pop rax
    push rax
    push rax
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_19: ; if
    jz .blockend_19
    add rsp, 8
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_assembler_visitcall
.blockend_20: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_19: ; if
    pop rax
    push rax
    push rax
    push qword 4
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_21: ; if
    jz .blockend_21
    add rsp, 8
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_assembler_visitof
.blockend_22: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_21: ; if
    add rsp, 8
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
; headassemblerarm_new:
; headassemblerarm_internalname:
; headassemblerarm_getconst:
; headassemblerarm_addproctab:
; headassemblerarm_addwordproc:
; headassemblerarm_addprochead:
; headassemblerarm_getfullname:
; headassemblerarm_updatestack:
; headassemblerarm_visitof:
; headassemblerarm_visitword:
; headassemblerarm_visitconst:
; headassemblerarm_visitdef:
; headassemblerarm_visitprop:
; headassemblerarm_visitvar:
; headassemblerarm_visitcall:
; headassemblerarm_visitintr:
; headassemblerarm_visitasm:
; headassemblerarm_visitinc:
; headassemblerarm_visitfile:
; headassemblerarm_visitenum:
; headassemblerarm_visitsim:
; headassemblerarm_visitblock:
; headassemblerarm_visitnode:
proc_assemblerarm_new:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 145
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 104
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 256
    push qword 1
    push qword 64
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_map_new
.blockend_1: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 256
    push qword 8
    push qword 64
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_map_new
.blockend_2: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 256
    push qword 24
    push qword 64
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_map_new
.blockend_3: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 128
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 256
    push qword 8
    push qword 64
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_map_new
.blockend_4: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 136
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 256
    push qword 8
    push qword 64
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_map_new
.blockend_5: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_str_new
.blockend_6: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_internalname:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 2
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_str_new
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    push qword 0
.blockstart_1: ; do
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    pop rax
    push rax
    push rax
    push qword 47
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_555
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_str_catc
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    add rsp, 8
    push qword 0
.blockend_2: ; if
    pop rax
    push rax
    push rax
    push qword 37
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_556
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_str_catc
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    add rsp, 8
    push qword 0
.blockend_4: ; if
    pop rax
    push rax
    push rax
    push qword 46
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_557
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_str_catc
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    add rsp, 8
    push qword 0
.blockend_6: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_8: ; if
    jz .blockend_8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_str_catc
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    add rsp, 8
    push qword 0
.blockend_8: ; if
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 1000
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_getconst:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    push qword 64
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_cpy
.blockend_1: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_map_in
.blockend_2: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_str_new
.blockend_4: ; call
    push str_558
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_str_catc
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_str_catc
.blockend_6: ; call
    push str_559
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_str_catc
.blockend_7: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_error_new
.blockend_8: ; call
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_error_eval
.blockend_9: ; call
.blockend_3: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_map_getptr
.blockend_10: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_heap_free
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_updatestack:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 2
    push str_560
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_error_new
.blockend_2: ; call
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_error_eval
.blockend_3: ; call
.blockend_1: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_addproctab:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 72
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_len
.blockend_0: ; call
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_mem_eq
.blockend_1: ; call
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    push str_561
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_writer_write
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_writer_write
.blockend_4: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_5: ; do
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    push qword 95
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_5
.blockend_5: ; do
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_writer_write
.blockend_6: ; call
    push str_562
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_writer_write
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_write
.blockend_8: ; call
    push str_563
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_writer_write
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_addwordproc:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_map_getptr
.blockend_0: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 10
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_assemblerarm_updatestack
.blockend_2: ; call
    push str_564
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_writer_write
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_writer_write
.blockend_4: ; call
    push str_565
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_writer_write
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_map_getptr
.blockend_6: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_assemblerarm_updatestack
.blockend_7: ; call
    push str_566
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_write
.blockend_8: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_int_cstr
.blockend_9: ; call
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_writer_write
.blockend_10: ; call
    push str_567
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_writer_write
.blockend_11: ; call
    push str_568
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_writer_write
.blockend_12: ; call
    push str_569
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_writer_write
.blockend_13: ; call
    push str_570
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_writer_write
.blockend_14: ; call
    push str_571
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_writer_write
.blockend_15: ; call
    push str_572
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_writer_write
.blockend_16: ; call
    push str_573
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    push str_574
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_writer_write
.blockend_18: ; call
    push str_575
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_writer_write
.blockend_19: ; call
    push str_576
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_writer_write
.blockend_20: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_int_cstr
.blockend_21: ; call
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_writer_write
.blockend_22: ; call
    push str_577
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_writer_write
.blockend_23: ; call
    push str_578
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_writer_write
.blockend_24: ; call
    push str_579
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_writer_write
.blockend_25: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_writer_write
.blockend_26: ; call
    push str_580
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_writer_write
.blockend_27: ; call
    push str_581
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_writer_write
.blockend_28: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_int_cstr
.blockend_29: ; call
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_writer_write
.blockend_30: ; call
    push str_582
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_writer_write
.blockend_31: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_addprochead:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push qword 64
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_int
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 32
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_int
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 11
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    push str_583
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_writer_write
.blockend_4: ; call
.blockend_3: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 20
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    xor rax, 1
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 21
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rax
    xor rax, 1
    push rax
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 255
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_5: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_assemblerarm_internalname
.blockend_7: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_str_catc
.blockend_8: ; call
    push str_584
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_str_catc
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push qword 0
.blockend_6: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_assemblerarm_internalname
.blockend_10: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_str_catc
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_mem_cpy
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 80
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_map_append
.blockend_13: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rax
    pop rbx
    push rax
    push rbx
    push qword 11
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rax
    pop rbx
    or rax, rbx
    push rax
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_14: ; if
    jz .blockend_14
    push str_585
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_writer_write
.blockend_15: ; call
.blockend_14: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_writer_write
.blockend_16: ; call
    push str_586
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_getfullname:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    push qword 64
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_cpy
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_587
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_cat
.blockend_3: ; call
    add rsp, 8
.blockend_1: ; if
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_cstr_cat
.blockend_4: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitof:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 4
    push str_588
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_error_new
.blockend_0: ; call
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_error_eval
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitword:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 48
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 48
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    push qword 64
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_new
.blockend_1: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_len
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_str_sput
.blockend_3: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_assemblerarm_internalname
.blockend_4: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_mem_cpy
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_map_in
.blockend_6: ; call
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 0
    push qword 1
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_assemblerarm_updatestack
.blockend_8: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_map_getptr
.blockend_9: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    push str_589
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_writer_write
.blockend_10: ; call
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_int_cstr
.blockend_11: ; call
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_writer_write
.blockend_12: ; call
    push str_590
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_writer_write
.blockend_13: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_7: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 136
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_map_in
.blockend_14: ; call
    pop rbx
    test rbx, rbx
.blockstart_15: ; if
    jz .blockend_15
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 0
    push qword 1
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_assemblerarm_updatestack
.blockend_16: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_map_getptr
.blockend_17: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    push str_591
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_writer_write
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_int_cstr
.blockend_19: ; call
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_writer_write
.blockend_20: ; call
    push str_592
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_writer_write
.blockend_21: ; call
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_writer_write
.blockend_22: ; call
    push str_593
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_writer_write
.blockend_23: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_15: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 128
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_map_in
.blockend_24: ; call
    pop rbx
    test rbx, rbx
.blockstart_25: ; if
    jz .blockend_25
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 0
    push qword 1
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_assemblerarm_updatestack
.blockend_26: ; call
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_map_getptr
.blockend_27: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    push str_594
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_writer_write
.blockend_28: ; call
    push str_595
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_writer_write
.blockend_29: ; call
    push str_596
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_writer_write
.blockend_30: ; call
    push str_597
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_writer_write
.blockend_31: ; call
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_int_cstr
.blockend_32: ; call
.blockstart_33: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_33
    jmp proc_writer_write
.blockend_33: ; call
    push str_598
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_writer_write
.blockend_34: ; call
    push str_599
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_writer_write
.blockend_35: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_25: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_map_in
.blockend_36: ; call
    pop rbx
    test rbx, rbx
.blockstart_37: ; if
    jz .blockend_37
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 48
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_assemblerarm_addwordproc
.blockend_38: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_37: ; if
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 48
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 48
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_str_new
.blockend_39: ; call
    push str_600
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_str_catc
.blockend_40: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_str_catc
.blockend_41: ; call
    push str_601
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_str_catc
.blockend_42: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_error_new
.blockend_43: ; call
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_error_eval
.blockend_44: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitconst:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_assemblerarm_updatestack
.blockend_1: ; call
    push str_602
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_writer_write
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_writer_write
.blockend_3: ; call
    push str_603
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_writer_write
.blockend_4: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_assemblerarm_updatestack
.blockend_6: ; call
    push str_604
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_writer_write
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_addstr
.blockend_8: ; call
    push str_605
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_writer_write
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_5: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_10: ; if
    jz .blockend_10
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 2
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_assemblerarm_updatestack
.blockend_11: ; call
    push str_606
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_writer_write
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_writer_getlen
.blockend_13: ; call
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_int_cstr
.blockend_14: ; call
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_writer_write
.blockend_15: ; call
    push str_607
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_writer_write
.blockend_16: ; call
    push str_608
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    push str_609
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_writer_write
.blockend_18: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_writer_addstr
.blockend_19: ; call
    push str_610
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_writer_write
.blockend_20: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_10: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_21: ; if
    jz .blockend_21
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_assemblerarm_visitword
.blockend_22: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_21: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    push str_611
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_error_new
.blockend_23: ; call
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_error_eval
.blockend_24: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitdef:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_assemblerarm_getfullname
.blockend_1: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_int
.blockend_2: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_map_append
.blockend_3: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    push str_612
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_error_new
.blockend_4: ; call
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_error_eval
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitprop:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_assemblerarm_getfullname
.blockend_1: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_map_append
.blockend_2: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_int
.blockend_3: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_assemblerarm_getfullname
.blockend_5: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_assemblerarm_internalname
.blockend_6: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_assemblerarm_getconst
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    push str_613
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_error_new
.blockend_8: ; call
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_error_eval
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitvar:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    push qword 64
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_heap_zalloc
.blockend_2: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_cpy
.blockend_3: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 128
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_map_append
.blockend_4: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push str_614
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_writer_write
.blockend_5: ; call
    push str_615
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_writer_write
.blockend_6: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_writer_write
.blockend_7: ; call
    push str_616
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_write
.blockend_8: ; call
    push str_617
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_writer_write
.blockend_9: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_cstr_int
.blockend_10: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_11: ; if
    jz .blockend_11
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    push qword 64
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_heap_zalloc
.blockend_12: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_cstr_cpy
.blockend_13: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 128
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_map_append
.blockend_14: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_assemblerarm_internalname
.blockend_15: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_assemblerarm_getconst
.blockend_16: ; call
    push str_618
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    push str_619
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_writer_write
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_int_cstr
.blockend_19: ; call
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_writer_write
.blockend_20: ; call
    push str_620
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_writer_write
.blockend_21: ; call
    push str_621
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_writer_write
.blockend_22: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_assemblerarm_internalname
.blockend_23: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_assemblerarm_getconst
.blockend_24: ; call
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_11: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    push str_622
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_error_new
.blockend_25: ; call
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_error_eval
.blockend_26: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_27: ; if
    jz .blockend_27
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_assemblerarm_getfullname
.blockend_28: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 136
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_writer_mem
.blockend_29: ; call
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_map_append
.blockend_30: ; call
    add rsp, 8
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_writer_mem
.blockend_31: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_cstr_int
.blockend_32: ; call
.blockstart_33: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_33
    jmp proc_writer_mem
.blockend_33: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_27: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_34: ; if
    jz .blockend_34
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_assemblerarm_getfullname
.blockend_35: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 136
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_writer_mem
.blockend_36: ; call
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_map_append
.blockend_37: ; call
    add rsp, 8
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_writer_mem
.blockend_38: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_assemblerarm_internalname
.blockend_39: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_assemblerarm_getconst
.blockend_40: ; call
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_writer_mem
.blockend_41: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_34: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    push str_623
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_error_new
.blockend_42: ; call
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_error_eval
.blockend_43: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitcall:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    push qword 64
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    push str_624
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_writer_write
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_int_cstr
.blockend_3: ; call
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_writer_write
.blockend_4: ; call
    push str_625
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_writer_write
.blockend_5: ; call
    push str_626
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_writer_write
.blockend_6: ; call
    push str_627
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_writer_write
.blockend_7: ; call
    push str_628
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_write
.blockend_8: ; call
    push str_629
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_writer_write
.blockend_9: ; call
    push str_630
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_writer_write
.blockend_10: ; call
    push str_631
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_writer_write
.blockend_11: ; call
    push str_632
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_writer_write
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_int_cstr
.blockend_13: ; call
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_writer_write
.blockend_14: ; call
    push str_633
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_writer_write
.blockend_15: ; call
    push str_634
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_writer_write
.blockend_16: ; call
    push str_635
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_int_cstr
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_writer_write
.blockend_19: ; call
    push str_636
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_writer_write
.blockend_20: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_heap_free
.blockend_21: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_assemblerarm_internalname
.blockend_22: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_cstr_cpy
.blockend_23: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_map_in
.blockend_24: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_25: ; if
    jz .blockend_25
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_str_new
.blockend_26: ; call
    push str_637
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_str_catc
.blockend_27: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_str_catc
.blockend_28: ; call
    push str_638
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_str_catc
.blockend_29: ; call
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_error_new
.blockend_30: ; call
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_error_eval
.blockend_31: ; call
.blockend_25: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 120
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_map_getptr
.blockend_32: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 10
    xor rdx, rdx
    pop rbx
    pop rax
    idiv rbx
    push rax
    push rdx
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_33: ; if
    jz .blockend_33
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_assemblerarm_updatestack
.blockend_34: ; call
    push str_639
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_writer_write
.blockend_35: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_writer_write
.blockend_36: ; call
    push str_640
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_writer_write
.blockend_37: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_heap_free
.blockend_38: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_heap_free
.blockend_39: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_33: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_assemblerarm_updatestack
.blockend_40: ; call
    push str_641
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_writer_write
.blockend_41: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_int_cstr
.blockend_42: ; call
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_writer_write
.blockend_43: ; call
    push str_642
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_writer_write
.blockend_44: ; call
    push str_643
.blockstart_45: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_45
    jmp proc_writer_write
.blockend_45: ; call
    push str_644
.blockstart_46: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_46
    jmp proc_writer_write
.blockend_46: ; call
    push str_645
.blockstart_47: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_47
    jmp proc_writer_write
.blockend_47: ; call
    push str_646
.blockstart_48: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_48
    jmp proc_writer_write
.blockend_48: ; call
    push str_647
.blockstart_49: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_49
    jmp proc_writer_write
.blockend_49: ; call
    push str_648
.blockstart_50: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_50
    jmp proc_writer_write
.blockend_50: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_51: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_51
    jmp proc_int_cstr
.blockend_51: ; call
.blockstart_52: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_52
    jmp proc_writer_write
.blockend_52: ; call
    push str_649
.blockstart_53: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_53
    jmp proc_writer_write
.blockend_53: ; call
    push str_650
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_writer_write
.blockend_54: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_55: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_55
    jmp proc_writer_write
.blockend_55: ; call
    push str_651
.blockstart_56: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_56
    jmp proc_writer_write
.blockend_56: ; call
    push str_652
.blockstart_57: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_57
    jmp proc_writer_write
.blockend_57: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_58: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_58
    jmp proc_int_cstr
.blockend_58: ; call
.blockstart_59: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_59
    jmp proc_writer_write
.blockend_59: ; call
    push str_653
.blockstart_60: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_60
    jmp proc_writer_write
.blockend_60: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_61: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_61
    jmp proc_heap_free
.blockend_61: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_62: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_62
    jmp proc_heap_free
.blockend_62: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitintr:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 255
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 5
    push str_654
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_error_new
.blockend_2: ; call
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_error_eval
.blockend_3: ; call
.blockend_1: ; if
    push str_655
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_writer_write
.blockend_4: ; call
    push str_656
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_writer_write
.blockend_5: ; call
    push str_657
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_writer_write
.blockend_6: ; call
    push str_658
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_writer_write
.blockend_7: ; call
    push str_659
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_writer_write
.blockend_8: ; call
    push str_660
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_writer_write
.blockend_9: ; call
    push str_661
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_writer_write
.blockend_10: ; call
    push str_662
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_writer_write
.blockend_11: ; call
    push str_663
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_writer_write
.blockend_12: ; call
    push str_664
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_writer_write
.blockend_13: ; call
    push str_665
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_writer_write
.blockend_14: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_15: ; if
    jz .blockend_15
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 2
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_assemblerarm_updatestack
.blockend_16: ; call
    push str_666
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    push str_667
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_writer_write
.blockend_18: ; call
    push str_668
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_writer_write
.blockend_19: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_15: ; if
    pop rax
    push rax
    push rax
    push qword 7
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_20: ; if
    jz .blockend_20
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 0
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_assemblerarm_updatestack
.blockend_21: ; call
    push str_669
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_writer_write
.blockend_22: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_20: ; if
    pop rax
    push rax
    push rax
    push qword 27
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_23: ; if
    jz .blockend_23
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_assemblerarm_updatestack
.blockend_24: ; call
    push str_670
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_writer_write
.blockend_25: ; call
    push str_671
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_writer_write
.blockend_26: ; call
    push str_672
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_writer_write
.blockend_27: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_23: ; if
    pop rax
    push rax
    push rax
    push qword 26
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_28: ; if
    jz .blockend_28
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_assemblerarm_updatestack
.blockend_29: ; call
    push str_673
.blockstart_30: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_30
    jmp proc_writer_write
.blockend_30: ; call
    push str_674
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_writer_write
.blockend_31: ; call
    push str_675
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_writer_write
.blockend_32: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_28: ; if
    pop rax
    push rax
    push rax
    push qword 28
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_33: ; if
    jz .blockend_33
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_assemblerarm_updatestack
.blockend_34: ; call
    push str_676
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_writer_write
.blockend_35: ; call
    push str_677
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_writer_write
.blockend_36: ; call
    push str_678
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_writer_write
.blockend_37: ; call
    push str_679
.blockstart_38: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_38
    jmp proc_writer_write
.blockend_38: ; call
    push str_680
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_writer_write
.blockend_39: ; call
    push str_681
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_writer_write
.blockend_40: ; call
    push str_682
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_writer_write
.blockend_41: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_33: ; if
    pop rax
    push rax
    push rax
    push qword 25
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_42: ; if
    jz .blockend_42
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 1
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 0
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_assemblerarm_updatestack
.blockend_43: ; call
    push str_683
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_writer_write
.blockend_44: ; call
    push str_684
.blockstart_45: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_45
    jmp proc_writer_write
.blockend_45: ; call
    push str_685
.blockstart_46: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_46
    jmp proc_writer_write
.blockend_46: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_42: ; if
    pop rax
    push rax
    push rax
    push qword 15
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_47: ; if
    jz .blockend_47
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 2
.blockstart_48: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_48
    jmp proc_assemblerarm_updatestack
.blockend_48: ; call
    push str_686
.blockstart_49: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_49
    jmp proc_writer_write
.blockend_49: ; call
    push str_687
.blockstart_50: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_50
    jmp proc_writer_write
.blockend_50: ; call
    push str_688
.blockstart_51: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_51
    jmp proc_writer_write
.blockend_51: ; call
    push str_689
.blockstart_52: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_52
    jmp proc_writer_write
.blockend_52: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_47: ; if
    pop rax
    push rax
    push rax
    push qword 14
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_53: ; if
    jz .blockend_53
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 3
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_assemblerarm_updatestack
.blockend_54: ; call
    push str_690
.blockstart_55: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_55
    jmp proc_writer_write
.blockend_55: ; call
    push str_691
.blockstart_56: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_56
    jmp proc_writer_write
.blockend_56: ; call
    push str_692
.blockstart_57: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_57
    jmp proc_writer_write
.blockend_57: ; call
    push str_693
.blockstart_58: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_58
    jmp proc_writer_write
.blockend_58: ; call
    push str_694
.blockstart_59: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_59
    jmp proc_writer_write
.blockend_59: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_53: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_60: ; if
    jz .blockend_60
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 1
.blockstart_61: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_61
    jmp proc_assemblerarm_updatestack
.blockend_61: ; call
    push str_695
.blockstart_62: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_62
    jmp proc_writer_write
.blockend_62: ; call
    push str_696
.blockstart_63: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_63
    jmp proc_writer_write
.blockend_63: ; call
    push str_697
.blockstart_64: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_64
    jmp proc_writer_write
.blockend_64: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_60: ; if
    pop rax
    push rax
    push rax
    push qword 4
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_65: ; if
    jz .blockend_65
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 1
.blockstart_66: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_66
    jmp proc_assemblerarm_updatestack
.blockend_66: ; call
    push str_698
.blockstart_67: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_67
    jmp proc_writer_write
.blockend_67: ; call
    push str_699
.blockstart_68: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_68
    jmp proc_writer_write
.blockend_68: ; call
    push str_700
.blockstart_69: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_69
    jmp proc_writer_write
.blockend_69: ; call
    push str_701
.blockstart_70: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_70
    jmp proc_writer_write
.blockend_70: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_65: ; if
    pop rax
    push rax
    push rax
    push qword 5
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_71: ; if
    jz .blockend_71
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_72: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_72
    jmp proc_assemblerarm_updatestack
.blockend_72: ; call
    push str_702
.blockstart_73: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_73
    jmp proc_writer_write
.blockend_73: ; call
    push str_703
.blockstart_74: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_74
    jmp proc_writer_write
.blockend_74: ; call
    push str_704
.blockstart_75: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_75
    jmp proc_writer_write
.blockend_75: ; call
    push str_705
.blockstart_76: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_76
    jmp proc_writer_write
.blockend_76: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_71: ; if
    pop rax
    push rax
    push rax
    push qword 6
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_77: ; if
    jz .blockend_77
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_78: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_78
    jmp proc_assemblerarm_updatestack
.blockend_78: ; call
    push str_706
.blockstart_79: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_79
    jmp proc_writer_write
.blockend_79: ; call
    push str_707
.blockstart_80: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_80
    jmp proc_writer_write
.blockend_80: ; call
    push str_708
.blockstart_81: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_81
    jmp proc_writer_write
.blockend_81: ; call
    push str_709
.blockstart_82: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_82
    jmp proc_writer_write
.blockend_82: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_77: ; if
    pop rax
    push rax
    push rax
    push qword 8
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_83: ; if
    jz .blockend_83
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_84: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_84
    jmp proc_assemblerarm_updatestack
.blockend_84: ; call
    push str_710
.blockstart_85: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_85
    jmp proc_writer_write
.blockend_85: ; call
    push str_711
.blockstart_86: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_86
    jmp proc_writer_write
.blockend_86: ; call
    push str_712
.blockstart_87: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_87
    jmp proc_writer_write
.blockend_87: ; call
    push str_713
.blockstart_88: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_88
    jmp proc_writer_write
.blockend_88: ; call
    push str_714
.blockstart_89: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_89
    jmp proc_writer_write
.blockend_89: ; call
    push str_715
.blockstart_90: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_90
    jmp proc_writer_write
.blockend_90: ; call
    push str_716
.blockstart_91: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_91
    jmp proc_writer_write
.blockend_91: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_83: ; if
    pop rax
    push rax
    push rax
    push qword 9
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_92: ; if
    jz .blockend_92
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_93: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_93
    jmp proc_assemblerarm_updatestack
.blockend_93: ; call
    push str_717
.blockstart_94: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_94
    jmp proc_writer_write
.blockend_94: ; call
    push str_718
.blockstart_95: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_95
    jmp proc_writer_write
.blockend_95: ; call
    push str_719
.blockstart_96: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_96
    jmp proc_writer_write
.blockend_96: ; call
    push str_720
.blockstart_97: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_97
    jmp proc_writer_write
.blockend_97: ; call
    push str_721
.blockstart_98: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_98
    jmp proc_writer_write
.blockend_98: ; call
    push str_722
.blockstart_99: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_99
    jmp proc_writer_write
.blockend_99: ; call
    push str_723
.blockstart_100: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_100
    jmp proc_writer_write
.blockend_100: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_92: ; if
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_101: ; if
    jz .blockend_101
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_102: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_102
    jmp proc_assemblerarm_updatestack
.blockend_102: ; call
    push str_724
.blockstart_103: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_103
    jmp proc_writer_write
.blockend_103: ; call
    push str_725
.blockstart_104: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_104
    jmp proc_writer_write
.blockend_104: ; call
    push str_726
.blockstart_105: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_105
    jmp proc_writer_write
.blockend_105: ; call
    push str_727
.blockstart_106: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_106
    jmp proc_writer_write
.blockend_106: ; call
    push str_728
.blockstart_107: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_107
    jmp proc_writer_write
.blockend_107: ; call
    push str_729
.blockstart_108: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_108
    jmp proc_writer_write
.blockend_108: ; call
    push str_730
.blockstart_109: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_109
    jmp proc_writer_write
.blockend_109: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_101: ; if
    pop rax
    push rax
    push rax
    push qword 11
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_110: ; if
    jz .blockend_110
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_111: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_111
    jmp proc_assemblerarm_updatestack
.blockend_111: ; call
    push str_731
.blockstart_112: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_112
    jmp proc_writer_write
.blockend_112: ; call
    push str_732
.blockstart_113: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_113
    jmp proc_writer_write
.blockend_113: ; call
    push str_733
.blockstart_114: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_114
    jmp proc_writer_write
.blockend_114: ; call
    push str_734
.blockstart_115: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_115
    jmp proc_writer_write
.blockend_115: ; call
    push str_735
.blockstart_116: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_116
    jmp proc_writer_write
.blockend_116: ; call
    push str_736
.blockstart_117: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_117
    jmp proc_writer_write
.blockend_117: ; call
    push str_737
.blockstart_118: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_118
    jmp proc_writer_write
.blockend_118: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_110: ; if
    pop rax
    push rax
    push rax
    push qword 21
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_119: ; if
    jz .blockend_119
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 1
.blockstart_120: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_120
    jmp proc_assemblerarm_updatestack
.blockend_120: ; call
    push str_738
.blockstart_121: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_121
    jmp proc_writer_write
.blockend_121: ; call
    push str_739
.blockstart_122: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_122
    jmp proc_writer_write
.blockend_122: ; call
    push str_740
.blockstart_123: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_123
    jmp proc_writer_write
.blockend_123: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_119: ; if
    pop rax
    push rax
    push rax
    push qword 20
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_124: ; if
    jz .blockend_124
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 1
.blockstart_125: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_125
    jmp proc_assemblerarm_updatestack
.blockend_125: ; call
    push str_741
.blockstart_126: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_126
    jmp proc_writer_write
.blockend_126: ; call
    push str_742
.blockstart_127: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_127
    jmp proc_writer_write
.blockend_127: ; call
    push str_743
.blockstart_128: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_128
    jmp proc_writer_write
.blockend_128: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_124: ; if
    pop rax
    push rax
    push rax
    push qword 19
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_129: ; if
    jz .blockend_129
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_130: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_130
    jmp proc_assemblerarm_updatestack
.blockend_130: ; call
    push str_744
.blockstart_131: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_131
    jmp proc_writer_write
.blockend_131: ; call
    push str_745
.blockstart_132: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_132
    jmp proc_writer_write
.blockend_132: ; call
    push str_746
.blockstart_133: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_133
    jmp proc_writer_write
.blockend_133: ; call
    push str_747
.blockstart_134: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_134
    jmp proc_writer_write
.blockend_134: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_129: ; if
    pop rax
    push rax
    push rax
    push qword 22
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_135: ; if
    jz .blockend_135
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_136: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_136
    jmp proc_assemblerarm_updatestack
.blockend_136: ; call
    push str_748
.blockstart_137: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_137
    jmp proc_writer_write
.blockend_137: ; call
    push str_749
.blockstart_138: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_138
    jmp proc_writer_write
.blockend_138: ; call
    push str_750
.blockstart_139: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_139
    jmp proc_writer_write
.blockend_139: ; call
    push str_751
.blockstart_140: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_140
    jmp proc_writer_write
.blockend_140: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_135: ; if
    pop rax
    push rax
    push rax
    push qword 12
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_141: ; if
    jz .blockend_141
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_142: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_142
    jmp proc_assemblerarm_updatestack
.blockend_142: ; call
    push str_752
.blockstart_143: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_143
    jmp proc_writer_write
.blockend_143: ; call
    push str_753
.blockstart_144: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_144
    jmp proc_writer_write
.blockend_144: ; call
    push str_754
.blockstart_145: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_145
    jmp proc_writer_write
.blockend_145: ; call
    push str_755
.blockstart_146: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_146
    jmp proc_writer_write
.blockend_146: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_141: ; if
    pop rax
    push rax
    push rax
    push qword 13
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_147: ; if
    jz .blockend_147
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_148: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_148
    jmp proc_assemblerarm_updatestack
.blockend_148: ; call
    push str_756
.blockstart_149: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_149
    jmp proc_writer_write
.blockend_149: ; call
    push str_757
.blockstart_150: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_150
    jmp proc_writer_write
.blockend_150: ; call
    push str_758
.blockstart_151: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_151
    jmp proc_writer_write
.blockend_151: ; call
    push str_759
.blockstart_152: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_152
    jmp proc_writer_write
.blockend_152: ; call
    push str_760
.blockstart_153: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_153
    jmp proc_writer_write
.blockend_153: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_147: ; if
    pop rax
    push rax
    push rax
    push qword 16
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_154: ; if
    jz .blockend_154
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_155: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_155
    jmp proc_assemblerarm_updatestack
.blockend_155: ; call
    push str_761
.blockstart_156: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_156
    jmp proc_writer_write
.blockend_156: ; call
    push str_762
.blockstart_157: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_157
    jmp proc_writer_write
.blockend_157: ; call
    push str_763
.blockstart_158: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_158
    jmp proc_writer_write
.blockend_158: ; call
    push str_764
.blockstart_159: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_159
    jmp proc_writer_write
.blockend_159: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_154: ; if
    pop rax
    push rax
    push rax
    push qword 17
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_160: ; if
    jz .blockend_160
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_161: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_161
    jmp proc_assemblerarm_updatestack
.blockend_161: ; call
    push str_765
.blockstart_162: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_162
    jmp proc_writer_write
.blockend_162: ; call
    push str_766
.blockstart_163: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_163
    jmp proc_writer_write
.blockend_163: ; call
    push str_767
.blockstart_164: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_164
    jmp proc_writer_write
.blockend_164: ; call
    push str_768
.blockstart_165: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_165
    jmp proc_writer_write
.blockend_165: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_160: ; if
    pop rax
    push rax
    push rax
    push qword 18
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_166: ; if
    jz .blockend_166
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_167: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_167
    jmp proc_assemblerarm_updatestack
.blockend_167: ; call
    push str_769
.blockstart_168: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_168
    jmp proc_writer_write
.blockend_168: ; call
    push str_770
.blockstart_169: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_169
    jmp proc_writer_write
.blockend_169: ; call
    push str_771
.blockstart_170: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_170
    jmp proc_writer_write
.blockend_170: ; call
    push str_772
.blockstart_171: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_171
    jmp proc_writer_write
.blockend_171: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_166: ; if
    pop rax
    push rax
    push rax
    push qword 24
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_172: ; if
    jz .blockend_172
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 2
.blockstart_173: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_173
    jmp proc_assemblerarm_updatestack
.blockend_173: ; call
    push str_773
.blockstart_174: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_174
    jmp proc_writer_write
.blockend_174: ; call
    push str_774
.blockstart_175: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_175
    jmp proc_writer_write
.blockend_175: ; call
    push str_775
.blockstart_176: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_176
    jmp proc_writer_write
.blockend_176: ; call
    push str_776
.blockstart_177: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_177
    jmp proc_writer_write
.blockend_177: ; call
    push str_777
.blockstart_178: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_178
    jmp proc_writer_write
.blockend_178: ; call
    push str_778
.blockstart_179: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_179
    jmp proc_writer_write
.blockend_179: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_172: ; if
    pop rax
    push rax
    push rax
    push qword 29
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_180: ; if
    jz .blockend_180
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 1
.blockstart_181: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_181
    jmp proc_assemblerarm_updatestack
.blockend_181: ; call
    push str_779
.blockstart_182: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_182
    jmp proc_writer_write
.blockend_182: ; call
    push str_780
.blockstart_183: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_183
    jmp proc_writer_write
.blockend_183: ; call
    push str_781
.blockstart_184: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_184
    jmp proc_writer_write
.blockend_184: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_180: ; if
    pop rax
    push rax
    push rax
    push qword 30
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_185: ; if
    jz .blockend_185
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 2
    push qword 1
.blockstart_186: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_186
    jmp proc_assemblerarm_updatestack
.blockend_186: ; call
    push str_782
.blockstart_187: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_187
    jmp proc_writer_write
.blockend_187: ; call
    push str_783
.blockstart_188: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_188
    jmp proc_writer_write
.blockend_188: ; call
    push str_784
.blockstart_189: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_189
    jmp proc_writer_write
.blockend_189: ; call
    push str_785
.blockstart_190: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_190
    jmp proc_writer_write
.blockend_190: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_185: ; if
    pop rax
    push rax
    push rax
    push qword 31
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_191: ; if
    jz .blockend_191
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 3
    push qword 1
.blockstart_192: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_192
    jmp proc_assemblerarm_updatestack
.blockend_192: ; call
    push str_786
.blockstart_193: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_193
    jmp proc_writer_write
.blockend_193: ; call
    push str_787
.blockstart_194: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_194
    jmp proc_writer_write
.blockend_194: ; call
    push str_788
.blockstart_195: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_195
    jmp proc_writer_write
.blockend_195: ; call
    push str_789
.blockstart_196: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_196
    jmp proc_writer_write
.blockend_196: ; call
    push str_790
.blockstart_197: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_197
    jmp proc_writer_write
.blockend_197: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_191: ; if
    pop rax
    push rax
    push rax
    push qword 32
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_198: ; if
    jz .blockend_198
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 4
    push qword 1
.blockstart_199: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_199
    jmp proc_assemblerarm_updatestack
.blockend_199: ; call
    push str_791
.blockstart_200: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_200
    jmp proc_writer_write
.blockend_200: ; call
    push str_792
.blockstart_201: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_201
    jmp proc_writer_write
.blockend_201: ; call
    push str_793
.blockstart_202: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_202
    jmp proc_writer_write
.blockend_202: ; call
    push str_794
.blockstart_203: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_203
    jmp proc_writer_write
.blockend_203: ; call
    push str_795
.blockstart_204: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_204
    jmp proc_writer_write
.blockend_204: ; call
    push str_796
.blockstart_205: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_205
    jmp proc_writer_write
.blockend_205: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_198: ; if
    pop rax
    push rax
    push rax
    push qword 33
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_206: ; if
    jz .blockend_206
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 5
    push qword 1
.blockstart_207: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_207
    jmp proc_assemblerarm_updatestack
.blockend_207: ; call
    push str_797
.blockstart_208: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_208
    jmp proc_writer_write
.blockend_208: ; call
    push str_798
.blockstart_209: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_209
    jmp proc_writer_write
.blockend_209: ; call
    push str_799
.blockstart_210: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_210
    jmp proc_writer_write
.blockend_210: ; call
    push str_800
.blockstart_211: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_211
    jmp proc_writer_write
.blockend_211: ; call
    push str_801
.blockstart_212: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_212
    jmp proc_writer_write
.blockend_212: ; call
    push str_802
.blockstart_213: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_213
    jmp proc_writer_write
.blockend_213: ; call
    push str_803
.blockstart_214: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_214
    jmp proc_writer_write
.blockend_214: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_206: ; if
    pop rax
    push rax
    push rax
    push qword 34
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_215: ; if
    jz .blockend_215
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 6
    push qword 1
.blockstart_216: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_216
    jmp proc_assemblerarm_updatestack
.blockend_216: ; call
    push str_804
.blockstart_217: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_217
    jmp proc_writer_write
.blockend_217: ; call
    push str_805
.blockstart_218: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_218
    jmp proc_writer_write
.blockend_218: ; call
    push str_806
.blockstart_219: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_219
    jmp proc_writer_write
.blockend_219: ; call
    push str_807
.blockstart_220: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_220
    jmp proc_writer_write
.blockend_220: ; call
    push str_808
.blockstart_221: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_221
    jmp proc_writer_write
.blockend_221: ; call
    push str_809
.blockstart_222: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_222
    jmp proc_writer_write
.blockend_222: ; call
    push str_810
.blockstart_223: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_223
    jmp proc_writer_write
.blockend_223: ; call
    push str_811
.blockstart_224: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_224
    jmp proc_writer_write
.blockend_224: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_215: ; if
    pop rax
    push rax
    push rax
    push qword 35
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_225: ; if
    jz .blockend_225
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 7
    push qword 1
.blockstart_226: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_226
    jmp proc_assemblerarm_updatestack
.blockend_226: ; call
    push str_812
.blockstart_227: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_227
    jmp proc_writer_write
.blockend_227: ; call
    push str_813
.blockstart_228: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_228
    jmp proc_writer_write
.blockend_228: ; call
    push str_814
.blockstart_229: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_229
    jmp proc_writer_write
.blockend_229: ; call
    push str_815
.blockstart_230: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_230
    jmp proc_writer_write
.blockend_230: ; call
    push str_816
.blockstart_231: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_231
    jmp proc_writer_write
.blockend_231: ; call
    push str_817
.blockstart_232: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_232
    jmp proc_writer_write
.blockend_232: ; call
    push str_818
.blockstart_233: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_233
    jmp proc_writer_write
.blockend_233: ; call
    push str_819
.blockstart_234: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_234
    jmp proc_writer_write
.blockend_234: ; call
    push str_820
.blockstart_235: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_235
    jmp proc_writer_write
.blockend_235: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_225: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    push str_821
.blockstart_236: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_236
    jmp proc_error_new
.blockend_236: ; call
.blockstart_237: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_237
    jmp proc_error_eval
.blockend_237: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitasm:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push str_822
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_writer_write
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_writer_write
.blockend_1: ; call
    push str_823
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_writer_write
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitinc:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 32
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    push qword 64
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_heap_zalloc
.blockend_0: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_cpy
.blockend_1: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 104
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_map_in
.blockend_2: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_heap_free
.blockend_4: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 104
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_824
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_map_append
.blockend_5: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_lexer_new
.blockend_6: ; call
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_lexer_run
.blockend_7: ; call
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_parser_new
.blockend_8: ; call
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_parser_run
.blockend_9: ; call
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_assemblerarm_visitnode
.blockend_10: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 32
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 40
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_heap_free
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitfile:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push str_825
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_print
.blockend_0: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_str_print
.blockend_1: ; call
    push str_826
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_print
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 32
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    push qword 0
.blockstart_4: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_assemblerarm_visitnode
.blockend_5: ; call
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_4
.blockend_4: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitenum:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    push qword 0
.blockstart_1: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 56
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_int
.blockend_3: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_2: ; if
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_assemblerarm_getfullname
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_map_append
.blockend_6: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_4: ; if
    add rsp, 8
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_1
.blockend_1: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitblock:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 1
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_assemblerarm_addprochead
.blockend_1: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
.blockend_0: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 7
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 4
    push str_827
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_error_new
.blockend_4: ; call
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_error_eval
.blockend_5: ; call
.blockend_3: ; if
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_828
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_assemblerarm_getfullname
.blockend_7: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_map_in
.blockend_8: ; call
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_map_getptr
.blockend_10: ; call
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_9: ; if
    add rsp, 8
.blockend_6: ; if
    pop rax
    push rax
    push rax
    push qword 4
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_11: ; if
    jz .blockend_11
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_assemblerarm_visitenum
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_11: ; if
    pop rax
    push rax
    push rax
    push qword 6
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_13: ; if
    jz .blockend_13
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 0
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_assemblerarm_updatestack
.blockend_14: ; call
    push str_829
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_writer_write
.blockend_15: ; call
    push str_830
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_writer_write
.blockend_16: ; call
    push str_831
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_writer_write
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_int_cstr
.blockend_18: ; call
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_writer_write
.blockend_19: ; call
    push str_832
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_writer_write
.blockend_20: ; call
    push str_833
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_writer_write
.blockend_21: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_int_cstr
.blockend_22: ; call
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_writer_write
.blockend_23: ; call
    push str_834
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_writer_write
.blockend_24: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_13: ; if
    pop rax
    push rax
    push rax
    push qword 5
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_25: ; if
    jz .blockend_25
    push str_835
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_writer_write
.blockend_26: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_27: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_27
    jmp proc_int_cstr
.blockend_27: ; call
.blockstart_28: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_28
    jmp proc_writer_write
.blockend_28: ; call
    push str_836
.blockstart_29: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_29
    jmp proc_writer_write
.blockend_29: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_25: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_30: ; if
    jz .blockend_30
    push str_837
.blockstart_31: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_31
    jmp proc_writer_write
.blockend_31: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_32: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_32
    jmp proc_int_cstr
.blockend_32: ; call
.blockstart_33: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_33
    jmp proc_writer_write
.blockend_33: ; call
    push str_838
.blockstart_34: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_34
    jmp proc_writer_write
.blockend_34: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_35: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_35
    jmp proc_int_cstr
.blockend_35: ; call
.blockstart_36: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_36
    jmp proc_writer_write
.blockend_36: ; call
    push str_839
.blockstart_37: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_37
    jmp proc_writer_write
.blockend_37: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_30: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_38: ; if
    jz .blockend_38
    push str_840
.blockstart_39: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_39
    jmp proc_writer_write
.blockend_39: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_40: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_40
    jmp proc_int_cstr
.blockend_40: ; call
.blockstart_41: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_41
    jmp proc_writer_write
.blockend_41: ; call
    push str_841
.blockstart_42: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_42
    jmp proc_writer_write
.blockend_42: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_43: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_43
    jmp proc_int_cstr
.blockend_43: ; call
.blockstart_44: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_44
    jmp proc_writer_write
.blockend_44: ; call
    push str_842
.blockstart_45: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_45
    jmp proc_writer_write
.blockend_45: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 49
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_38: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 33
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    push qword 0
.blockstart_46: ; do
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 56
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    push qword 8
    pop rax
    pop rbx
    imul rax, rbx
    push rax
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_47: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_47
    jmp proc_assemblerarm_visitnode
.blockend_47: ; call
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rbx
    push rax
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_46
.blockend_46: ; do
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_48: ; if
    jz .blockend_48
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_843
.blockstart_49: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_49
    jmp proc_assemblerarm_getfullname
.blockend_49: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 112
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    pop rbx
    push rax
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 64
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_50: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_50
    jmp proc_map_append
.blockend_50: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_48: ; if
    pop rax
    push rax
    push rax
    push qword 6
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_51: ; if
    jz .blockend_51
    push str_844
.blockstart_52: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_52
    jmp proc_writer_write
.blockend_52: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_53: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_53
    jmp proc_int_cstr
.blockend_53: ; call
.blockstart_54: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_54
    jmp proc_writer_write
.blockend_54: ; call
    push str_845
.blockstart_55: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_55
    jmp proc_writer_write
.blockend_55: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_56: ; if
    jz .blockend_56
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 33
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 255
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_57: ; if
    jz .blockend_57
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 5
    push str_846
.blockstart_58: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_58
    jmp proc_error_new
.blockend_58: ; call
.blockstart_59: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_59
    jmp proc_error_eval
.blockend_59: ; call
.blockend_57: ; if
.blockend_56: ; if
.blockend_51: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_60: ; if
    jz .blockend_60
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_61: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_61
    jmp proc_assemblerarm_updatestack
.blockend_61: ; call
    push str_847
.blockstart_62: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_62
    jmp proc_writer_write
.blockend_62: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_63: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_63
    jmp proc_int_cstr
.blockend_63: ; call
.blockstart_64: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_64
    jmp proc_writer_write
.blockend_64: ; call
    push str_848
.blockstart_65: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_65
    jmp proc_writer_write
.blockend_65: ; call
    push str_849
.blockstart_66: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_66
    jmp proc_writer_write
.blockend_66: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_67: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_67
    jmp proc_int_cstr
.blockend_67: ; call
.blockstart_68: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_68
    jmp proc_writer_write
.blockend_68: ; call
    push str_850
.blockstart_69: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_69
    jmp proc_writer_write
.blockend_69: ; call
.blockend_60: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_70: ; if
    jz .blockend_70
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 49
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    push qword 1
.blockstart_71: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_71
    jmp proc_assemblerarm_updatestack
.blockend_71: ; call
    push str_851
.blockstart_72: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_72
    jmp proc_writer_write
.blockend_72: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_73: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_73
    jmp proc_int_cstr
.blockend_73: ; call
.blockstart_74: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_74
    jmp proc_writer_write
.blockend_74: ; call
    push str_852
.blockstart_75: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_75
    jmp proc_writer_write
.blockend_75: ; call
    push str_853
.blockstart_76: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_76
    jmp proc_writer_write
.blockend_76: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_77: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_77
    jmp proc_int_cstr
.blockend_77: ; call
.blockstart_78: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_78
    jmp proc_writer_write
.blockend_78: ; call
    push str_854
.blockstart_79: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_79
    jmp proc_writer_write
.blockend_79: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 3
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
.blockstart_80: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_80
    jmp proc_constdata_new
.blockend_80: ; call
.blockstart_81: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_81
    jmp proc_slmnode_new
.blockend_81: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_82: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_82
    jmp proc_assemblerarm_visitword
.blockend_82: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_83: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_83
    jmp proc_slmnode_free
.blockend_83: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_70: ; if
    pop rax
    push rax
    push rax
    push qword 5
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_84: ; if
    jz .blockend_84
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 1
    push qword 0
.blockstart_85: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_85
    jmp proc_assemblerarm_updatestack
.blockend_85: ; call
    push str_855
.blockstart_86: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_86
    jmp proc_writer_write
.blockend_86: ; call
    push str_856
.blockstart_87: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_87
    jmp proc_writer_write
.blockend_87: ; call
    push str_857
.blockstart_88: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_88
    jmp proc_writer_write
.blockend_88: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_89: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_89
    jmp proc_int_cstr
.blockend_89: ; call
.blockstart_90: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_90
    jmp proc_writer_write
.blockend_90: ; call
    push str_858
.blockstart_91: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_91
    jmp proc_writer_write
.blockend_91: ; call
    push str_859
.blockstart_92: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_92
    jmp proc_writer_write
.blockend_92: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 24
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_93: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_93
    jmp proc_int_cstr
.blockend_93: ; call
.blockstart_94: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_94
    jmp proc_writer_write
.blockend_94: ; call
    push str_860
.blockstart_95: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_95
    jmp proc_writer_write
.blockend_95: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 33
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 16
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 255
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmovne rcx, rdx
    push rcx
    pop rax
    pop rbx
    and rax, rbx
    push rax
    pop rbx
    test rbx, rbx
.blockstart_96: ; if
    jz .blockend_96
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 5
    push str_861
.blockstart_97: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_97
    jmp proc_error_new
.blockend_97: ; call
.blockstart_98: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_98
    jmp proc_error_eval
.blockend_98: ; call
.blockend_96: ; if
.blockend_84: ; if
    pop rax
    push rax
    push rax
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_99: ; if
    jz .blockend_99
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    xor rax, 1
    push rax
    pop rbx
    test rbx, rbx
.blockstart_100: ; if
    jz .blockend_100
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 40
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 5
    push str_862
.blockstart_101: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_101
    jmp proc_error_new
.blockend_101: ; call
.blockstart_102: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_102
    jmp proc_error_eval
.blockend_102: ; call
.blockend_100: ; if
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 24
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 48
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockend_99: ; if
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 144
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 32
    push rax
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 16
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 33
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_assemblerarm_visitnode:
    pop rax
    push rax
    push rax
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    push qword 0
    pop rax
    pop rbx
    add rax, rbx
    mov rbx, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    add rsp, 8
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_assemblerarm_visitinc
.blockend_1: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 5
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_2: ; if
    jz .blockend_2
    add rsp, 8
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_2: ; if
    pop rax
    push rax
    push rax
    push qword 11
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_3: ; if
    jz .blockend_3
    add rsp, 8
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_assemblerarm_visitfile
.blockend_4: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_3: ; if
    pop rax
    push rax
    push rax
    push qword 12
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_5: ; if
    jz .blockend_5
    add rsp, 8
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_assemblerarm_visitblock
.blockend_6: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_5: ; if
    pop rax
    push rax
    push rax
    push qword 10
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    add rsp, 8
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_assemblerarm_visitconst
.blockend_8: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_7: ; if
    pop rax
    push rax
    push rax
    push qword 8
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_9: ; if
    jz .blockend_9
    add rsp, 8
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_assemblerarm_visitdef
.blockend_10: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_9: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_11: ; if
    jz .blockend_11
    add rsp, 8
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_assemblerarm_visitasm
.blockend_12: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_11: ; if
    pop rax
    push rax
    push rax
    push qword 6
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_13: ; if
    jz .blockend_13
    add rsp, 8
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_assemblerarm_visitintr
.blockend_14: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_13: ; if
    pop rax
    push rax
    push rax
    push qword 9
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_15: ; if
    jz .blockend_15
    add rsp, 8
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_assemblerarm_visitprop
.blockend_16: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_15: ; if
    pop rax
    push rax
    push rax
    push qword 7
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_17: ; if
    jz .blockend_17
    add rsp, 8
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_assemblerarm_visitvar
.blockend_18: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_17: ; if
    pop rax
    push rax
    push rax
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_19: ; if
    jz .blockend_19
    add rsp, 8
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_assemblerarm_visitcall
.blockend_20: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_19: ; if
    pop rax
    push rax
    push rax
    push qword 4
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_21: ; if
    jz .blockend_21
    add rsp, 8
.blockstart_22: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_22
    jmp proc_assemblerarm_visitof
.blockend_22: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_21: ; if
    add rsp, 8
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_VERSION:
    push str_863
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_help:
    pop rax
    push rax
    push rax
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push str_864
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_cstr_print
.blockend_1: ; call
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_VERSION
.blockend_2: ; call
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_println
.blockend_3: ; call
    add rsp, 8
    push qword 0
    mov rax, 60
    pop rdi
    syscall
.blockend_0: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    push str_865
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_cstr_println
.blockend_5: ; call
.blockend_4: ; if
    pop rax
    push rax
    push rax
    push qword 3
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_6: ; if
    jz .blockend_6
    push str_866
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_cstr_println
.blockend_7: ; call
.blockend_6: ; if
    add rsp, 8
    push str_867
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_cstr_print
.blockend_8: ; call
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_VERSION
.blockend_9: ; call
.blockstart_10: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_10
    jmp proc_cstr_print
.blockend_10: ; call
    push str_868
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_cstr_println
.blockend_11: ; call
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_cstr_cr
.blockend_12: ; call
    push str_869
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_cstr_println
.blockend_13: ; call
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_cstr_cr
.blockend_14: ; call
    push str_870
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_cstr_println
.blockend_15: ; call
    push str_871
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_cstr_println
.blockend_16: ; call
    push str_872
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_cstr_println
.blockend_17: ; call
    push str_873
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_cstr_println
.blockend_18: ; call
    push str_874
.blockstart_19: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_19
    jmp proc_cstr_println
.blockend_19: ; call
    push qword 1
    mov rax, 60
    pop rdi
    syscall
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_setinput:
    push mem+210; input
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_cpy
.blockend_0: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_setoutput:
    pop rax
    push rax
    push rax
    mov rax, [args_ptr]
    mov rax, [rax]
    push rax
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovg rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push qword 3
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_help
.blockend_1: ; call
    push qword 0
    mov rax, 60
    pop rdi
    syscall
.blockend_0: ; if
    pop rax
    push rax
    push rax
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_os_args
.blockend_2: ; call
    push mem+82; output
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_cpy
.blockend_3: ; call
    add rsp, 8
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_setmode:
    push mem+338; mode
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov byte [rax], bl
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_applyarg:
    pop rax
    push rax
    push rax
    push str_875
.blockstart_0: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_0
    jmp proc_cstr_eq
.blockend_0: ; call
    pop rbx
    test rbx, rbx
.blockstart_1: ; if
    jz .blockend_1
    add rsp, 8
    push qword 1
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_help
.blockend_2: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_1: ; if
    pop rax
    push rax
    push rax
    push str_876
.blockstart_3: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_3
    jmp proc_cstr_eq
.blockend_3: ; call
    pop rbx
    test rbx, rbx
.blockstart_4: ; if
    jz .blockend_4
    add rsp, 8
    push qword 0
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_help
.blockend_5: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_4: ; if
    pop rax
    push rax
    push rax
    push str_877
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_cstr_eq
.blockend_6: ; call
    pop rbx
    test rbx, rbx
.blockstart_7: ; if
    jz .blockend_7
    add rsp, 8
    push qword 0
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_help
.blockend_8: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_7: ; if
    pop rax
    push rax
    push rax
    push str_878
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_cstr_eq
.blockend_9: ; call
    pop rbx
    test rbx, rbx
.blockstart_10: ; if
    jz .blockend_10
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_setoutput
.blockend_11: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_10: ; if
    pop rax
    push rax
    push rax
    push str_879
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_cstr_eq
.blockend_12: ; call
    pop rbx
    test rbx, rbx
.blockstart_13: ; if
    jz .blockend_13
    add rsp, 8
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_setoutput
.blockend_14: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_13: ; if
    pop rax
    push rax
    push rax
    push str_880
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_cstr_eq
.blockend_15: ; call
    pop rbx
    test rbx, rbx
.blockstart_16: ; if
    jz .blockend_16
    add rsp, 8
    push qword 2
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_setmode
.blockend_17: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_16: ; if
    pop rax
    push rax
    push rax
    push str_881
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_cstr_eq
.blockend_18: ; call
    pop rbx
    test rbx, rbx
.blockstart_19: ; if
    jz .blockend_19
    add rsp, 8
    push qword 2
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_setmode
.blockend_20: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_19: ; if
    pop rax
    push rax
    push rax
    push str_882
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_cstr_eq
.blockend_21: ; call
    pop rbx
    test rbx, rbx
.blockstart_22: ; if
    jz .blockend_22
    add rsp, 8
    push qword 1
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_setmode
.blockend_23: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
.blockend_22: ; if
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_setinput
.blockend_24: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax - 8]
    mov [loc_stack_rsp], rax
    mov rax, [ret_stack_rsp]
    sub rax, 16
    mov qword [ret_stack_rsp], rax
    add rax, 16
    jmp qword [rax]
proc_main:
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    mov rax, [loc_stack_rsp]
    add rax, 8
    mov [loc_stack_rsp], rax
    push qword 1
    mov rax, [args_ptr]
    mov rax, [rax]
    push rax
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_0: ; if
    jz .blockend_0
    push qword 2
.blockstart_1: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_1
    jmp proc_help
.blockend_1: ; call
.blockend_0: ; if
    push mem+82; output
    push str_883
.blockstart_2: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_2
    jmp proc_cstr_cpy
.blockend_2: ; call
    add rsp, 8
    add rsp, 8
    push qword 0
.blockstart_3: ; do
    push qword 1
    pop rax
    pop rbx
    add rax, rbx
    push rax
    pop rax
    push rax
    push rax
.blockstart_4: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_4
    jmp proc_os_args
.blockend_4: ; call
.blockstart_5: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_5
    jmp proc_applyarg
.blockend_5: ; call
    pop rax
    push rax
    push rax
    mov rax, [args_ptr]
    mov rax, [rax]
    push rax
    push qword 1
    pop rbx
    pop rax
    sub rax, rbx
    push rax
    xor rcx, rcx
    mov rdx, 1
    pop rbx
    pop rax
    cmp rax, rbx
    cmovl rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
    jnz .blockstart_3
.blockend_3: ; do
    add rsp, 8
    push mem+210; input
    push qword 0
.blockstart_6: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_6
    jmp proc_lexer_new
.blockend_6: ; call
.blockstart_7: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_7
    jmp proc_lexer_run
.blockend_7: ; call
.blockstart_8: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_8
    jmp proc_parser_new
.blockend_8: ; call
.blockstart_9: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_9
    jmp proc_parser_run
.blockend_9: ; call
    pop rax
    push rax
    push rax
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 0
    push rax
    pop rax
    pop rbx
    push rax
    push rbx
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push mem+338; mode
    pop rax
    xor rbx, rbx
    mov bl, [rax]
    push rbx
    pop rax
    push rax
    push rax
    push qword 0
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_10: ; if
    jz .blockend_10
    add rsp, 8
    push mem+73; writer_current
    push str_884
.blockstart_11: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_11
    jmp proc_writer_new
.blockend_11: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
.blockstart_12: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_12
    jmp proc_writer_writeheader
.blockend_12: ; call
.blockstart_13: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_13
    jmp proc_assembler_new
.blockend_13: ; call
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_14: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_14
    jmp proc_assembler_visitnode
.blockend_14: ; call
.blockstart_15: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_15
    jmp proc_writer_writefooter
.blockend_15: ; call
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    push qword 256
.blockstart_16: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_16
    jmp proc_heap_zalloc
.blockend_16: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_885
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push str_886
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push str_887
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push str_888
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push str_889
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push str_890
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push str_891
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_17: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_17
    jmp proc_os_execcmdecho
.blockend_17: ; call
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
    push str_892
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push str_893
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push str_894
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push str_895
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push mem+82; output
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push str_896
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push str_897
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push str_898
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    push qword 8
    pop rax
    pop rbx
    add rax, rbx
    push rax
    push qword 0
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    mov rax, [ret_stack_rsp]
    mov rax, [rax-8]
    add rax, 8
    push rax
    pop rax
    mov rbx, [rax]
    push rbx
.blockstart_18: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_18
    jmp proc_os_execcmdecho
.blockend_18: ; call
    add rsp, 8
    push qword 0
    mov rax, 60
    pop rdi
    syscall
.blockend_10: ; if
    pop rax
    push rax
    push rax
    push qword 2
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_19: ; if
    jz .blockend_19
    add rsp, 8
.blockstart_20: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_20
    jmp proc_simulator_new
.blockend_20: ; call
.blockstart_21: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_21
    jmp proc_simulator_run
.blockend_21: ; call
    push qword 0
    mov rax, 60
    pop rdi
    syscall
.blockend_19: ; if
    pop rax
    push rax
    push rax
    push qword 1
    xor rcx, rcx
    mov rdx, 1
    pop rax
    pop rbx
    cmp rax, rbx
    cmove rcx, rdx
    push rcx
    pop rbx
    test rbx, rbx
.blockstart_22: ; if
    jz .blockend_22
    add rsp, 8
    push mem+73; writer_current
    push str_899
.blockstart_23: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_23
    jmp proc_writer_new
.blockend_23: ; call
    pop rbx
    pop rax
    mov qword [rax], rbx
    push rax
    add rsp, 8
    push str_900
.blockstart_24: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_24
    jmp proc_writer_write
.blockend_24: ; call
.blockstart_25: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_25
    jmp proc_assemblerarm_new
.blockend_25: ; call
    pop rax
    pop rbx
    push rax
    push rbx
.blockstart_26: ; call
    mov rax, [ret_stack_rsp]
    add rax, 16
    mov rbx, [loc_stack_rsp]
    mov qword [rax - 8], rbx
    mov qword [ret_stack_rsp], rax
    mov qword [rax], .blockend_26
    jmp proc_assemblerarm_visitnode
.blockend_26: ; call
    push qword 0
    mov rax, 60
    pop rdi
    syscall
.blockend_22: ; if
    push qword 1
    mov rax, 60
    pop rdi
    syscall
    jmp quit
_start:
    mov qword [args_ptr], rsp
    mov qword [ret_stack_rsp], ret_stack
    mov qword [loc_stack_rsp], loc_stack
    mov rax, [ret_stack_rsp] 
    mov qword [rax], quit
    jmp proc_main
quit:
    mov rax, 60
    mov rdi, 0
    syscall
section '.data'
    str_0: db 10, 0
    str_1: db 47, 100, 101, 118, 47, 110, 117, 108, 108, 0
    str_2: db 69, 82, 82, 79, 82, 58, 32, 99, 97, 110, 116, 32, 111, 112, 101, 110, 32, 47, 100, 101, 118, 47, 110, 117, 108, 108, 0
    str_3: db 69, 82, 82, 79, 82, 58, 32, 99, 97, 110, 116, 32, 111, 112, 101, 110, 32, 47, 100, 101, 118, 47, 110, 117, 108, 108, 0
    str_4: db 69, 82, 82, 79, 82, 58, 32, 99, 97, 110, 116, 32, 111, 112, 101, 110, 32, 47, 100, 101, 118, 47, 110, 117, 108, 108, 0
    str_5: db 69, 82, 82, 79, 82, 58, 32, 99, 97, 110, 116, 32, 111, 112, 101, 110, 32, 47, 100, 101, 118, 47, 110, 117, 108, 108, 0
    str_6: db 69, 82, 82, 79, 82, 0
    str_7: db 91, 67, 77, 68, 93, 32, 82, 117, 110, 58, 32, 0
    str_8: db 32, 0
    str_9: db 91, 67, 77, 68, 93, 32, 82, 117, 110, 58, 32, 0
    str_10: db 32, 0
    str_11: db 69, 114, 114, 111, 114, 32, 119, 114, 105, 116, 105, 110, 103, 32, 102, 105, 108, 101, 0
    str_12: db 69, 114, 114, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 32, 102, 105, 108, 101, 0
    str_13: db 69, 114, 114, 111, 114, 32, 99, 108, 111, 115, 105, 110, 103, 32, 102, 105, 108, 101, 0
    str_14: db 80, 87, 68, 0
    str_15: db 69, 114, 114, 111, 114, 32, 97, 108, 108, 111, 99, 97, 116, 105, 110, 103, 32, 104, 101, 97, 112, 32, 112, 97, 103, 101, 0
    str_16: db 98, 97, 100, 32, 114, 101, 97, 108, 108, 111, 99, 0
    str_17: db 60, 0
    str_18: db 58, 0
    str_19: db 64, 0
    str_20: db 62, 0
    str_21: db 63, 0
    str_22: db 78, 85, 76, 76, 0
    str_23: db 73, 78, 67, 0
    str_24: db 73, 70, 0
    str_25: db 68, 79, 0
    str_26: db 80, 82, 79, 67, 0
    str_27: db 67, 76, 65, 83, 83, 0
    str_28: db 86, 65, 82, 0
    str_29: db 80, 82, 79, 80, 0
    str_30: db 82, 69, 84, 0
    str_31: db 66, 82, 75, 0
    str_32: db 69, 78, 85, 77, 0
    str_33: db 79, 80, 69, 82, 0
    str_34: db 80, 85, 83, 72, 0
    str_35: db 85, 78, 83, 65, 70, 69, 0
    str_36: db 72, 69, 65, 68, 0
    str_37: db 79, 70, 0
    str_38: db 81, 85, 73, 84, 0
    str_39: db 83, 73, 77, 0
    str_40: db 65, 83, 77, 0
    str_41: db 83, 87, 73, 84, 67, 72, 0
    str_42: db 67, 65, 83, 69, 0
    str_43: db 69, 76, 83, 69, 0
    str_44: db 76, 65, 77, 66, 68, 65, 0
    str_45: db 78, 65, 77, 69, 68, 0
    str_46: db 82, 69, 65, 68, 0
    str_47: db 82, 69, 65, 68, 67, 0
    str_48: db 80, 85, 84, 0
    str_49: db 80, 85, 84, 67, 0
    str_50: db 83, 87, 65, 80, 0
    str_51: db 67, 79, 80, 89, 0
    str_52: db 67, 79, 86, 82, 0
    str_53: db 68, 73, 83, 67, 0
    str_54: db 65, 68, 68, 0
    str_55: db 83, 85, 66, 0
    str_56: db 77, 85, 76, 0
    str_57: db 68, 73, 86, 77, 79, 68, 0
    str_58: db 67, 79, 78, 83, 84, 0
    str_59: db 65, 67, 67, 69, 83, 83, 0
    str_60: db 82, 69, 70, 65, 67, 67, 69, 83, 83, 0
    str_61: db 65, 78, 68, 0
    str_62: db 79, 82, 0
    str_63: db 73, 78, 86, 0
    str_64: db 78, 79, 84, 0
    str_65: db 69, 81, 0
    str_66: db 78, 69, 81, 0
    str_67: db 76, 84, 0
    str_68: db 71, 84, 0
    str_69: db 69, 78, 68, 0
    str_70: db 78, 85, 77, 66, 69, 82, 0
    str_71: db 83, 84, 82, 73, 78, 71, 0
    str_72: db 83, 83, 84, 82, 73, 78, 71, 0
    str_73: db 87, 79, 82, 68, 0
    str_74: db 80, 65, 82, 69, 78, 0
    str_75: db 67, 79, 77, 77, 69, 78, 84, 0
    str_76: db 69, 78, 86, 80, 0
    str_77: db 65, 82, 71, 67, 0
    str_78: db 65, 82, 71, 86, 0
    str_79: db 83, 89, 83, 48, 0
    str_80: db 83, 89, 83, 49, 0
    str_81: db 83, 89, 83, 50, 0
    str_82: db 83, 89, 83, 51, 0
    str_83: db 83, 89, 83, 52, 0
    str_84: db 83, 89, 83, 53, 0
    str_85: db 83, 89, 83, 54, 0
    str_86: db 40, 0
    str_87: db 58, 0
    str_88: db 32, 0
    str_89: db 45, 0
    str_90: db 41, 0
    str_91: db 91, 76, 69, 88, 93, 32, 0
    str_92: db 46, 47, 0
    str_93: db 72, 79, 77, 69, 0
    str_94: db 47, 46, 108, 111, 99, 97, 108, 47, 115, 108, 97, 109, 47, 108, 105, 98, 47, 0
    str_95: db 46, 47, 0
    str_96: db 80, 87, 68, 0
    str_97: db 108, 97, 109, 98, 100, 97, 0
    str_98: db 115, 119, 105, 116, 99, 104, 0
    str_99: db 117, 110, 115, 97, 102, 101, 0
    str_100: db 99, 111, 110, 115, 116, 0
    str_101: db 99, 108, 97, 115, 115, 0
    str_102: db 114, 101, 97, 100, 99, 0
    str_103: db 112, 114, 111, 99, 0
    str_104: db 101, 110, 117, 109, 0
    str_105: db 99, 111, 112, 121, 0
    str_106: db 115, 119, 97, 112, 0
    str_107: db 114, 101, 97, 100, 0
    str_108: db 112, 117, 116, 99, 0
    str_109: db 100, 105, 115, 99, 0
    str_110: db 99, 111, 118, 114, 0
    str_111: db 112, 114, 111, 112, 0
    str_112: db 113, 117, 105, 116, 0
    str_113: db 104, 101, 97, 100, 0
    str_114: db 112, 117, 115, 104, 0
    str_115: db 111, 112, 101, 114, 0
    str_116: db 97, 114, 103, 99, 0
    str_117: db 97, 114, 103, 118, 0
    str_118: db 101, 110, 118, 112, 0
    str_119: db 115, 121, 115, 48, 0
    str_120: db 115, 121, 115, 49, 0
    str_121: db 115, 121, 115, 50, 0
    str_122: db 115, 121, 115, 51, 0
    str_123: db 115, 121, 115, 52, 0
    str_124: db 115, 121, 115, 53, 0
    str_125: db 115, 121, 115, 54, 0
    str_126: db 101, 110, 100, 0
    str_127: db 112, 117, 116, 0
    str_128: db 118, 97, 114, 0
    str_129: db 115, 105, 109, 0
    str_130: db 101, 108, 115, 0
    str_131: db 99, 97, 115, 0
    str_132: db 97, 115, 109, 0
    str_133: db 105, 110, 99, 0
    str_134: db 114, 101, 116, 0
    str_135: db 98, 114, 107, 0
    str_136: db 105, 102, 0
    str_137: db 100, 111, 0
    str_138: db 111, 102, 0
    str_139: db 47, 37, 0
    str_140: db 61, 61, 0
    str_141: db 33, 61, 0
    str_142: db 38, 38, 0
    str_143: db 124, 124, 0
    str_144: db 33, 0
    str_145: db 62, 0
    str_146: db 60, 0
    str_147: db 58, 0
    str_148: db 46, 0
    str_149: db 64, 0
    str_150: db 43, 0
    str_151: db 45, 0
    str_152: db 42, 0
    str_153: db 126, 0
    str_154: db 0, 0
    str_155: db 73, 108, 108, 101, 103, 97, 108, 32, 67, 104, 97, 114, 97, 99, 116, 101, 114, 32, 69, 114, 114, 111, 114, 0
    str_156: db 83, 121, 110, 116, 97, 120, 32, 69, 114, 114, 111, 114, 0
    str_157: db 85, 110, 100, 101, 114, 102, 108, 111, 119, 32, 69, 114, 114, 111, 114, 0
    str_158: db 78, 111, 116, 32, 73, 109, 112, 108, 101, 108, 101, 109, 116, 101, 100, 32, 69, 114, 114, 111, 114, 0
    str_159: db 78, 111, 116, 32, 68, 101, 102, 105, 110, 101, 100, 32, 69, 114, 114, 111, 114, 0
    str_160: db 66, 97, 100, 32, 66, 108, 111, 99, 107, 32, 69, 114, 114, 111, 114, 0
    str_161: db 58, 32, 0
    str_162: db 76, 111, 99, 97, 116, 105, 111, 110, 32, 0
    str_163: db 45, 0
    str_164: db 60, 67, 65, 76, 76, 58, 32, 34, 0
    str_165: db 34, 62, 0
    str_166: db 60, 65, 83, 77, 58, 32, 34, 0
    str_167: db 34, 62, 0
    str_168: db 60, 73, 78, 67, 58, 32, 34, 0
    str_169: db 34, 62, 0
    str_170: db 60, 79, 70, 58, 32, 34, 0
    str_171: db 34, 62, 0
    str_172: db 60, 67, 79, 77, 77, 69, 78, 84, 62, 0
    str_173: db 60, 73, 78, 84, 82, 58, 32, 0
    str_174: db 62, 0
    str_175: db 60, 86, 65, 82, 58, 32, 34, 0
    str_176: db 34, 44, 32, 115, 105, 122, 101, 0
    str_177: db 62, 0
    str_178: db 60, 68, 69, 70, 58, 32, 34, 0
    str_179: db 34, 44, 32, 118, 97, 108, 117, 101, 58, 0
    str_180: db 62, 0
    str_181: db 60, 80, 82, 79, 80, 58, 32, 34, 0
    str_182: db 34, 44, 32, 115, 105, 122, 101, 58, 0
    str_183: db 62, 0
    str_184: db 60, 67, 79, 78, 83, 84, 58, 32, 34, 0
    str_185: db 34, 44, 32, 107, 105, 110, 100, 58, 0
    str_186: db 62, 0
    str_187: db 60, 70, 73, 76, 69, 58, 32, 0
    str_188: db 62, 0
    str_189: db 60, 66, 76, 79, 67, 75, 58, 32, 0
    str_190: db 62, 0
    str_191: db 32, 45, 32, 0
    str_192: db 62, 0
    str_193: db 91, 80, 82, 83, 93, 32, 0
    str_194: db 32, 116, 111, 107, 101, 110, 115, 0
    str_195: db 84, 79, 68, 79, 32, 112, 97, 114, 115, 101, 114, 46, 114, 117, 110, 105, 110, 115, 105, 100, 101, 0
    str_196: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 102, 105, 108, 101, 32, 102, 111, 114, 32, 105, 110, 99, 108, 117, 100, 101, 0
    str_197: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 115, 116, 114, 105, 110, 103, 32, 102, 111, 114, 32, 97, 115, 115, 101, 109, 98, 108, 121, 0
    str_198: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 99, 108, 97, 115, 115, 32, 110, 97, 109, 101, 32, 102, 111, 114, 32, 111, 102, 0
    str_199: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 110, 97, 109, 101, 32, 102, 111, 114, 32, 112, 114, 111, 112, 0
    str_200: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 112, 114, 111, 112, 0
    str_201: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 119, 111, 114, 100, 32, 102, 111, 114, 32, 99, 111, 110, 115, 116, 0
    str_202: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 111, 110, 115, 116, 0
    str_203: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 110, 97, 109, 101, 32, 102, 111, 114, 32, 118, 97, 114, 0
    str_204: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 118, 97, 114, 0
    str_205: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 101, 110, 100, 32, 102, 111, 114, 32, 105, 102, 0
    str_206: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 101, 110, 100, 32, 102, 111, 114, 32, 115, 105, 109, 0
    str_207: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 101, 110, 100, 32, 102, 111, 114, 32, 100, 111, 0
    str_208: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 110, 97, 109, 101, 32, 102, 111, 114, 32, 112, 114, 111, 99, 0
    str_209: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 105, 110, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 112, 114, 111, 99, 0
    str_210: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 111, 117, 116, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 112, 114, 111, 99, 0
    str_211: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 101, 110, 100, 32, 102, 111, 114, 32, 110, 111, 110, 32, 104, 101, 97, 100, 32, 112, 114, 111, 99, 0
    str_212: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 105, 110, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 108, 97, 109, 98, 100, 97, 0
    str_213: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 111, 117, 116, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 108, 97, 109, 98, 100, 97, 0
    str_214: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 101, 110, 100, 32, 102, 111, 114, 32, 108, 97, 109, 98, 100, 97, 0
    str_215: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 101, 110, 100, 32, 102, 111, 114, 32, 112, 114, 111, 99, 32, 108, 97, 109, 98, 100, 97, 0
    str_216: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 101, 110, 100, 32, 102, 111, 114, 32, 101, 110, 117, 109, 0
    str_217: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 110, 97, 109, 101, 32, 102, 111, 114, 32, 99, 108, 97, 115, 115, 0
    str_218: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 101, 110, 100, 32, 102, 111, 114, 32, 99, 108, 97, 115, 115, 0
    str_219: db 102, 111, 114, 109, 97, 116, 32, 69, 76, 70, 54, 52, 10, 0
    str_220: db 115, 101, 99, 116, 105, 111, 110, 32, 39, 46, 116, 101, 120, 116, 39, 32, 101, 120, 101, 99, 117, 116, 97, 98, 108, 101, 10, 0
    str_221: db 112, 117, 98, 108, 105, 99, 32, 95, 115, 116, 97, 114, 116, 10, 0
    str_222: db 32, 32, 32, 32, 106, 109, 112, 32, 113, 117, 105, 116, 10, 0
    str_223: db 95, 115, 116, 97, 114, 116, 58, 10, 0
    str_224: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 97, 114, 103, 115, 95, 112, 116, 114, 93, 44, 32, 114, 115, 112, 10, 0
    str_225: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 44, 32, 114, 101, 116, 95, 115, 116, 97, 99, 107, 10, 0
    str_226: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 44, 32, 108, 111, 99, 95, 115, 116, 97, 99, 107, 10, 0
    str_227: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 32, 10, 0
    str_228: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 114, 97, 120, 93, 44, 32, 113, 117, 105, 116, 10, 0
    str_229: db 32, 32, 32, 32, 106, 109, 112, 32, 112, 114, 111, 99, 95, 109, 97, 105, 110, 10, 0
    str_230: db 113, 117, 105, 116, 58, 10, 0
    str_231: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 54, 48, 10, 0
    str_232: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 100, 105, 44, 32, 48, 10, 0
    str_233: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_234: db 115, 101, 99, 116, 105, 111, 110, 32, 39, 46, 100, 97, 116, 97, 39, 10, 0
    str_235: db 115, 101, 99, 116, 105, 111, 110, 32, 39, 46, 98, 115, 115, 39, 10, 0
    str_236: db 32, 32, 32, 32, 97, 114, 103, 115, 95, 112, 116, 114, 58, 32, 114, 113, 32, 49, 10, 0
    str_237: db 32, 32, 32, 32, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 58, 32, 114, 113, 32, 49, 10, 0
    str_238: db 32, 32, 32, 32, 114, 101, 116, 95, 115, 116, 97, 99, 107, 58, 32, 114, 113, 32, 49, 48, 50, 52, 10, 0
    str_239: db 32, 32, 32, 32, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 58, 32, 114, 113, 32, 49, 10, 0
    str_240: db 32, 32, 32, 32, 108, 111, 99, 95, 115, 116, 97, 99, 107, 58, 32, 114, 113, 32, 53, 49, 50, 10, 0
    str_241: db 32, 32, 32, 32, 109, 101, 109, 58, 32, 114, 98, 32, 0
    str_242: db 44, 32, 0
    str_243: db 32, 32, 32, 32, 115, 116, 114, 95, 0
    str_244: db 58, 32, 100, 98, 32, 0
    str_245: db 48, 10, 0
    str_246: db 32, 0
    str_247: db 109, 97, 105, 110, 0
    str_248: db 110, 111, 32, 109, 97, 105, 110, 32, 112, 114, 111, 99, 0
    str_249: db 67, 97, 110, 110, 111, 116, 32, 109, 97, 112, 32, 109, 101, 109, 111, 114, 121, 0
    str_250: db 91, 82, 85, 78, 93, 0
    str_251: db 73, 110, 116, 114, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 0
    str_252: db 99, 97, 108, 108, 0
    str_253: db 101, 99, 104, 111, 0
    str_254: db 67, 111, 110, 115, 116, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 0
    str_255: db 78, 111, 100, 101, 32, 107, 105, 110, 100, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 0
    str_256: db 115, 108, 97, 115, 104, 0
    str_257: db 112, 101, 114, 99, 0
    str_258: db 95, 0
    str_259: db 67, 111, 110, 115, 116, 32, 39, 0
    str_260: db 39, 32, 105, 115, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 46, 0
    str_261: db 83, 116, 97, 99, 107, 32, 85, 110, 100, 101, 114, 102, 108, 111, 119, 0
    str_262: db 112, 114, 111, 99, 95, 0
    str_263: db 58, 10, 32, 32, 32, 32, 106, 109, 112, 32, 112, 114, 111, 99, 95, 0
    str_264: db 10, 0
    str_265: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 112, 114, 111, 99, 95, 0
    str_266: db 10, 0
    str_267: db 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_268: db 58, 32, 59, 32, 99, 97, 108, 108, 10, 0
    str_269: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_270: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 97, 120, 44, 32, 49, 54, 10, 0
    str_271: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 98, 120, 44, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_272: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 114, 97, 120, 32, 45, 32, 56, 93, 44, 32, 114, 98, 120, 10, 0
    str_273: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 44, 32, 114, 97, 120, 10, 0
    str_274: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 114, 97, 120, 93, 44, 32, 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_275: db 10, 0
    str_276: db 32, 32, 32, 32, 106, 109, 112, 32, 112, 114, 111, 99, 95, 0
    str_277: db 10, 0
    str_278: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_279: db 58, 32, 59, 32, 99, 97, 108, 108, 10, 0
    str_280: db 112, 114, 111, 99, 95, 0
    str_281: db 95, 0
    str_282: db 59, 32, 104, 101, 97, 100, 0
    str_283: db 58, 10, 0
    str_284: db 95, 0
    str_285: db 73, 110, 104, 101, 114, 105, 116, 97, 110, 99, 101, 32, 105, 115, 32, 117, 110, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 97, 115, 32, 111, 102, 32, 110, 111, 119, 0
    str_286: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 113, 119, 111, 114, 100, 32, 0
    str_287: db 10, 0
    str_288: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 109, 101, 109, 43, 0
    str_289: db 59, 32, 0
    str_290: db 10, 0
    str_291: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_292: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 114, 97, 120, 45, 56, 93, 10, 0
    str_293: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 97, 120, 44, 32, 0
    str_294: db 10, 0
    str_295: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_296: db 87, 111, 114, 100, 32, 39, 0
    str_297: db 39, 105, 115, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 0
    str_298: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 113, 119, 111, 114, 100, 32, 0
    str_299: db 10, 0
    str_300: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 115, 116, 114, 95, 0
    str_301: db 10, 0
    str_302: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 113, 119, 111, 114, 100, 32, 0
    str_303: db 10, 0
    str_304: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 115, 116, 114, 95, 0
    str_305: db 10, 0
    str_306: db 85, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 97, 115, 115, 101, 109, 98, 108, 101, 114, 46, 118, 105, 115, 105, 116, 119, 111, 114, 100, 0
    str_307: db 85, 110, 114, 101, 97, 99, 97, 98, 108, 101, 32, 97, 115, 115, 101, 109, 98, 108, 101, 114, 46, 118, 105, 115, 105, 116, 100, 101, 102, 0
    str_308: db 85, 110, 114, 101, 97, 99, 97, 98, 108, 101, 32, 97, 115, 115, 101, 109, 98, 108, 101, 114, 46, 118, 105, 115, 105, 116, 112, 114, 111, 112, 0
    str_309: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_310: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 97, 120, 44, 32, 0
    str_311: db 10, 0
    str_312: db 32, 32, 32, 32, 109, 111, 118, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 44, 32, 114, 97, 120, 10, 0
    str_313: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_314: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 97, 120, 44, 32, 0
    str_315: db 10, 0
    str_316: db 32, 32, 32, 32, 109, 111, 118, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 44, 32, 114, 97, 120, 10, 0
    str_317: db 85, 110, 114, 101, 97, 99, 97, 98, 108, 101, 32, 97, 115, 115, 101, 109, 98, 108, 101, 114, 46, 118, 105, 115, 105, 116, 118, 97, 114, 32, 108, 111, 99, 97, 108, 0
    str_318: db 85, 110, 114, 101, 97, 99, 97, 98, 108, 101, 32, 97, 115, 115, 101, 109, 98, 108, 101, 114, 46, 118, 105, 115, 105, 116, 118, 97, 114, 32, 103, 108, 111, 98, 97, 108, 0
    str_319: db 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_320: db 58, 32, 59, 32, 99, 97, 108, 108, 10, 0
    str_321: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 99, 120, 10, 0
    str_322: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_323: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 97, 120, 44, 32, 49, 54, 10, 0
    str_324: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 98, 120, 44, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_325: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 114, 97, 120, 32, 45, 32, 56, 93, 44, 32, 114, 98, 120, 10, 0
    str_326: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 44, 32, 114, 97, 120, 10, 0
    str_327: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 114, 97, 120, 93, 44, 32, 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_328: db 10, 0
    str_329: db 32, 32, 32, 32, 106, 109, 112, 32, 113, 119, 111, 114, 100, 32, 114, 99, 120, 10, 0
    str_330: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_331: db 58, 32, 59, 32, 99, 97, 108, 108, 10, 0
    str_332: db 112, 114, 111, 99, 32, 39, 0
    str_333: db 39, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 0
    str_334: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 112, 114, 111, 99, 95, 0
    str_335: db 10, 0
    str_336: db 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_337: db 58, 32, 59, 32, 99, 97, 108, 108, 10, 0
    str_338: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_339: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 97, 120, 44, 32, 49, 54, 10, 0
    str_340: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 98, 120, 44, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_341: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 114, 97, 120, 32, 45, 32, 56, 93, 44, 32, 114, 98, 120, 10, 0
    str_342: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 44, 32, 91, 114, 97, 120, 93, 10, 0
    str_343: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 114, 97, 120, 93, 44, 32, 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_344: db 10, 0
    str_345: db 32, 32, 32, 32, 106, 109, 112, 32, 112, 114, 111, 99, 95, 0
    str_346: db 10, 0
    str_347: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_348: db 58, 32, 59, 32, 99, 97, 108, 108, 10, 0
    str_349: db 80, 114, 111, 99, 32, 100, 111, 115, 101, 110, 116, 32, 114, 101, 116, 117, 114, 110, 32, 99, 111, 114, 114, 101, 99, 116, 32, 97, 109, 109, 111, 117, 110, 116, 0
    str_350: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_351: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 114, 97, 120, 32, 45, 32, 56, 93, 10, 0
    str_352: db 32, 32, 32, 32, 109, 111, 118, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 44, 32, 114, 97, 120, 10, 0
    str_353: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_354: db 32, 32, 32, 32, 115, 117, 98, 32, 114, 97, 120, 44, 32, 49, 54, 10, 0
    str_355: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 44, 32, 114, 97, 120, 10, 0
    str_356: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 97, 120, 44, 32, 49, 54, 10, 0
    str_357: db 32, 32, 32, 32, 106, 109, 112, 32, 113, 119, 111, 114, 100, 32, 91, 114, 97, 120, 93, 10, 0
    str_358: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_359: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_360: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_361: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 115, 112, 44, 32, 56, 10, 0
    str_362: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 97, 114, 103, 115, 95, 112, 116, 114, 93, 10, 0
    str_363: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 114, 97, 120, 93, 10, 0
    str_364: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_365: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 97, 114, 103, 115, 95, 112, 116, 114, 93, 10, 0
    str_366: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 97, 120, 44, 32, 56, 10, 0
    str_367: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_368: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 97, 114, 103, 115, 95, 112, 116, 114, 93, 10, 0
    str_369: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 91, 114, 97, 120, 93, 10, 0
    str_370: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 97, 120, 44, 32, 50, 10, 0
    str_371: db 32, 32, 32, 32, 115, 104, 108, 32, 114, 97, 120, 44, 32, 51, 10, 0
    str_372: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 98, 120, 44, 32, 91, 97, 114, 103, 115, 95, 112, 116, 114, 93, 10, 0
    str_373: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 98, 120, 44, 32, 114, 97, 120, 10, 0
    str_374: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 98, 120, 10, 0
    str_375: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 97, 120, 44, 32, 54, 48, 10, 0
    str_376: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_377: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_378: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_379: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_380: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_381: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 98, 120, 10, 0
    str_382: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_383: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_384: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 98, 120, 10, 0
    str_385: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_386: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 98, 120, 10, 0
    str_387: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_388: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 98, 120, 44, 32, 91, 114, 97, 120, 93, 10, 0
    str_389: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 98, 120, 10, 0
    str_390: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_391: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 98, 120, 44, 32, 114, 98, 120, 10, 0
    str_392: db 32, 32, 32, 32, 109, 111, 118, 32, 98, 108, 44, 32, 91, 114, 97, 120, 93, 10, 0
    str_393: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 98, 120, 10, 0
    str_394: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_395: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_396: db 32, 32, 32, 32, 109, 111, 118, 32, 113, 119, 111, 114, 100, 32, 91, 114, 97, 120, 93, 44, 32, 114, 98, 120, 10, 0
    str_397: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_398: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_399: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_400: db 32, 32, 32, 32, 109, 111, 118, 32, 98, 121, 116, 101, 32, 91, 114, 97, 120, 93, 44, 32, 98, 108, 10, 0
    str_401: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_402: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 99, 120, 44, 32, 114, 99, 120, 10, 0
    str_403: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 100, 120, 44, 32, 49, 10, 0
    str_404: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_405: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_406: db 32, 32, 32, 32, 99, 109, 112, 32, 114, 97, 120, 44, 32, 114, 98, 120, 10, 0
    str_407: db 32, 32, 32, 32, 99, 109, 111, 118, 101, 32, 114, 99, 120, 44, 32, 114, 100, 120, 10, 0
    str_408: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 99, 120, 10, 0
    str_409: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 99, 120, 44, 32, 114, 99, 120, 10, 0
    str_410: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 100, 120, 44, 32, 49, 10, 0
    str_411: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_412: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_413: db 32, 32, 32, 32, 99, 109, 112, 32, 114, 97, 120, 44, 32, 114, 98, 120, 10, 0
    str_414: db 32, 32, 32, 32, 99, 109, 111, 118, 110, 101, 32, 114, 99, 120, 44, 32, 114, 100, 120, 10, 0
    str_415: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 99, 120, 10, 0
    str_416: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 99, 120, 44, 32, 114, 99, 120, 10, 0
    str_417: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 100, 120, 44, 32, 49, 10, 0
    str_418: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_419: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_420: db 32, 32, 32, 32, 99, 109, 112, 32, 114, 97, 120, 44, 32, 114, 98, 120, 10, 0
    str_421: db 32, 32, 32, 32, 99, 109, 111, 118, 108, 32, 114, 99, 120, 44, 32, 114, 100, 120, 10, 0
    str_422: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 99, 120, 10, 0
    str_423: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 99, 120, 44, 32, 114, 99, 120, 10, 0
    str_424: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 100, 120, 44, 32, 49, 10, 0
    str_425: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_426: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_427: db 32, 32, 32, 32, 99, 109, 112, 32, 114, 97, 120, 44, 32, 114, 98, 120, 10, 0
    str_428: db 32, 32, 32, 32, 99, 109, 111, 118, 103, 32, 114, 99, 120, 44, 32, 114, 100, 120, 10, 0
    str_429: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 99, 120, 10, 0
    str_430: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_431: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 97, 120, 44, 32, 49, 10, 0
    str_432: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_433: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_434: db 32, 32, 32, 32, 110, 111, 116, 32, 114, 97, 120, 10, 0
    str_435: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_436: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_437: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_438: db 32, 32, 32, 32, 97, 110, 100, 32, 114, 97, 120, 44, 32, 114, 98, 120, 10, 0
    str_439: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_440: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_441: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_442: db 32, 32, 32, 32, 111, 114, 32, 114, 97, 120, 44, 32, 114, 98, 120, 10, 0
    str_443: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_444: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_445: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_446: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 97, 120, 44, 32, 114, 98, 120, 10, 0
    str_447: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_448: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_449: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_450: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 97, 120, 44, 32, 114, 98, 120, 10, 0
    str_451: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 98, 120, 44, 32, 91, 114, 97, 120, 93, 10, 0
    str_452: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 98, 120, 10, 0
    str_453: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_454: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_455: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 97, 120, 44, 32, 114, 98, 120, 10, 0
    str_456: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_457: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_458: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_459: db 32, 32, 32, 32, 115, 117, 98, 32, 114, 97, 120, 44, 32, 114, 98, 120, 10, 0
    str_460: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_461: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_462: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_463: db 32, 32, 32, 32, 105, 109, 117, 108, 32, 114, 97, 120, 44, 32, 114, 98, 120, 10, 0
    str_464: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_465: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 100, 120, 44, 32, 114, 100, 120, 10, 0
    str_466: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_467: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_468: db 32, 32, 32, 32, 105, 100, 105, 118, 32, 114, 98, 120, 10, 0
    str_469: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_470: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 100, 120, 10, 0
    str_471: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_472: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_473: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_474: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_475: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_476: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_477: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_478: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_479: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_480: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 115, 105, 10, 0
    str_481: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_482: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_483: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_484: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_485: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 115, 105, 10, 0
    str_486: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 120, 10, 0
    str_487: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_488: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_489: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_490: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_491: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 115, 105, 10, 0
    str_492: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 120, 10, 0
    str_493: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 49, 48, 10, 0
    str_494: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_495: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_496: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_497: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_498: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 115, 105, 10, 0
    str_499: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 120, 10, 0
    str_500: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 49, 48, 10, 0
    str_501: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 56, 10, 0
    str_502: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_503: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_504: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 97, 120, 10, 0
    str_505: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_506: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 115, 105, 10, 0
    str_507: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 120, 10, 0
    str_508: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 49, 48, 10, 0
    str_509: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 56, 10, 0
    str_510: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 57, 10, 0
    str_511: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_512: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 97, 120, 10, 0
    str_513: db 73, 110, 116, 114, 105, 110, 115, 105, 99, 32, 97, 99, 116, 105, 111, 110, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 0
    str_514: db 32, 32, 32, 32, 0
    str_515: db 10, 0
    str_516: db 121, 0
    str_517: db 91, 65, 83, 77, 93, 32, 0
    str_518: db 10, 0
    str_519: db 83, 105, 109, 117, 108, 97, 116, 111, 114, 32, 105, 115, 32, 117, 110, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 97, 115, 32, 111, 102, 32, 110, 111, 119, 0
    str_520: db 83, 73, 90, 69, 0
    str_521: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_522: db 32, 32, 32, 32, 116, 101, 115, 116, 32, 114, 98, 120, 44, 32, 114, 98, 120, 10, 0
    str_523: db 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_524: db 58, 32, 59, 32, 105, 102, 10, 0
    str_525: db 32, 32, 32, 32, 106, 122, 32, 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_526: db 10, 0
    str_527: db 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_528: db 58, 32, 59, 32, 100, 111, 10, 0
    str_529: db 32, 32, 32, 32, 106, 109, 112, 32, 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_530: db 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_531: db 58, 32, 59, 32, 108, 97, 109, 98, 100, 97, 10, 0
    str_532: db 32, 32, 32, 32, 106, 109, 112, 32, 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_533: db 10, 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_534: db 58, 32, 59, 32, 112, 108, 97, 109, 98, 100, 97, 10, 0
    str_535: db 83, 73, 90, 69, 0
    str_536: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_537: db 58, 32, 59, 32, 105, 102, 10, 0
    str_538: db 73, 102, 32, 115, 116, 97, 116, 101, 109, 101, 110, 116, 32, 99, 104, 97, 110, 103, 101, 115, 32, 115, 116, 97, 99, 107, 32, 112, 111, 115, 105, 116, 105, 111, 110, 0
    str_539: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_540: db 58, 32, 59, 32, 108, 97, 109, 98, 100, 97, 10, 0
    str_541: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_542: db 10, 0
    str_543: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_544: db 58, 32, 59, 32, 112, 108, 97, 109, 98, 100, 97, 10, 0
    str_545: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_546: db 10, 0
    str_547: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 98, 120, 10, 0
    str_548: db 32, 32, 32, 32, 116, 101, 115, 116, 32, 114, 98, 120, 44, 32, 114, 98, 120, 10, 0
    str_549: db 32, 32, 32, 32, 106, 110, 122, 32, 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_550: db 10, 0
    str_551: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_552: db 58, 32, 59, 32, 100, 111, 10, 0
    str_553: db 68, 111, 32, 115, 116, 97, 116, 101, 109, 101, 110, 116, 32, 99, 104, 97, 110, 103, 101, 115, 32, 115, 116, 97, 99, 107, 32, 112, 111, 115, 105, 116, 105, 111, 110, 0
    str_554: db 80, 114, 111, 99, 32, 100, 111, 115, 101, 110, 116, 32, 114, 101, 116, 117, 114, 110, 32, 111, 114, 32, 113, 117, 105, 116, 0
    str_555: db 115, 108, 97, 115, 104, 0
    str_556: db 112, 101, 114, 99, 0
    str_557: db 95, 0
    str_558: db 67, 111, 110, 115, 116, 32, 39, 0
    str_559: db 39, 32, 105, 115, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 46, 0
    str_560: db 83, 116, 97, 99, 107, 32, 85, 110, 100, 101, 114, 102, 108, 111, 119, 0
    str_561: db 112, 114, 111, 99, 95, 0
    str_562: db 58, 10, 32, 32, 32, 32, 98, 32, 112, 114, 111, 99, 95, 0
    str_563: db 10, 0
    str_564: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 112, 114, 111, 99, 95, 0
    str_565: db 10, 0
    str_566: db 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_567: db 58, 32, 59, 32, 99, 97, 108, 108, 10, 0
    str_568: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 49, 44, 32, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 10, 0
    str_569: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 49, 44, 32, 91, 114, 49, 93, 10, 0
    str_570: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 49, 44, 32, 35, 49, 54, 10, 0
    str_571: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 50, 44, 32, 35, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_572: db 32, 32, 32, 32, 115, 117, 98, 32, 114, 49, 44, 32, 35, 56, 10, 0
    str_573: db 32, 32, 32, 32, 115, 116, 114, 32, 114, 50, 44, 32, 91, 114, 49, 93, 10, 0
    str_574: db 32, 32, 32, 32, 115, 116, 114, 32, 114, 49, 44, 32, 35, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_575: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 49, 44, 32, 35, 56, 10, 0
    str_576: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 50, 44, 32, 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_577: db 10, 0
    str_578: db 32, 32, 32, 32, 115, 116, 114, 32, 114, 50, 44, 32, 91, 114, 49, 93, 10, 0
    str_579: db 32, 32, 32, 32, 98, 32, 112, 114, 111, 99, 95, 0
    str_580: db 10, 0
    str_581: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_582: db 58, 32, 59, 32, 99, 97, 108, 108, 10, 0
    str_583: db 112, 114, 111, 99, 95, 0
    str_584: db 95, 0
    str_585: db 59, 32, 104, 101, 97, 100, 0
    str_586: db 58, 10, 0
    str_587: db 95, 0
    str_588: db 73, 110, 104, 101, 114, 105, 116, 97, 110, 99, 101, 32, 105, 115, 32, 117, 110, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 97, 115, 32, 111, 102, 32, 110, 111, 119, 0
    str_589: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 49, 44, 32, 35, 0
    str_590: db 10, 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_591: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 109, 101, 109, 43, 0
    str_592: db 59, 32, 0
    str_593: db 10, 0
    str_594: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 49, 44, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_595: db 32, 32, 32, 32, 115, 117, 98, 32, 114, 49, 44, 32, 35, 56, 10, 0
    str_596: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 49, 44, 32, 35, 91, 114, 49, 93, 10, 0
    str_597: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 49, 44, 32, 0
    str_598: db 10, 0
    str_599: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_600: db 87, 111, 114, 100, 32, 39, 0
    str_601: db 39, 105, 115, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 0
    str_602: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 49, 44, 32, 35, 0
    str_603: db 10, 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_604: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 115, 116, 114, 95, 0
    str_605: db 10, 0
    str_606: db 32, 32, 32, 32, 108, 100, 114, 32, 35, 0
    str_607: db 10, 0
    str_608: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_609: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 115, 116, 114, 95, 0
    str_610: db 10, 0
    str_611: db 85, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 97, 115, 115, 101, 109, 98, 108, 101, 114, 97, 114, 109, 46, 118, 105, 115, 105, 116, 119, 111, 114, 100, 0
    str_612: db 85, 110, 114, 101, 97, 99, 97, 98, 108, 101, 32, 97, 115, 115, 101, 109, 98, 108, 101, 114, 97, 114, 109, 46, 118, 105, 115, 105, 116, 100, 101, 102, 0
    str_613: db 85, 110, 114, 101, 97, 99, 97, 98, 108, 101, 32, 97, 115, 115, 101, 109, 98, 108, 101, 114, 97, 114, 109, 46, 118, 105, 115, 105, 116, 112, 114, 111, 112, 0
    str_614: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_615: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 49, 44, 32, 0
    str_616: db 10, 0
    str_617: db 32, 32, 32, 32, 109, 111, 118, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 44, 32, 114, 49, 10, 0
    str_618: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_619: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 49, 44, 32, 0
    str_620: db 10, 0
    str_621: db 32, 32, 32, 32, 109, 111, 118, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 44, 32, 114, 49, 10, 0
    str_622: db 85, 110, 114, 101, 97, 99, 97, 98, 108, 101, 32, 97, 115, 115, 101, 109, 98, 108, 101, 114, 97, 114, 109, 46, 118, 105, 115, 105, 116, 118, 97, 114, 32, 108, 111, 99, 97, 108, 0
    str_623: db 85, 110, 114, 101, 97, 99, 97, 98, 108, 101, 32, 97, 115, 115, 101, 109, 98, 108, 101, 114, 97, 114, 109, 46, 118, 105, 115, 105, 116, 118, 97, 114, 32, 103, 108, 111, 98, 97, 108, 0
    str_624: db 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_625: db 58, 32, 59, 32, 99, 97, 108, 108, 10, 0
    str_626: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 51, 10, 0
    str_627: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_628: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 49, 44, 32, 49, 54, 10, 0
    str_629: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 50, 44, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_630: db 32, 32, 32, 32, 109, 111, 118, 32, 91, 114, 49, 32, 45, 32, 56, 93, 44, 32, 114, 50, 10, 0
    str_631: db 32, 32, 32, 32, 109, 111, 118, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 44, 32, 114, 49, 10, 0
    str_632: db 32, 32, 32, 32, 109, 111, 118, 32, 91, 114, 49, 93, 44, 32, 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_633: db 10, 0
    str_634: db 32, 32, 32, 32, 98, 32, 114, 51, 10, 0
    str_635: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_636: db 58, 32, 59, 32, 99, 97, 108, 108, 10, 0
    str_637: db 112, 114, 111, 99, 32, 39, 0
    str_638: db 39, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 0
    str_639: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 112, 114, 111, 99, 95, 0
    str_640: db 10, 0
    str_641: db 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_642: db 58, 32, 59, 32, 99, 97, 108, 108, 10, 0
    str_643: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_644: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 49, 44, 32, 49, 54, 10, 0
    str_645: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 50, 44, 32, 91, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 10, 0
    str_646: db 32, 32, 32, 32, 109, 111, 118, 32, 91, 114, 49, 32, 45, 32, 56, 93, 44, 32, 114, 50, 10, 0
    str_647: db 32, 32, 32, 32, 109, 111, 118, 32, 91, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 93, 44, 32, 91, 114, 49, 93, 10, 0
    str_648: db 32, 32, 32, 32, 109, 111, 118, 32, 91, 114, 49, 93, 44, 32, 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_649: db 10, 0
    str_650: db 32, 32, 32, 32, 98, 32, 112, 114, 111, 99, 95, 0
    str_651: db 10, 0
    str_652: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_653: db 58, 32, 59, 32, 99, 97, 108, 108, 10, 0
    str_654: db 80, 114, 111, 99, 32, 100, 111, 115, 101, 110, 116, 32, 114, 101, 116, 117, 114, 110, 32, 99, 111, 114, 114, 101, 99, 116, 32, 97, 109, 109, 111, 117, 110, 116, 0
    str_655: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 49, 44, 32, 61, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 10, 0
    str_656: db 32, 32, 32, 32, 115, 117, 98, 32, 114, 49, 44, 32, 35, 56, 10, 0
    str_657: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 49, 44, 32, 91, 114, 49, 93, 10, 0
    str_658: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 50, 44, 32, 108, 111, 99, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 10, 0
    str_659: db 32, 32, 32, 32, 115, 116, 114, 32, 114, 49, 44, 32, 91, 114, 50, 93, 10, 0
    str_660: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 49, 44, 32, 61, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 10, 0
    str_661: db 32, 32, 32, 32, 115, 117, 98, 32, 114, 49, 44, 32, 35, 49, 54, 10, 0
    str_662: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 50, 44, 32, 114, 101, 116, 95, 115, 116, 97, 99, 107, 95, 114, 115, 112, 10, 0
    str_663: db 32, 32, 32, 32, 115, 116, 114, 32, 114, 49, 44, 32, 91, 114, 50, 93, 10, 0
    str_664: db 32, 32, 32, 32, 108, 100, 114, 32, 114, 49, 44, 32, 35, 49, 54, 10, 0
    str_665: db 32, 32, 32, 32, 98, 32, 91, 114, 49, 93, 10, 0
    str_666: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_667: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_668: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_669: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_670: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 32, 91, 97, 114, 103, 115, 95, 112, 116, 114, 93, 10, 0
    str_671: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 32, 91, 114, 49, 93, 10, 0
    str_672: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_673: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 32, 91, 97, 114, 103, 115, 95, 112, 116, 114, 93, 10, 0
    str_674: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 49, 44, 32, 56, 10, 0
    str_675: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_676: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 32, 91, 97, 114, 103, 115, 95, 112, 116, 114, 93, 10, 0
    str_677: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 32, 91, 114, 49, 93, 10, 0
    str_678: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 49, 44, 32, 50, 10, 0
    str_679: db 32, 32, 32, 32, 115, 104, 108, 32, 114, 49, 44, 32, 51, 10, 0
    str_680: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 50, 44, 32, 91, 97, 114, 103, 115, 95, 112, 116, 114, 93, 10, 0
    str_681: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 50, 44, 32, 114, 49, 10, 0
    str_682: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 50, 125, 10, 0
    str_683: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 32, 54, 48, 10, 0
    str_684: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_685: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_686: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_687: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_688: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_689: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 50, 125, 10, 0
    str_690: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_691: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_692: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 50, 125, 10, 0
    str_693: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_694: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 50, 125, 10, 0
    str_695: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_696: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 50, 44, 32, 91, 114, 49, 93, 10, 0
    str_697: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 50, 125, 10, 0
    str_698: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_699: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 50, 44, 32, 114, 50, 10, 0
    str_700: db 32, 32, 32, 32, 109, 111, 118, 32, 98, 108, 44, 32, 91, 114, 49, 93, 10, 0
    str_701: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 50, 125, 10, 0
    str_702: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_703: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_704: db 32, 32, 32, 32, 115, 116, 114, 32, 114, 50, 44, 32, 91, 114, 49, 93, 10, 0
    str_705: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_706: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_707: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_708: db 32, 32, 32, 32, 115, 116, 114, 98, 32, 114, 50, 44, 32, 91, 114, 49, 93, 10, 0
    str_709: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_710: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 51, 44, 32, 114, 51, 10, 0
    str_711: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 32, 49, 10, 0
    str_712: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_713: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_714: db 32, 32, 32, 32, 99, 109, 112, 32, 114, 49, 44, 32, 114, 50, 10, 0
    str_715: db 32, 32, 32, 32, 99, 109, 111, 118, 101, 32, 114, 51, 44, 32, 114, 52, 10, 0
    str_716: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 51, 10, 0
    str_717: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 51, 44, 32, 114, 51, 10, 0
    str_718: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 32, 49, 10, 0
    str_719: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_720: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_721: db 32, 32, 32, 32, 99, 109, 112, 32, 114, 49, 44, 32, 114, 50, 10, 0
    str_722: db 32, 32, 32, 32, 99, 109, 111, 118, 110, 101, 32, 114, 51, 44, 32, 114, 52, 10, 0
    str_723: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 51, 10, 0
    str_724: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 51, 44, 32, 114, 51, 10, 0
    str_725: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 32, 49, 10, 0
    str_726: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_727: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_728: db 32, 32, 32, 32, 99, 109, 112, 32, 114, 49, 44, 32, 114, 50, 10, 0
    str_729: db 32, 32, 32, 32, 99, 109, 111, 118, 108, 32, 114, 51, 44, 32, 114, 52, 10, 0
    str_730: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 51, 10, 0
    str_731: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 51, 44, 32, 114, 51, 10, 0
    str_732: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 32, 49, 10, 0
    str_733: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_734: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_735: db 32, 32, 32, 32, 99, 109, 112, 32, 114, 49, 44, 32, 114, 50, 10, 0
    str_736: db 32, 32, 32, 32, 99, 109, 111, 118, 103, 32, 114, 51, 44, 32, 114, 52, 10, 0
    str_737: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 51, 10, 0
    str_738: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_739: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 49, 44, 32, 49, 10, 0
    str_740: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_741: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_742: db 32, 32, 32, 32, 110, 111, 116, 32, 114, 49, 10, 0
    str_743: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_744: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_745: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_746: db 32, 32, 32, 32, 97, 110, 100, 32, 114, 49, 44, 32, 114, 50, 10, 0
    str_747: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_748: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_749: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_750: db 32, 32, 32, 32, 111, 114, 32, 114, 49, 44, 32, 114, 50, 10, 0
    str_751: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_752: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_753: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_754: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 49, 44, 32, 114, 50, 10, 0
    str_755: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_756: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_757: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_758: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 49, 44, 32, 114, 50, 10, 0
    str_759: db 32, 32, 32, 32, 109, 111, 118, 32, 114, 50, 44, 32, 91, 114, 49, 93, 10, 0
    str_760: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 50, 125, 10, 0
    str_761: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_762: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_763: db 32, 32, 32, 32, 97, 100, 100, 32, 114, 49, 44, 32, 114, 50, 10, 0
    str_764: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_765: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_766: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_767: db 32, 32, 32, 32, 115, 117, 98, 32, 114, 49, 44, 32, 114, 50, 10, 0
    str_768: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_769: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_770: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_771: db 32, 32, 32, 32, 109, 117, 108, 32, 114, 49, 44, 32, 114, 50, 10, 0
    str_772: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_773: db 32, 32, 32, 32, 120, 111, 114, 32, 114, 52, 44, 32, 114, 52, 10, 0
    str_774: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_775: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_776: db 32, 32, 32, 32, 105, 100, 105, 118, 32, 114, 50, 10, 0
    str_777: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_778: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 114, 52, 10, 0
    str_779: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_780: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_781: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_782: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_783: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_784: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_785: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_786: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_787: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_788: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 115, 105, 10, 0
    str_789: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_790: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_791: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_792: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_793: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 115, 105, 10, 0
    str_794: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 52, 10, 0
    str_795: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_796: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_797: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_798: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_799: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 115, 105, 10, 0
    str_800: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 52, 10, 0
    str_801: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 48, 10, 0
    str_802: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_803: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_804: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_805: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_806: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 115, 105, 10, 0
    str_807: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 52, 10, 0
    str_808: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 48, 10, 0
    str_809: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 56, 10, 0
    str_810: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_811: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_812: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 10, 0
    str_813: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 100, 105, 10, 0
    str_814: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 115, 105, 10, 0
    str_815: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 52, 10, 0
    str_816: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 49, 125, 48, 10, 0
    str_817: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 56, 10, 0
    str_818: db 32, 32, 32, 32, 112, 111, 112, 32, 114, 57, 10, 0
    str_819: db 32, 32, 32, 32, 115, 121, 115, 99, 97, 108, 108, 10, 0
    str_820: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 123, 114, 49, 125, 10, 0
    str_821: db 73, 110, 116, 114, 105, 110, 115, 105, 99, 32, 97, 99, 116, 105, 111, 110, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 0
    str_822: db 32, 32, 32, 32, 0
    str_823: db 10, 0
    str_824: db 121, 0
    str_825: db 91, 65, 83, 77, 93, 32, 0
    str_826: db 10, 0
    str_827: db 83, 105, 109, 117, 108, 97, 116, 111, 114, 32, 105, 115, 32, 117, 110, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 97, 115, 32, 111, 102, 32, 110, 111, 119, 0
    str_828: db 83, 73, 90, 69, 0
    str_829: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_830: db 32, 32, 32, 32, 116, 101, 115, 116, 32, 114, 50, 44, 32, 114, 50, 10, 0
    str_831: db 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_832: db 58, 32, 59, 32, 105, 102, 10, 0
    str_833: db 32, 32, 32, 32, 106, 122, 32, 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_834: db 10, 0
    str_835: db 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_836: db 58, 32, 59, 32, 100, 111, 10, 0
    str_837: db 32, 32, 32, 32, 98, 32, 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_838: db 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_839: db 58, 32, 59, 32, 108, 97, 109, 98, 100, 97, 10, 0
    str_840: db 32, 32, 32, 32, 98, 32, 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_841: db 10, 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_842: db 58, 32, 59, 32, 112, 108, 97, 109, 98, 100, 97, 10, 0
    str_843: db 83, 73, 90, 69, 0
    str_844: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_845: db 58, 32, 59, 32, 105, 102, 10, 0
    str_846: db 73, 102, 32, 115, 116, 97, 116, 101, 109, 101, 110, 116, 32, 99, 104, 97, 110, 103, 101, 115, 32, 115, 116, 97, 99, 107, 32, 112, 111, 115, 105, 116, 105, 111, 110, 0
    str_847: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_848: db 58, 32, 59, 32, 108, 97, 109, 98, 100, 97, 10, 0
    str_849: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_850: db 10, 0
    str_851: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_852: db 58, 32, 59, 32, 112, 108, 97, 109, 98, 100, 97, 10, 0
    str_853: db 32, 32, 32, 32, 112, 117, 115, 104, 32, 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_854: db 10, 0
    str_855: db 32, 32, 32, 32, 112, 111, 112, 32, 123, 114, 50, 125, 10, 0
    str_856: db 32, 32, 32, 32, 116, 101, 115, 116, 32, 114, 50, 44, 32, 114, 50, 10, 0
    str_857: db 32, 32, 32, 32, 106, 110, 122, 32, 46, 98, 108, 111, 99, 107, 115, 116, 97, 114, 116, 95, 0
    str_858: db 10, 0
    str_859: db 46, 98, 108, 111, 99, 107, 101, 110, 100, 95, 0
    str_860: db 58, 32, 59, 32, 100, 111, 10, 0
    str_861: db 68, 111, 32, 115, 116, 97, 116, 101, 109, 101, 110, 116, 32, 99, 104, 97, 110, 103, 101, 115, 32, 115, 116, 97, 99, 107, 32, 112, 111, 115, 105, 116, 105, 111, 110, 0
    str_862: db 80, 114, 111, 99, 32, 100, 111, 115, 101, 110, 116, 32, 114, 101, 116, 117, 114, 110, 32, 111, 114, 32, 113, 117, 105, 116, 0
    str_863: db 51, 46, 48, 46, 48, 0
    str_864: db 115, 108, 97, 109, 32, 99, 111, 109, 112, 105, 108, 101, 114, 32, 118, 0
    str_865: db 69, 82, 82, 79, 82, 58, 32, 89, 111, 117, 32, 109, 117, 115, 116, 32, 99, 111, 109, 112, 105, 108, 101, 32, 101, 120, 97, 99, 116, 108, 121, 32, 49, 32, 102, 105, 108, 101, 46, 0
    str_866: db 69, 82, 82, 79, 82, 58, 32, 76, 97, 115, 116, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 115, 117, 112, 112, 108, 105, 101, 100, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 97, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 0
    str_867: db 115, 108, 97, 109, 32, 99, 111, 109, 112, 105, 108, 101, 114, 32, 118, 0
    str_868: db 32, 117, 115, 97, 103, 101, 58, 0
    str_869: db 115, 108, 97, 109, 32, 91, 45, 104, 118, 97, 115, 93, 32, 91, 45, 111, 32, 111, 117, 116, 112, 117, 116, 93, 32, 102, 105, 108, 101, 0
    str_870: db 45, 118, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 104, 111, 119, 115, 32, 116, 104, 101, 32, 118, 101, 114, 115, 105, 111, 110, 32, 97, 110, 100, 32, 101, 120, 105, 116, 115, 46, 0
    str_871: db 45, 104, 44, 32, 45, 45, 104, 101, 108, 112, 32, 32, 32, 32, 115, 104, 111, 119, 115, 32, 116, 104, 105, 115, 32, 109, 101, 115, 115, 97, 103, 101, 32, 97, 110, 100, 32, 101, 120, 105, 116, 115, 46, 0
    str_872: db 45, 111, 44, 32, 45, 45, 111, 117, 116, 112, 117, 116, 32, 32, 115, 101, 116, 115, 32, 116, 104, 101, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 46, 0
    str_873: db 45, 97, 44, 32, 45, 45, 97, 115, 109, 32, 32, 32, 32, 32, 107, 101, 101, 112, 115, 32, 116, 104, 101, 32, 97, 115, 109, 32, 102, 105, 108, 101, 46, 0
    str_874: db 45, 115, 44, 32, 45, 45, 115, 105, 109, 32, 32, 32, 32, 32, 107, 101, 101, 112, 115, 32, 116, 104, 101, 32, 97, 115, 109, 32, 102, 105, 108, 101, 46, 0
    str_875: db 45, 118, 0
    str_876: db 45, 104, 0
    str_877: db 45, 45, 104, 101, 108, 112, 0
    str_878: db 45, 111, 0
    str_879: db 45, 45, 111, 117, 116, 112, 117, 116, 0
    str_880: db 45, 115, 0
    str_881: db 45, 45, 115, 105, 109, 0
    str_882: db 45, 45, 97, 114, 109, 0
    str_883: db 97, 46, 111, 117, 116, 0
    str_884: db 116, 101, 109, 112, 46, 97, 115, 109, 0
    str_885: db 47, 117, 115, 114, 47, 98, 105, 110, 47, 102, 97, 115, 109, 0
    str_886: db 45, 112, 0
    str_887: db 50, 48, 0
    str_888: db 45, 109, 0
    str_889: db 53, 50, 52, 50, 56, 56, 0
    str_890: db 116, 101, 109, 112, 46, 97, 115, 109, 0
    str_891: db 116, 101, 109, 112, 46, 111, 0
    str_892: db 47, 117, 115, 114, 47, 98, 105, 110, 47, 108, 100, 0
    str_893: db 45, 100, 121, 110, 97, 109, 105, 99, 45, 108, 105, 110, 107, 101, 114, 0
    str_894: db 47, 108, 105, 98, 54, 52, 47, 108, 100, 45, 108, 105, 110, 117, 120, 45, 120, 56, 54, 45, 54, 52, 46, 115, 111, 46, 50, 0
    str_895: db 45, 111, 0
    str_896: db 45, 108, 99, 0
    str_897: db 45, 109, 101, 108, 102, 95, 120, 56, 54, 95, 54, 52, 0
    str_898: db 116, 101, 109, 112, 46, 111, 0
    str_899: db 116, 101, 109, 112, 46, 97, 115, 109, 0
    str_900: db 32, 32, 32, 32, 98, 32, 109, 97, 105, 110, 10, 0
section '.bss'
    args_ptr: rq 1
    ret_stack_rsp: rq 1
    ret_stack: rq 1024
    loc_stack_rsp: rq 1
    loc_stack: rq 512
    mem: rb 339