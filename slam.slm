inc "std/cstr.slm"
inc "std/os.slm"
inc "compiler/lexer.slm"
inc "compiler/parser.slm"
inc "compiler/assembler.slm"
inc "compiler/assemblerarm.slm"

oper proc VERSION 0 1 "3.0.0" ret end

enum
0   HELP_SHOW
    HELP_VERSION
    HELP_ARGS
    HELP_OUTPUT
end

enum
0   COMP_ASM
    COMP_ARM
    COMP_SIM
end

oper proc help 1 0
  copy HELP_VERSION == if
    "slam compiler v" cstr.print
    VERSION cstr.println
    disc 0 quit
  end
  copy HELP_ARGS == if
    "ERROR: You must compile exactly 1 file." cstr.println
  end
  copy HELP_OUTPUT == if
    "ERROR: Last argument supplied requires a parameter" cstr.println
  end
  disc
  "slam compiler v" cstr.print VERSION cstr.print " usage:" cstr.println
  cstr.cr
  "slam [-hvas]\ [-o output]\ file" cstr.println
  cstr.cr
  "-v            shows the version and exits." cstr.println
  "-h, --help    shows this message and exits." cstr.println
  "-o, --output  sets the output file." cstr.println
  "-a, --asm     keeps the asm file." cstr.println
  "-s, --sim     keeps the asm file." cstr.println

  1 quit

  ret
end

var output 128
var input 128
var mode 1

oper proc setinput 1 0
  input swap cstr.cpy disc disc

  ret
end

oper proc setoutput 1 1
  copy argc 1 - > if HELP_OUTPUT help 0 quit end

  copy os.args

  output swap cstr.cpy disc disc

  ret
end

oper proc setmode 1 0
  mode swap putc disc

  ret
end

oper proc applyarg 2 1
  copy "-v" cstr.eq
  if disc HELP_VERSION help ret end
  copy "-h" cstr.eq
  if disc HELP_SHOW help ret end
  copy "--help" cstr.eq
  if disc HELP_SHOW help ret end
  copy "-o" cstr.eq
  if disc 1 + setoutput ret end
  copy "--output" cstr.eq
  if disc 1 + setoutput ret end
  copy "-s" cstr.eq
  if disc COMP_SIM setmode ret end
  copy "--sim" cstr.eq
  if disc COMP_SIM setmode ret end
  copy "--arm" cstr.eq
  if disc COMP_ARM setmode ret end
  setinput

  ret
end

oper proc main 0 0
  var tmpnode 8
  var cmdtmpbuffer 8

  1 argc == if HELP_ARGS help end

  output "a.out" cstr.cpy disc disc
  lexer.print 1 putc disc

  0
  do
    1 +

    copy os.args applyarg

    copy argc 1 - <
  end
  disc

  input
  bool.false
  lexer.new lexer.run
  parser.new parser.run
  copy tmpnode swap put disc

  mode readc
  copy COMP_ASM == if
    disc

    writer.current
    "temp.asm" writer.new
    put disc

    writer.writeheader

    assembler.new swap
    assembler.visitnode

    writer.writefooter

    cmdtmpbuffer 256 heap.zalloc put disc

    cmdtmpbuffer read
    "/usr/bin/fasm" put int.SIZE +
    "-p" put int.SIZE +
    "20" put int.SIZE +
    "-m" put int.SIZE +
    "524288" put int.SIZE +
    "temp.asm" put int.SIZE +
    "temp.o" put int.SIZE +
    NULL put disc

    cmdtmpbuffer read
    os.execcmdecho disc

    cmdtmpbuffer read
    "/usr/bin/ld" put int.SIZE +
    "-dynamic-linker" put int.SIZE +
    "/lib64/ld-linux-x86-64.so.2" put int.SIZE +
    "-o" put int.SIZE +
    output put int.SIZE +
    "-lc" put int.SIZE +
    "-melf_x86_64" put int.SIZE +
    "temp.o" put int.SIZE +
    NULL put disc

    cmdtmpbuffer read
    os.execcmdecho disc
    0 quit
  end
  copy COMP_SIM == if
    disc
    simulator.new simulator.run

    quit
  end
  copy COMP_ARM == if
    disc

    writer.current
    "temp.asm" writer.new
    put disc

    "    b proc_main\n" writer.write

    assemblerarm.new swap
    assemblerarm.visitnode

    0 quit
  end

  1 quit
end
